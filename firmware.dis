
firmware.elf:     file format elf32-littlearm


Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000043c 	.word	0x2000043c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003cd8 	.word	0x08003cd8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000440 	.word	0x20000440
 800020c:	08003cd8 	.word	0x08003cd8

08000210 <__aeabi_drsub>:
 8000210:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000214:	e002      	b.n	800021c <__adddf3>
 8000216:	bf00      	nop

08000218 <__aeabi_dsub>:
 8000218:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800021c <__adddf3>:
 800021c:	b530      	push	{r4, r5, lr}
 800021e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000222:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000226:	ea94 0f05 	teq	r4, r5
 800022a:	bf08      	it	eq
 800022c:	ea90 0f02 	teqeq	r0, r2
 8000230:	bf1f      	itttt	ne
 8000232:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000236:	ea55 0c02 	orrsne.w	ip, r5, r2
 800023a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800023e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000242:	f000 80e2 	beq.w	800040a <__adddf3+0x1ee>
 8000246:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800024a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800024e:	bfb8      	it	lt
 8000250:	426d      	neglt	r5, r5
 8000252:	dd0c      	ble.n	800026e <__adddf3+0x52>
 8000254:	442c      	add	r4, r5
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	ea82 0000 	eor.w	r0, r2, r0
 8000262:	ea83 0101 	eor.w	r1, r3, r1
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	2d36      	cmp	r5, #54	; 0x36
 8000270:	bf88      	it	hi
 8000272:	bd30      	pophi	{r4, r5, pc}
 8000274:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000278:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800027c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000280:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x70>
 8000286:	4240      	negs	r0, r0
 8000288:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800028c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000290:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000294:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000298:	d002      	beq.n	80002a0 <__adddf3+0x84>
 800029a:	4252      	negs	r2, r2
 800029c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a0:	ea94 0f05 	teq	r4, r5
 80002a4:	f000 80a7 	beq.w	80003f6 <__adddf3+0x1da>
 80002a8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b0:	db0d      	blt.n	80002ce <__adddf3+0xb2>
 80002b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002b6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ba:	1880      	adds	r0, r0, r2
 80002bc:	f141 0100 	adc.w	r1, r1, #0
 80002c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002c4:	1880      	adds	r0, r0, r2
 80002c6:	fa43 f305 	asr.w	r3, r3, r5
 80002ca:	4159      	adcs	r1, r3
 80002cc:	e00e      	b.n	80002ec <__adddf3+0xd0>
 80002ce:	f1a5 0520 	sub.w	r5, r5, #32
 80002d2:	f10e 0e20 	add.w	lr, lr, #32
 80002d6:	2a01      	cmp	r2, #1
 80002d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002dc:	bf28      	it	cs
 80002de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002e2:	fa43 f305 	asr.w	r3, r3, r5
 80002e6:	18c0      	adds	r0, r0, r3
 80002e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f0:	d507      	bpl.n	8000302 <__adddf3+0xe6>
 80002f2:	f04f 0e00 	mov.w	lr, #0
 80002f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000302:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000306:	d31b      	bcc.n	8000340 <__adddf3+0x124>
 8000308:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800030c:	d30c      	bcc.n	8000328 <__adddf3+0x10c>
 800030e:	0849      	lsrs	r1, r1, #1
 8000310:	ea5f 0030 	movs.w	r0, r0, rrx
 8000314:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000318:	f104 0401 	add.w	r4, r4, #1
 800031c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000320:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000324:	f080 809a 	bcs.w	800045c <__adddf3+0x240>
 8000328:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800032c:	bf08      	it	eq
 800032e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000332:	f150 0000 	adcs.w	r0, r0, #0
 8000336:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800033a:	ea41 0105 	orr.w	r1, r1, r5
 800033e:	bd30      	pop	{r4, r5, pc}
 8000340:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000344:	4140      	adcs	r0, r0
 8000346:	eb41 0101 	adc.w	r1, r1, r1
 800034a:	3c01      	subs	r4, #1
 800034c:	bf28      	it	cs
 800034e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000352:	d2e9      	bcs.n	8000328 <__adddf3+0x10c>
 8000354:	f091 0f00 	teq	r1, #0
 8000358:	bf04      	itt	eq
 800035a:	4601      	moveq	r1, r0
 800035c:	2000      	moveq	r0, #0
 800035e:	fab1 f381 	clz	r3, r1
 8000362:	bf08      	it	eq
 8000364:	3320      	addeq	r3, #32
 8000366:	f1a3 030b 	sub.w	r3, r3, #11
 800036a:	f1b3 0220 	subs.w	r2, r3, #32
 800036e:	da0c      	bge.n	800038a <__adddf3+0x16e>
 8000370:	320c      	adds	r2, #12
 8000372:	dd08      	ble.n	8000386 <__adddf3+0x16a>
 8000374:	f102 0c14 	add.w	ip, r2, #20
 8000378:	f1c2 020c 	rsb	r2, r2, #12
 800037c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000380:	fa21 f102 	lsr.w	r1, r1, r2
 8000384:	e00c      	b.n	80003a0 <__adddf3+0x184>
 8000386:	f102 0214 	add.w	r2, r2, #20
 800038a:	bfd8      	it	le
 800038c:	f1c2 0c20 	rsble	ip, r2, #32
 8000390:	fa01 f102 	lsl.w	r1, r1, r2
 8000394:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000398:	bfdc      	itt	le
 800039a:	ea41 010c 	orrle.w	r1, r1, ip
 800039e:	4090      	lslle	r0, r2
 80003a0:	1ae4      	subs	r4, r4, r3
 80003a2:	bfa2      	ittt	ge
 80003a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a8:	4329      	orrge	r1, r5
 80003aa:	bd30      	popge	{r4, r5, pc}
 80003ac:	ea6f 0404 	mvn.w	r4, r4
 80003b0:	3c1f      	subs	r4, #31
 80003b2:	da1c      	bge.n	80003ee <__adddf3+0x1d2>
 80003b4:	340c      	adds	r4, #12
 80003b6:	dc0e      	bgt.n	80003d6 <__adddf3+0x1ba>
 80003b8:	f104 0414 	add.w	r4, r4, #20
 80003bc:	f1c4 0220 	rsb	r2, r4, #32
 80003c0:	fa20 f004 	lsr.w	r0, r0, r4
 80003c4:	fa01 f302 	lsl.w	r3, r1, r2
 80003c8:	ea40 0003 	orr.w	r0, r0, r3
 80003cc:	fa21 f304 	lsr.w	r3, r1, r4
 80003d0:	ea45 0103 	orr.w	r1, r5, r3
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f1c4 040c 	rsb	r4, r4, #12
 80003da:	f1c4 0220 	rsb	r2, r4, #32
 80003de:	fa20 f002 	lsr.w	r0, r0, r2
 80003e2:	fa01 f304 	lsl.w	r3, r1, r4
 80003e6:	ea40 0003 	orr.w	r0, r0, r3
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	fa21 f004 	lsr.w	r0, r1, r4
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f094 0f00 	teq	r4, #0
 80003fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003fe:	bf06      	itte	eq
 8000400:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000404:	3401      	addeq	r4, #1
 8000406:	3d01      	subne	r5, #1
 8000408:	e74e      	b.n	80002a8 <__adddf3+0x8c>
 800040a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800040e:	bf18      	it	ne
 8000410:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000414:	d029      	beq.n	800046a <__adddf3+0x24e>
 8000416:	ea94 0f05 	teq	r4, r5
 800041a:	bf08      	it	eq
 800041c:	ea90 0f02 	teqeq	r0, r2
 8000420:	d005      	beq.n	800042e <__adddf3+0x212>
 8000422:	ea54 0c00 	orrs.w	ip, r4, r0
 8000426:	bf04      	itt	eq
 8000428:	4619      	moveq	r1, r3
 800042a:	4610      	moveq	r0, r2
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea91 0f03 	teq	r1, r3
 8000432:	bf1e      	ittt	ne
 8000434:	2100      	movne	r1, #0
 8000436:	2000      	movne	r0, #0
 8000438:	bd30      	popne	{r4, r5, pc}
 800043a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800043e:	d105      	bne.n	800044c <__adddf3+0x230>
 8000440:	0040      	lsls	r0, r0, #1
 8000442:	4149      	adcs	r1, r1
 8000444:	bf28      	it	cs
 8000446:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800044a:	bd30      	pop	{r4, r5, pc}
 800044c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000450:	bf3c      	itt	cc
 8000452:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000456:	bd30      	popcc	{r4, r5, pc}
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000460:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000464:	f04f 0000 	mov.w	r0, #0
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf1a      	itte	ne
 8000470:	4619      	movne	r1, r3
 8000472:	4610      	movne	r0, r2
 8000474:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000478:	bf1c      	itt	ne
 800047a:	460b      	movne	r3, r1
 800047c:	4602      	movne	r2, r0
 800047e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000482:	bf06      	itte	eq
 8000484:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000488:	ea91 0f03 	teqeq	r1, r3
 800048c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	bf00      	nop

08000494 <__aeabi_ui2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f04f 0500 	mov.w	r5, #0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e750      	b.n	8000354 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_i2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004cc:	bf48      	it	mi
 80004ce:	4240      	negmi	r0, r0
 80004d0:	f04f 0100 	mov.w	r1, #0
 80004d4:	e73e      	b.n	8000354 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_f2d>:
 80004d8:	0042      	lsls	r2, r0, #1
 80004da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004de:	ea4f 0131 	mov.w	r1, r1, rrx
 80004e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004e6:	bf1f      	itttt	ne
 80004e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004f4:	4770      	bxne	lr
 80004f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004fa:	bf08      	it	eq
 80004fc:	4770      	bxeq	lr
 80004fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000502:	bf04      	itt	eq
 8000504:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000508:	4770      	bxeq	lr
 800050a:	b530      	push	{r4, r5, lr}
 800050c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000518:	e71c      	b.n	8000354 <__adddf3+0x138>
 800051a:	bf00      	nop

0800051c <__aeabi_ul2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f04f 0500 	mov.w	r5, #0
 800052a:	e00a      	b.n	8000542 <__aeabi_l2d+0x16>

0800052c <__aeabi_l2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800053a:	d502      	bpl.n	8000542 <__aeabi_l2d+0x16>
 800053c:	4240      	negs	r0, r0
 800053e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000542:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000546:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800054e:	f43f aed8 	beq.w	8000302 <__adddf3+0xe6>
 8000552:	f04f 0203 	mov.w	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 fe03 	lsl.w	lr, r1, r3
 800057a:	ea40 000e 	orr.w	r0, r0, lr
 800057e:	fa21 f102 	lsr.w	r1, r1, r2
 8000582:	4414      	add	r4, r2
 8000584:	e6bd      	b.n	8000302 <__adddf3+0xe6>
 8000586:	bf00      	nop

08000588 <__aeabi_dmul>:
 8000588:	b570      	push	{r4, r5, r6, lr}
 800058a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800058e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000592:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000596:	bf1d      	ittte	ne
 8000598:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800059c:	ea94 0f0c 	teqne	r4, ip
 80005a0:	ea95 0f0c 	teqne	r5, ip
 80005a4:	f000 f8de 	bleq	8000764 <__aeabi_dmul+0x1dc>
 80005a8:	442c      	add	r4, r5
 80005aa:	ea81 0603 	eor.w	r6, r1, r3
 80005ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ba:	bf18      	it	ne
 80005bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c8:	d038      	beq.n	800063c <__aeabi_dmul+0xb4>
 80005ca:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005d6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005da:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005de:	f04f 0600 	mov.w	r6, #0
 80005e2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005e6:	f09c 0f00 	teq	ip, #0
 80005ea:	bf18      	it	ne
 80005ec:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005f4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005fc:	d204      	bcs.n	8000608 <__aeabi_dmul+0x80>
 80005fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000602:	416d      	adcs	r5, r5
 8000604:	eb46 0606 	adc.w	r6, r6, r6
 8000608:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800060c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000610:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000614:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000618:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800061c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000620:	bf88      	it	hi
 8000622:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000626:	d81e      	bhi.n	8000666 <__aeabi_dmul+0xde>
 8000628:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800062c:	bf08      	it	eq
 800062e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000632:	f150 0000 	adcs.w	r0, r0, #0
 8000636:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000640:	ea46 0101 	orr.w	r1, r6, r1
 8000644:	ea40 0002 	orr.w	r0, r0, r2
 8000648:	ea81 0103 	eor.w	r1, r1, r3
 800064c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000650:	bfc2      	ittt	gt
 8000652:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000656:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800065a:	bd70      	popgt	{r4, r5, r6, pc}
 800065c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000660:	f04f 0e00 	mov.w	lr, #0
 8000664:	3c01      	subs	r4, #1
 8000666:	f300 80ab 	bgt.w	80007c0 <__aeabi_dmul+0x238>
 800066a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800066e:	bfde      	ittt	le
 8000670:	2000      	movle	r0, #0
 8000672:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000676:	bd70      	pople	{r4, r5, r6, pc}
 8000678:	f1c4 0400 	rsb	r4, r4, #0
 800067c:	3c20      	subs	r4, #32
 800067e:	da35      	bge.n	80006ec <__aeabi_dmul+0x164>
 8000680:	340c      	adds	r4, #12
 8000682:	dc1b      	bgt.n	80006bc <__aeabi_dmul+0x134>
 8000684:	f104 0414 	add.w	r4, r4, #20
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f305 	lsl.w	r3, r0, r5
 8000690:	fa20 f004 	lsr.w	r0, r0, r4
 8000694:	fa01 f205 	lsl.w	r2, r1, r5
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ac:	eb42 0106 	adc.w	r1, r2, r6
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 040c 	rsb	r4, r4, #12
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f304 	lsl.w	r3, r0, r4
 80006c8:	fa20 f005 	lsr.w	r0, r0, r5
 80006cc:	fa01 f204 	lsl.w	r2, r1, r4
 80006d0:	ea40 0002 	orr.w	r0, r0, r2
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006dc:	f141 0100 	adc.w	r1, r1, #0
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 0520 	rsb	r5, r4, #32
 80006f0:	fa00 f205 	lsl.w	r2, r0, r5
 80006f4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f8:	fa20 f304 	lsr.w	r3, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea43 0302 	orr.w	r3, r3, r2
 8000704:	fa21 f004 	lsr.w	r0, r1, r4
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	fa21 f204 	lsr.w	r2, r1, r4
 8000710:	ea20 0002 	bic.w	r0, r0, r2
 8000714:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f094 0f00 	teq	r4, #0
 8000728:	d10f      	bne.n	800074a <__aeabi_dmul+0x1c2>
 800072a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800072e:	0040      	lsls	r0, r0, #1
 8000730:	eb41 0101 	adc.w	r1, r1, r1
 8000734:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3c01      	subeq	r4, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1a6>
 800073e:	ea41 0106 	orr.w	r1, r1, r6
 8000742:	f095 0f00 	teq	r5, #0
 8000746:	bf18      	it	ne
 8000748:	4770      	bxne	lr
 800074a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800074e:	0052      	lsls	r2, r2, #1
 8000750:	eb43 0303 	adc.w	r3, r3, r3
 8000754:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3d01      	subeq	r5, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1c6>
 800075e:	ea43 0306 	orr.w	r3, r3, r6
 8000762:	4770      	bx	lr
 8000764:	ea94 0f0c 	teq	r4, ip
 8000768:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800076c:	bf18      	it	ne
 800076e:	ea95 0f0c 	teqne	r5, ip
 8000772:	d00c      	beq.n	800078e <__aeabi_dmul+0x206>
 8000774:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000778:	bf18      	it	ne
 800077a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077e:	d1d1      	bne.n	8000724 <__aeabi_dmul+0x19c>
 8000780:	ea81 0103 	eor.w	r1, r1, r3
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	bd70      	pop	{r4, r5, r6, pc}
 800078e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000792:	bf06      	itte	eq
 8000794:	4610      	moveq	r0, r2
 8000796:	4619      	moveq	r1, r3
 8000798:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079c:	d019      	beq.n	80007d2 <__aeabi_dmul+0x24a>
 800079e:	ea94 0f0c 	teq	r4, ip
 80007a2:	d102      	bne.n	80007aa <__aeabi_dmul+0x222>
 80007a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a8:	d113      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007aa:	ea95 0f0c 	teq	r5, ip
 80007ae:	d105      	bne.n	80007bc <__aeabi_dmul+0x234>
 80007b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007b4:	bf1c      	itt	ne
 80007b6:	4610      	movne	r0, r2
 80007b8:	4619      	movne	r1, r3
 80007ba:	d10a      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007bc:	ea81 0103 	eor.w	r1, r1, r3
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	bd70      	pop	{r4, r5, r6, pc}
 80007d2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007da:	bd70      	pop	{r4, r5, r6, pc}

080007dc <__aeabi_ddiv>:
 80007dc:	b570      	push	{r4, r5, r6, lr}
 80007de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ea:	bf1d      	ittte	ne
 80007ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f0:	ea94 0f0c 	teqne	r4, ip
 80007f4:	ea95 0f0c 	teqne	r5, ip
 80007f8:	f000 f8a7 	bleq	800094a <__aeabi_ddiv+0x16e>
 80007fc:	eba4 0405 	sub.w	r4, r4, r5
 8000800:	ea81 0e03 	eor.w	lr, r1, r3
 8000804:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000808:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800080c:	f000 8088 	beq.w	8000920 <__aeabi_ddiv+0x144>
 8000810:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000814:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000818:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800081c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000820:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000824:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000828:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800082c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000830:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000834:	429d      	cmp	r5, r3
 8000836:	bf08      	it	eq
 8000838:	4296      	cmpeq	r6, r2
 800083a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800083e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000842:	d202      	bcs.n	800084a <__aeabi_ddiv+0x6e>
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	1ab6      	subs	r6, r6, r2
 800084c:	eb65 0503 	sbc.w	r5, r5, r3
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800085a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008bc:	d018      	beq.n	80008f0 <__aeabi_ddiv+0x114>
 80008be:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008da:	d1c0      	bne.n	800085e <__aeabi_ddiv+0x82>
 80008dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e0:	d10b      	bne.n	80008fa <__aeabi_ddiv+0x11e>
 80008e2:	ea41 0100 	orr.w	r1, r1, r0
 80008e6:	f04f 0000 	mov.w	r0, #0
 80008ea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ee:	e7b6      	b.n	800085e <__aeabi_ddiv+0x82>
 80008f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f4:	bf04      	itt	eq
 80008f6:	4301      	orreq	r1, r0
 80008f8:	2000      	moveq	r0, #0
 80008fa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008fe:	bf88      	it	hi
 8000900:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000904:	f63f aeaf 	bhi.w	8000666 <__aeabi_dmul+0xde>
 8000908:	ebb5 0c03 	subs.w	ip, r5, r3
 800090c:	bf04      	itt	eq
 800090e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000912:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000916:	f150 0000 	adcs.w	r0, r0, #0
 800091a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800091e:	bd70      	pop	{r4, r5, r6, pc}
 8000920:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000924:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000928:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800092c:	bfc2      	ittt	gt
 800092e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000932:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000936:	bd70      	popgt	{r4, r5, r6, pc}
 8000938:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800093c:	f04f 0e00 	mov.w	lr, #0
 8000940:	3c01      	subs	r4, #1
 8000942:	e690      	b.n	8000666 <__aeabi_dmul+0xde>
 8000944:	ea45 0e06 	orr.w	lr, r5, r6
 8000948:	e68d      	b.n	8000666 <__aeabi_dmul+0xde>
 800094a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800094e:	ea94 0f0c 	teq	r4, ip
 8000952:	bf08      	it	eq
 8000954:	ea95 0f0c 	teqeq	r5, ip
 8000958:	f43f af3b 	beq.w	80007d2 <__aeabi_dmul+0x24a>
 800095c:	ea94 0f0c 	teq	r4, ip
 8000960:	d10a      	bne.n	8000978 <__aeabi_ddiv+0x19c>
 8000962:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000966:	f47f af34 	bne.w	80007d2 <__aeabi_dmul+0x24a>
 800096a:	ea95 0f0c 	teq	r5, ip
 800096e:	f47f af25 	bne.w	80007bc <__aeabi_dmul+0x234>
 8000972:	4610      	mov	r0, r2
 8000974:	4619      	mov	r1, r3
 8000976:	e72c      	b.n	80007d2 <__aeabi_dmul+0x24a>
 8000978:	ea95 0f0c 	teq	r5, ip
 800097c:	d106      	bne.n	800098c <__aeabi_ddiv+0x1b0>
 800097e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000982:	f43f aefd 	beq.w	8000780 <__aeabi_dmul+0x1f8>
 8000986:	4610      	mov	r0, r2
 8000988:	4619      	mov	r1, r3
 800098a:	e722      	b.n	80007d2 <__aeabi_dmul+0x24a>
 800098c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000996:	f47f aec5 	bne.w	8000724 <__aeabi_dmul+0x19c>
 800099a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800099e:	f47f af0d 	bne.w	80007bc <__aeabi_dmul+0x234>
 80009a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009a6:	f47f aeeb 	bne.w	8000780 <__aeabi_dmul+0x1f8>
 80009aa:	e712      	b.n	80007d2 <__aeabi_dmul+0x24a>

080009ac <__gedf2>:
 80009ac:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009b0:	e006      	b.n	80009c0 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__ledf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	e002      	b.n	80009c0 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__cmpdf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009d6:	d01b      	beq.n	8000a10 <__cmpdf2+0x54>
 80009d8:	b001      	add	sp, #4
 80009da:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009de:	bf0c      	ite	eq
 80009e0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009e4:	ea91 0f03 	teqne	r1, r3
 80009e8:	bf02      	ittt	eq
 80009ea:	ea90 0f02 	teqeq	r0, r2
 80009ee:	2000      	moveq	r0, #0
 80009f0:	4770      	bxeq	lr
 80009f2:	f110 0f00 	cmn.w	r0, #0
 80009f6:	ea91 0f03 	teq	r1, r3
 80009fa:	bf58      	it	pl
 80009fc:	4299      	cmppl	r1, r3
 80009fe:	bf08      	it	eq
 8000a00:	4290      	cmpeq	r0, r2
 8000a02:	bf2c      	ite	cs
 8000a04:	17d8      	asrcs	r0, r3, #31
 8000a06:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a0a:	f040 0001 	orr.w	r0, r0, #1
 8000a0e:	4770      	bx	lr
 8000a10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a18:	d102      	bne.n	8000a20 <__cmpdf2+0x64>
 8000a1a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1e:	d107      	bne.n	8000a30 <__cmpdf2+0x74>
 8000a20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d1d6      	bne.n	80009d8 <__cmpdf2+0x1c>
 8000a2a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2e:	d0d3      	beq.n	80009d8 <__cmpdf2+0x1c>
 8000a30:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop

08000a38 <__aeabi_cdrcmple>:
 8000a38:	4684      	mov	ip, r0
 8000a3a:	4610      	mov	r0, r2
 8000a3c:	4662      	mov	r2, ip
 8000a3e:	468c      	mov	ip, r1
 8000a40:	4619      	mov	r1, r3
 8000a42:	4663      	mov	r3, ip
 8000a44:	e000      	b.n	8000a48 <__aeabi_cdcmpeq>
 8000a46:	bf00      	nop

08000a48 <__aeabi_cdcmpeq>:
 8000a48:	b501      	push	{r0, lr}
 8000a4a:	f7ff ffb7 	bl	80009bc <__cmpdf2>
 8000a4e:	2800      	cmp	r0, #0
 8000a50:	bf48      	it	mi
 8000a52:	f110 0f00 	cmnmi.w	r0, #0
 8000a56:	bd01      	pop	{r0, pc}

08000a58 <__aeabi_dcmpeq>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff fff4 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a60:	bf0c      	ite	eq
 8000a62:	2001      	moveq	r0, #1
 8000a64:	2000      	movne	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmplt>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffea 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a74:	bf34      	ite	cc
 8000a76:	2001      	movcc	r0, #1
 8000a78:	2000      	movcs	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmple>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffe0 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a88:	bf94      	ite	ls
 8000a8a:	2001      	movls	r0, #1
 8000a8c:	2000      	movhi	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmpge>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffce 	bl	8000a38 <__aeabi_cdrcmple>
 8000a9c:	bf94      	ite	ls
 8000a9e:	2001      	movls	r0, #1
 8000aa0:	2000      	movhi	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmpgt>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffc4 	bl	8000a38 <__aeabi_cdrcmple>
 8000ab0:	bf34      	ite	cc
 8000ab2:	2001      	movcc	r0, #1
 8000ab4:	2000      	movcs	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_d2iz>:
 8000abc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac4:	d215      	bcs.n	8000af2 <__aeabi_d2iz+0x36>
 8000ac6:	d511      	bpl.n	8000aec <__aeabi_d2iz+0x30>
 8000ac8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000acc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad0:	d912      	bls.n	8000af8 <__aeabi_d2iz+0x3c>
 8000ad2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ada:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ade:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ae2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ae6:	bf18      	it	ne
 8000ae8:	4240      	negne	r0, r0
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d105      	bne.n	8000b04 <__aeabi_d2iz+0x48>
 8000af8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000afc:	bf08      	it	eq
 8000afe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b02:	4770      	bx	lr
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <__aeabi_ldivmod>:
 8000b0c:	b97b      	cbnz	r3, 8000b2e <__aeabi_ldivmod+0x22>
 8000b0e:	b972      	cbnz	r2, 8000b2e <__aeabi_ldivmod+0x22>
 8000b10:	2900      	cmp	r1, #0
 8000b12:	bfbe      	ittt	lt
 8000b14:	2000      	movlt	r0, #0
 8000b16:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000b1a:	e006      	blt.n	8000b2a <__aeabi_ldivmod+0x1e>
 8000b1c:	bf08      	it	eq
 8000b1e:	2800      	cmpeq	r0, #0
 8000b20:	bf1c      	itt	ne
 8000b22:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000b26:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b2a:	f000 b9f9 	b.w	8000f20 <__aeabi_idiv0>
 8000b2e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b32:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b36:	2900      	cmp	r1, #0
 8000b38:	db09      	blt.n	8000b4e <__aeabi_ldivmod+0x42>
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	db1a      	blt.n	8000b74 <__aeabi_ldivmod+0x68>
 8000b3e:	f000 f885 	bl	8000c4c <__udivmoddi4>
 8000b42:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b46:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b4a:	b004      	add	sp, #16
 8000b4c:	4770      	bx	lr
 8000b4e:	4240      	negs	r0, r0
 8000b50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	db1b      	blt.n	8000b90 <__aeabi_ldivmod+0x84>
 8000b58:	f000 f878 	bl	8000c4c <__udivmoddi4>
 8000b5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b64:	b004      	add	sp, #16
 8000b66:	4240      	negs	r0, r0
 8000b68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b6c:	4252      	negs	r2, r2
 8000b6e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b72:	4770      	bx	lr
 8000b74:	4252      	negs	r2, r2
 8000b76:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b7a:	f000 f867 	bl	8000c4c <__udivmoddi4>
 8000b7e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b86:	b004      	add	sp, #16
 8000b88:	4240      	negs	r0, r0
 8000b8a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b8e:	4770      	bx	lr
 8000b90:	4252      	negs	r2, r2
 8000b92:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b96:	f000 f859 	bl	8000c4c <__udivmoddi4>
 8000b9a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba2:	b004      	add	sp, #16
 8000ba4:	4252      	negs	r2, r2
 8000ba6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000baa:	4770      	bx	lr

08000bac <__aeabi_uldivmod>:
 8000bac:	b953      	cbnz	r3, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bae:	b94a      	cbnz	r2, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bb0:	2900      	cmp	r1, #0
 8000bb2:	bf08      	it	eq
 8000bb4:	2800      	cmpeq	r0, #0
 8000bb6:	bf1c      	itt	ne
 8000bb8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bbc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bc0:	f000 b9ae 	b.w	8000f20 <__aeabi_idiv0>
 8000bc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bcc:	f000 f83e 	bl	8000c4c <__udivmoddi4>
 8000bd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd8:	b004      	add	sp, #16
 8000bda:	4770      	bx	lr

08000bdc <__aeabi_d2lz>:
 8000bdc:	b538      	push	{r3, r4, r5, lr}
 8000bde:	4605      	mov	r5, r0
 8000be0:	460c      	mov	r4, r1
 8000be2:	2200      	movs	r2, #0
 8000be4:	2300      	movs	r3, #0
 8000be6:	4628      	mov	r0, r5
 8000be8:	4621      	mov	r1, r4
 8000bea:	f7ff ff3f 	bl	8000a6c <__aeabi_dcmplt>
 8000bee:	b928      	cbnz	r0, 8000bfc <__aeabi_d2lz+0x20>
 8000bf0:	4628      	mov	r0, r5
 8000bf2:	4621      	mov	r1, r4
 8000bf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000bf8:	f000 b80a 	b.w	8000c10 <__aeabi_d2ulz>
 8000bfc:	4628      	mov	r0, r5
 8000bfe:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000c02:	f000 f805 	bl	8000c10 <__aeabi_d2ulz>
 8000c06:	4240      	negs	r0, r0
 8000c08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c0c:	bd38      	pop	{r3, r4, r5, pc}
 8000c0e:	bf00      	nop

08000c10 <__aeabi_d2ulz>:
 8000c10:	b5d0      	push	{r4, r6, r7, lr}
 8000c12:	2200      	movs	r2, #0
 8000c14:	4b0b      	ldr	r3, [pc, #44]	; (8000c44 <__aeabi_d2ulz+0x34>)
 8000c16:	4606      	mov	r6, r0
 8000c18:	460f      	mov	r7, r1
 8000c1a:	f7ff fcb5 	bl	8000588 <__aeabi_dmul>
 8000c1e:	f000 f981 	bl	8000f24 <__aeabi_d2uiz>
 8000c22:	4604      	mov	r4, r0
 8000c24:	f7ff fc36 	bl	8000494 <__aeabi_ui2d>
 8000c28:	2200      	movs	r2, #0
 8000c2a:	4b07      	ldr	r3, [pc, #28]	; (8000c48 <__aeabi_d2ulz+0x38>)
 8000c2c:	f7ff fcac 	bl	8000588 <__aeabi_dmul>
 8000c30:	4602      	mov	r2, r0
 8000c32:	460b      	mov	r3, r1
 8000c34:	4630      	mov	r0, r6
 8000c36:	4639      	mov	r1, r7
 8000c38:	f7ff faee 	bl	8000218 <__aeabi_dsub>
 8000c3c:	f000 f972 	bl	8000f24 <__aeabi_d2uiz>
 8000c40:	4621      	mov	r1, r4
 8000c42:	bdd0      	pop	{r4, r6, r7, pc}
 8000c44:	3df00000 	.word	0x3df00000
 8000c48:	41f00000 	.word	0x41f00000

08000c4c <__udivmoddi4>:
 8000c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c50:	9e08      	ldr	r6, [sp, #32]
 8000c52:	460d      	mov	r5, r1
 8000c54:	4604      	mov	r4, r0
 8000c56:	4688      	mov	r8, r1
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d14d      	bne.n	8000cf8 <__udivmoddi4+0xac>
 8000c5c:	428a      	cmp	r2, r1
 8000c5e:	4694      	mov	ip, r2
 8000c60:	d968      	bls.n	8000d34 <__udivmoddi4+0xe8>
 8000c62:	fab2 f282 	clz	r2, r2
 8000c66:	b152      	cbz	r2, 8000c7e <__udivmoddi4+0x32>
 8000c68:	fa01 f302 	lsl.w	r3, r1, r2
 8000c6c:	f1c2 0120 	rsb	r1, r2, #32
 8000c70:	fa20 f101 	lsr.w	r1, r0, r1
 8000c74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c78:	ea41 0803 	orr.w	r8, r1, r3
 8000c7c:	4094      	lsls	r4, r2
 8000c7e:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000c82:	fbb8 f7f1 	udiv	r7, r8, r1
 8000c86:	fa1f fe8c 	uxth.w	lr, ip
 8000c8a:	fb01 8817 	mls	r8, r1, r7, r8
 8000c8e:	fb07 f00e 	mul.w	r0, r7, lr
 8000c92:	0c23      	lsrs	r3, r4, #16
 8000c94:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c98:	4298      	cmp	r0, r3
 8000c9a:	d90a      	bls.n	8000cb2 <__udivmoddi4+0x66>
 8000c9c:	eb1c 0303 	adds.w	r3, ip, r3
 8000ca0:	f107 35ff 	add.w	r5, r7, #4294967295	; 0xffffffff
 8000ca4:	f080 811e 	bcs.w	8000ee4 <__udivmoddi4+0x298>
 8000ca8:	4298      	cmp	r0, r3
 8000caa:	f240 811b 	bls.w	8000ee4 <__udivmoddi4+0x298>
 8000cae:	3f02      	subs	r7, #2
 8000cb0:	4463      	add	r3, ip
 8000cb2:	1a1b      	subs	r3, r3, r0
 8000cb4:	fbb3 f0f1 	udiv	r0, r3, r1
 8000cb8:	fb01 3310 	mls	r3, r1, r0, r3
 8000cbc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cc0:	b2a4      	uxth	r4, r4
 8000cc2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cc6:	45a6      	cmp	lr, r4
 8000cc8:	d90a      	bls.n	8000ce0 <__udivmoddi4+0x94>
 8000cca:	eb1c 0404 	adds.w	r4, ip, r4
 8000cce:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cd2:	f080 8109 	bcs.w	8000ee8 <__udivmoddi4+0x29c>
 8000cd6:	45a6      	cmp	lr, r4
 8000cd8:	f240 8106 	bls.w	8000ee8 <__udivmoddi4+0x29c>
 8000cdc:	4464      	add	r4, ip
 8000cde:	3802      	subs	r0, #2
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	eba4 040e 	sub.w	r4, r4, lr
 8000ce6:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000cea:	b11e      	cbz	r6, 8000cf4 <__udivmoddi4+0xa8>
 8000cec:	2300      	movs	r3, #0
 8000cee:	40d4      	lsrs	r4, r2
 8000cf0:	e9c6 4300 	strd	r4, r3, [r6]
 8000cf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	d908      	bls.n	8000d0e <__udivmoddi4+0xc2>
 8000cfc:	2e00      	cmp	r6, #0
 8000cfe:	f000 80ee 	beq.w	8000ede <__udivmoddi4+0x292>
 8000d02:	2100      	movs	r1, #0
 8000d04:	e9c6 0500 	strd	r0, r5, [r6]
 8000d08:	4608      	mov	r0, r1
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	fab3 f183 	clz	r1, r3
 8000d12:	2900      	cmp	r1, #0
 8000d14:	d14a      	bne.n	8000dac <__udivmoddi4+0x160>
 8000d16:	42ab      	cmp	r3, r5
 8000d18:	d302      	bcc.n	8000d20 <__udivmoddi4+0xd4>
 8000d1a:	4282      	cmp	r2, r0
 8000d1c:	f200 80fc 	bhi.w	8000f18 <__udivmoddi4+0x2cc>
 8000d20:	1a84      	subs	r4, r0, r2
 8000d22:	eb65 0303 	sbc.w	r3, r5, r3
 8000d26:	2001      	movs	r0, #1
 8000d28:	4698      	mov	r8, r3
 8000d2a:	2e00      	cmp	r6, #0
 8000d2c:	d0e2      	beq.n	8000cf4 <__udivmoddi4+0xa8>
 8000d2e:	e9c6 4800 	strd	r4, r8, [r6]
 8000d32:	e7df      	b.n	8000cf4 <__udivmoddi4+0xa8>
 8000d34:	b902      	cbnz	r2, 8000d38 <__udivmoddi4+0xec>
 8000d36:	deff      	udf	#255	; 0xff
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	2a00      	cmp	r2, #0
 8000d3e:	f040 8091 	bne.w	8000e64 <__udivmoddi4+0x218>
 8000d42:	eba1 000c 	sub.w	r0, r1, ip
 8000d46:	2101      	movs	r1, #1
 8000d48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d4c:	fa1f fe8c 	uxth.w	lr, ip
 8000d50:	fbb0 f3f7 	udiv	r3, r0, r7
 8000d54:	fb07 0013 	mls	r0, r7, r3, r0
 8000d58:	0c25      	lsrs	r5, r4, #16
 8000d5a:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000d5e:	fb0e f003 	mul.w	r0, lr, r3
 8000d62:	42a8      	cmp	r0, r5
 8000d64:	d908      	bls.n	8000d78 <__udivmoddi4+0x12c>
 8000d66:	eb1c 0505 	adds.w	r5, ip, r5
 8000d6a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d6e:	d202      	bcs.n	8000d76 <__udivmoddi4+0x12a>
 8000d70:	42a8      	cmp	r0, r5
 8000d72:	f200 80ce 	bhi.w	8000f12 <__udivmoddi4+0x2c6>
 8000d76:	4643      	mov	r3, r8
 8000d78:	1a2d      	subs	r5, r5, r0
 8000d7a:	fbb5 f0f7 	udiv	r0, r5, r7
 8000d7e:	fb07 5510 	mls	r5, r7, r0, r5
 8000d82:	fb0e fe00 	mul.w	lr, lr, r0
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d8c:	45a6      	cmp	lr, r4
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x156>
 8000d90:	eb1c 0404 	adds.w	r4, ip, r4
 8000d94:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000d98:	d202      	bcs.n	8000da0 <__udivmoddi4+0x154>
 8000d9a:	45a6      	cmp	lr, r4
 8000d9c:	f200 80b6 	bhi.w	8000f0c <__udivmoddi4+0x2c0>
 8000da0:	4628      	mov	r0, r5
 8000da2:	eba4 040e 	sub.w	r4, r4, lr
 8000da6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000daa:	e79e      	b.n	8000cea <__udivmoddi4+0x9e>
 8000dac:	f1c1 0720 	rsb	r7, r1, #32
 8000db0:	408b      	lsls	r3, r1
 8000db2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000db6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dba:	fa25 fa07 	lsr.w	sl, r5, r7
 8000dbe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dc2:	fbba f8f9 	udiv	r8, sl, r9
 8000dc6:	fa20 f307 	lsr.w	r3, r0, r7
 8000dca:	fb09 aa18 	mls	sl, r9, r8, sl
 8000dce:	408d      	lsls	r5, r1
 8000dd0:	fa1f fe8c 	uxth.w	lr, ip
 8000dd4:	431d      	orrs	r5, r3
 8000dd6:	fa00 f301 	lsl.w	r3, r0, r1
 8000dda:	fb08 f00e 	mul.w	r0, r8, lr
 8000dde:	0c2c      	lsrs	r4, r5, #16
 8000de0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000de4:	42a0      	cmp	r0, r4
 8000de6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dea:	d90b      	bls.n	8000e04 <__udivmoddi4+0x1b8>
 8000dec:	eb1c 0404 	adds.w	r4, ip, r4
 8000df0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000df4:	f080 8088 	bcs.w	8000f08 <__udivmoddi4+0x2bc>
 8000df8:	42a0      	cmp	r0, r4
 8000dfa:	f240 8085 	bls.w	8000f08 <__udivmoddi4+0x2bc>
 8000dfe:	f1a8 0802 	sub.w	r8, r8, #2
 8000e02:	4464      	add	r4, ip
 8000e04:	1a24      	subs	r4, r4, r0
 8000e06:	fbb4 f0f9 	udiv	r0, r4, r9
 8000e0a:	fb09 4410 	mls	r4, r9, r0, r4
 8000e0e:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e12:	b2ad      	uxth	r5, r5
 8000e14:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e18:	45a6      	cmp	lr, r4
 8000e1a:	d908      	bls.n	8000e2e <__udivmoddi4+0x1e2>
 8000e1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e20:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000e24:	d26c      	bcs.n	8000f00 <__udivmoddi4+0x2b4>
 8000e26:	45a6      	cmp	lr, r4
 8000e28:	d96a      	bls.n	8000f00 <__udivmoddi4+0x2b4>
 8000e2a:	3802      	subs	r0, #2
 8000e2c:	4464      	add	r4, ip
 8000e2e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e32:	fba0 9502 	umull	r9, r5, r0, r2
 8000e36:	eba4 040e 	sub.w	r4, r4, lr
 8000e3a:	42ac      	cmp	r4, r5
 8000e3c:	46c8      	mov	r8, r9
 8000e3e:	46ae      	mov	lr, r5
 8000e40:	d356      	bcc.n	8000ef0 <__udivmoddi4+0x2a4>
 8000e42:	d053      	beq.n	8000eec <__udivmoddi4+0x2a0>
 8000e44:	2e00      	cmp	r6, #0
 8000e46:	d069      	beq.n	8000f1c <__udivmoddi4+0x2d0>
 8000e48:	ebb3 0208 	subs.w	r2, r3, r8
 8000e4c:	eb64 040e 	sbc.w	r4, r4, lr
 8000e50:	fa22 f301 	lsr.w	r3, r2, r1
 8000e54:	fa04 f707 	lsl.w	r7, r4, r7
 8000e58:	431f      	orrs	r7, r3
 8000e5a:	40cc      	lsrs	r4, r1
 8000e5c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e60:	2100      	movs	r1, #0
 8000e62:	e747      	b.n	8000cf4 <__udivmoddi4+0xa8>
 8000e64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e68:	f1c2 0120 	rsb	r1, r2, #32
 8000e6c:	fa25 f301 	lsr.w	r3, r5, r1
 8000e70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e74:	fa20 f101 	lsr.w	r1, r0, r1
 8000e78:	4095      	lsls	r5, r2
 8000e7a:	430d      	orrs	r5, r1
 8000e7c:	fbb3 f1f7 	udiv	r1, r3, r7
 8000e80:	fb07 3311 	mls	r3, r7, r1, r3
 8000e84:	fa1f fe8c 	uxth.w	lr, ip
 8000e88:	0c28      	lsrs	r0, r5, #16
 8000e8a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e8e:	fb01 f30e 	mul.w	r3, r1, lr
 8000e92:	4283      	cmp	r3, r0
 8000e94:	fa04 f402 	lsl.w	r4, r4, r2
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x260>
 8000e9a:	eb1c 0000 	adds.w	r0, ip, r0
 8000e9e:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 8000ea2:	d22f      	bcs.n	8000f04 <__udivmoddi4+0x2b8>
 8000ea4:	4283      	cmp	r3, r0
 8000ea6:	d92d      	bls.n	8000f04 <__udivmoddi4+0x2b8>
 8000ea8:	3902      	subs	r1, #2
 8000eaa:	4460      	add	r0, ip
 8000eac:	1ac0      	subs	r0, r0, r3
 8000eae:	fbb0 f3f7 	udiv	r3, r0, r7
 8000eb2:	fb07 0013 	mls	r0, r7, r3, r0
 8000eb6:	b2ad      	uxth	r5, r5
 8000eb8:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000ebc:	fb03 f00e 	mul.w	r0, r3, lr
 8000ec0:	42a8      	cmp	r0, r5
 8000ec2:	d908      	bls.n	8000ed6 <__udivmoddi4+0x28a>
 8000ec4:	eb1c 0505 	adds.w	r5, ip, r5
 8000ec8:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000ecc:	d216      	bcs.n	8000efc <__udivmoddi4+0x2b0>
 8000ece:	42a8      	cmp	r0, r5
 8000ed0:	d914      	bls.n	8000efc <__udivmoddi4+0x2b0>
 8000ed2:	3b02      	subs	r3, #2
 8000ed4:	4465      	add	r5, ip
 8000ed6:	1a28      	subs	r0, r5, r0
 8000ed8:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000edc:	e738      	b.n	8000d50 <__udivmoddi4+0x104>
 8000ede:	4631      	mov	r1, r6
 8000ee0:	4630      	mov	r0, r6
 8000ee2:	e707      	b.n	8000cf4 <__udivmoddi4+0xa8>
 8000ee4:	462f      	mov	r7, r5
 8000ee6:	e6e4      	b.n	8000cb2 <__udivmoddi4+0x66>
 8000ee8:	4618      	mov	r0, r3
 8000eea:	e6f9      	b.n	8000ce0 <__udivmoddi4+0x94>
 8000eec:	454b      	cmp	r3, r9
 8000eee:	d2a9      	bcs.n	8000e44 <__udivmoddi4+0x1f8>
 8000ef0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ef4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ef8:	3801      	subs	r0, #1
 8000efa:	e7a3      	b.n	8000e44 <__udivmoddi4+0x1f8>
 8000efc:	4643      	mov	r3, r8
 8000efe:	e7ea      	b.n	8000ed6 <__udivmoddi4+0x28a>
 8000f00:	4628      	mov	r0, r5
 8000f02:	e794      	b.n	8000e2e <__udivmoddi4+0x1e2>
 8000f04:	4641      	mov	r1, r8
 8000f06:	e7d1      	b.n	8000eac <__udivmoddi4+0x260>
 8000f08:	46d0      	mov	r8, sl
 8000f0a:	e77b      	b.n	8000e04 <__udivmoddi4+0x1b8>
 8000f0c:	4464      	add	r4, ip
 8000f0e:	3802      	subs	r0, #2
 8000f10:	e747      	b.n	8000da2 <__udivmoddi4+0x156>
 8000f12:	3b02      	subs	r3, #2
 8000f14:	4465      	add	r5, ip
 8000f16:	e72f      	b.n	8000d78 <__udivmoddi4+0x12c>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e706      	b.n	8000d2a <__udivmoddi4+0xde>
 8000f1c:	4631      	mov	r1, r6
 8000f1e:	e6e9      	b.n	8000cf4 <__udivmoddi4+0xa8>

08000f20 <__aeabi_idiv0>:
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop

08000f24 <__aeabi_d2uiz>:
 8000f24:	004a      	lsls	r2, r1, #1
 8000f26:	d211      	bcs.n	8000f4c <__aeabi_d2uiz+0x28>
 8000f28:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000f2c:	d211      	bcs.n	8000f52 <__aeabi_d2uiz+0x2e>
 8000f2e:	d50d      	bpl.n	8000f4c <__aeabi_d2uiz+0x28>
 8000f30:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000f34:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000f38:	d40e      	bmi.n	8000f58 <__aeabi_d2uiz+0x34>
 8000f3a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000f3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f42:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000f46:	fa23 f002 	lsr.w	r0, r3, r2
 8000f4a:	4770      	bx	lr
 8000f4c:	f04f 0000 	mov.w	r0, #0
 8000f50:	4770      	bx	lr
 8000f52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000f56:	d102      	bne.n	8000f5e <__aeabi_d2uiz+0x3a>
 8000f58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f5c:	4770      	bx	lr
 8000f5e:	f04f 0000 	mov.w	r0, #0
 8000f62:	4770      	bx	lr

08000f64 <GPIO_LED_Init>:
#include "bsp_led.h"



void GPIO_LED_Init(void)
{
 8000f64:	b570      	push	{r4, r5, r6, lr}

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f66:	2400      	movs	r4, #0
{
 8000f68:	b086      	sub	sp, #24
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6a:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8000f6e:	e9cd 4404 	strd	r4, r4, [sp, #16]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000f72:	4b14      	ldr	r3, [pc, #80]	; (8000fc4 <GPIO_LED_Init+0x60>)
	__HAL_RCC_GPIOC_CLK_ENABLE();
	/*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000f74:	4d14      	ldr	r5, [pc, #80]	; (8000fc8 <GPIO_LED_Init+0x64>)
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000f76:	699a      	ldr	r2, [r3, #24]
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000f78:	4628      	mov	r0, r5
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000f7a:	f042 0220 	orr.w	r2, r2, #32
 8000f7e:	619a      	str	r2, [r3, #24]
 8000f80:	699a      	ldr	r2, [r3, #24]
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000f82:	f44f 7140 	mov.w	r1, #768	; 0x300
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000f86:	f002 0220 	and.w	r2, r2, #32
 8000f8a:	9200      	str	r2, [sp, #0]
 8000f8c:	9a00      	ldr	r2, [sp, #0]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000f8e:	699a      	ldr	r2, [r3, #24]
	/*Configure GPIO pins : PC8 PC9 */
	  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f90:	f44f 7640 	mov.w	r6, #768	; 0x300
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000f94:	f042 0210 	orr.w	r2, r2, #16
 8000f98:	619a      	str	r2, [r3, #24]
 8000f9a:	699b      	ldr	r3, [r3, #24]
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000f9c:	4622      	mov	r2, r4
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000f9e:	f003 0310 	and.w	r3, r3, #16
 8000fa2:	9301      	str	r3, [sp, #4]
 8000fa4:	9b01      	ldr	r3, [sp, #4]
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000fa6:	f001 fe3b 	bl	8002c20 <HAL_GPIO_WritePin>
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000faa:	2201      	movs	r2, #1
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fac:	2302      	movs	r3, #2
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fae:	4628      	mov	r0, r5
 8000fb0:	a902      	add	r1, sp, #8
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb2:	e9cd 6202 	strd	r6, r2, [sp, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	9404      	str	r4, [sp, #16]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb8:	9305      	str	r3, [sp, #20]
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fba:	f001 fd23 	bl	8002a04 <HAL_GPIO_Init>
}
 8000fbe:	b006      	add	sp, #24
 8000fc0:	bd70      	pop	{r4, r5, r6, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40021000 	.word	0x40021000
 8000fc8:	40011000 	.word	0x40011000

08000fcc <USER_LED1_On>:

void USER_LED1_On()
{
#ifdef QEMU_DEBUG
	qemu_printf("[LED1] ON\r\n");
 8000fcc:	4801      	ldr	r0, [pc, #4]	; (8000fd4 <USER_LED1_On+0x8>)
 8000fce:	f000 b8d3 	b.w	8001178 <rt_kprintf>
 8000fd2:	bf00      	nop
 8000fd4:	08003cf0 	.word	0x08003cf0

08000fd8 <USER_LED1_Toggle>:
#endif
}
void USER_LED1_Toggle()
{
#ifdef QEMU_DEBUG
		qemu_printf("[LED1] TOGGLE\r\n");
 8000fd8:	4801      	ldr	r0, [pc, #4]	; (8000fe0 <USER_LED1_Toggle+0x8>)
 8000fda:	f000 b8cd 	b.w	8001178 <rt_kprintf>
 8000fde:	bf00      	nop
 8000fe0:	08003cfc 	.word	0x08003cfc

08000fe4 <USER_LED2_On>:
#endif
}
void USER_LED2_On()
{
#ifdef QEMU_DEBUG
	qemu_printf("[LED2] ON\r\n");
 8000fe4:	4801      	ldr	r0, [pc, #4]	; (8000fec <USER_LED2_On+0x8>)
 8000fe6:	f000 b8c7 	b.w	8001178 <rt_kprintf>
 8000fea:	bf00      	nop
 8000fec:	08003d0c 	.word	0x08003d0c

08000ff0 <USER_LED2_Toggle>:
#endif
}
void USER_LED2_Toggle()
{
#ifdef QEMU_DEBUG
	qemu_printf("[LED2] TOGGLE\r\n");
 8000ff0:	4801      	ldr	r0, [pc, #4]	; (8000ff8 <USER_LED2_Toggle+0x8>)
 8000ff2:	f000 b8c1 	b.w	8001178 <rt_kprintf>
 8000ff6:	bf00      	nop
 8000ff8:	08003d18 	.word	0x08003d18

08000ffc <MX_USART1_UART_Init>:
  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ffc:	2300      	movs	r3, #0
  huart1.Init.BaudRate = 115200;
 8000ffe:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001002:	220c      	movs	r2, #12
{
 8001004:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 8001006:	4809      	ldr	r0, [pc, #36]	; (800102c <MX_USART1_UART_Init+0x30>)
 8001008:	4c09      	ldr	r4, [pc, #36]	; (8001030 <MX_USART1_UART_Init+0x34>)
  huart1.Init.BaudRate = 115200;
 800100a:	e9c0 1301 	strd	r1, r3, [r0, #4]
  huart1.Init.Parity = UART_PARITY_NONE;
 800100e:	e9c0 3303 	strd	r3, r3, [r0, #12]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001012:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart1.Instance = USART1;
 8001016:	6004      	str	r4, [r0, #0]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001018:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800101a:	f002 fb37 	bl	800368c <HAL_UART_Init>
 800101e:	b900      	cbnz	r0, 8001022 <MX_USART1_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001020:	bd10      	pop	{r4, pc}
 8001022:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8001026:	f000 b917 	b.w	8001258 <Error_Handler>
 800102a:	bf00      	nop
 800102c:	20000458 	.word	0x20000458
 8001030:	40013800 	.word	0x40013800

08001034 <MX_USART2_UART_Init>:
  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001034:	2300      	movs	r3, #0
  huart2.Init.BaudRate = 115200;
 8001036:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 800103a:	220c      	movs	r2, #12
{
 800103c:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 800103e:	4809      	ldr	r0, [pc, #36]	; (8001064 <MX_USART2_UART_Init+0x30>)
 8001040:	4c09      	ldr	r4, [pc, #36]	; (8001068 <MX_USART2_UART_Init+0x34>)
  huart2.Init.BaudRate = 115200;
 8001042:	e9c0 1301 	strd	r1, r3, [r0, #4]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001046:	e9c0 3303 	strd	r3, r3, [r0, #12]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800104a:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart2.Instance = USART2;
 800104e:	6004      	str	r4, [r0, #0]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001050:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001052:	f002 fb1b 	bl	800368c <HAL_UART_Init>
 8001056:	b900      	cbnz	r0, 800105a <MX_USART2_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001058:	bd10      	pop	{r4, pc}
 800105a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 800105e:	f000 b8fb 	b.w	8001258 <Error_Handler>
 8001062:	bf00      	nop
 8001064:	200004a0 	.word	0x200004a0
 8001068:	40004400 	.word	0x40004400

0800106c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800106c:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106e:	2400      	movs	r4, #0
  if(uartHandle->Instance==USART1)
 8001070:	4a35      	ldr	r2, [pc, #212]	; (8001148 <HAL_UART_MspInit+0xdc>)
 8001072:	6803      	ldr	r3, [r0, #0]
{
 8001074:	b088      	sub	sp, #32
  if(uartHandle->Instance==USART1)
 8001076:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001078:	e9cd 4404 	strd	r4, r4, [sp, #16]
 800107c:	e9cd 4406 	strd	r4, r4, [sp, #24]
  if(uartHandle->Instance==USART1)
 8001080:	d004      	beq.n	800108c <HAL_UART_MspInit+0x20>
	HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 8001082:	4a32      	ldr	r2, [pc, #200]	; (800114c <HAL_UART_MspInit+0xe0>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d032      	beq.n	80010ee <HAL_UART_MspInit+0x82>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001088:	b008      	add	sp, #32
 800108a:	bd70      	pop	{r4, r5, r6, pc}
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800108c:	2003      	movs	r0, #3
	GPIO_InitStruct.Pin = GPIO_PIN_9;
 800108e:	f44f 7600 	mov.w	r6, #512	; 0x200
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001092:	2502      	movs	r5, #2
	__HAL_RCC_USART1_CLK_ENABLE();
 8001094:	4b2e      	ldr	r3, [pc, #184]	; (8001150 <HAL_UART_MspInit+0xe4>)
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001096:	a904      	add	r1, sp, #16
	__HAL_RCC_USART1_CLK_ENABLE();
 8001098:	699a      	ldr	r2, [r3, #24]
 800109a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800109e:	619a      	str	r2, [r3, #24]
 80010a0:	699a      	ldr	r2, [r3, #24]
 80010a2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80010a6:	9200      	str	r2, [sp, #0]
 80010a8:	9a00      	ldr	r2, [sp, #0]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80010aa:	699a      	ldr	r2, [r3, #24]
 80010ac:	f042 0204 	orr.w	r2, r2, #4
 80010b0:	619a      	str	r2, [r3, #24]
 80010b2:	699b      	ldr	r3, [r3, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010b4:	9007      	str	r0, [sp, #28]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80010b6:	f003 0304 	and.w	r3, r3, #4
 80010ba:	9301      	str	r3, [sp, #4]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010bc:	4825      	ldr	r0, [pc, #148]	; (8001154 <HAL_UART_MspInit+0xe8>)
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80010be:	9b01      	ldr	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c0:	e9cd 6504 	strd	r6, r5, [sp, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c4:	f001 fc9e 	bl	8002a04 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 80010c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010cc:	a904      	add	r1, sp, #16
 80010ce:	4821      	ldr	r0, [pc, #132]	; (8001154 <HAL_UART_MspInit+0xe8>)
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 80010d0:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	e9cd 4405 	strd	r4, r4, [sp, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d6:	f001 fc95 	bl	8002a04 <HAL_GPIO_Init>
	HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80010da:	4622      	mov	r2, r4
 80010dc:	4621      	mov	r1, r4
 80010de:	2025      	movs	r0, #37	; 0x25
 80010e0:	f001 fbd2 	bl	8002888 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 80010e4:	2025      	movs	r0, #37	; 0x25
 80010e6:	f001 fc0d 	bl	8002904 <HAL_NVIC_EnableIRQ>
}
 80010ea:	b008      	add	sp, #32
 80010ec:	bd70      	pop	{r4, r5, r6, pc}
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 80010ee:	2604      	movs	r6, #4
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010f0:	2003      	movs	r0, #3
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f2:	2502      	movs	r5, #2
	__HAL_RCC_USART2_CLK_ENABLE();
 80010f4:	4b16      	ldr	r3, [pc, #88]	; (8001150 <HAL_UART_MspInit+0xe4>)
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f6:	a904      	add	r1, sp, #16
	__HAL_RCC_USART2_CLK_ENABLE();
 80010f8:	69da      	ldr	r2, [r3, #28]
 80010fa:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80010fe:	61da      	str	r2, [r3, #28]
 8001100:	69da      	ldr	r2, [r3, #28]
 8001102:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001106:	9202      	str	r2, [sp, #8]
 8001108:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800110a:	699a      	ldr	r2, [r3, #24]
 800110c:	4332      	orrs	r2, r6
 800110e:	619a      	str	r2, [r3, #24]
 8001110:	699b      	ldr	r3, [r3, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001112:	9007      	str	r0, [sp, #28]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001114:	4033      	ands	r3, r6
 8001116:	9303      	str	r3, [sp, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001118:	480e      	ldr	r0, [pc, #56]	; (8001154 <HAL_UART_MspInit+0xe8>)
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800111a:	9b03      	ldr	r3, [sp, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111c:	e9cd 6504 	strd	r6, r5, [sp, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001120:	f001 fc70 	bl	8002a04 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001124:	2308      	movs	r3, #8
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001126:	a904      	add	r1, sp, #16
 8001128:	480a      	ldr	r0, [pc, #40]	; (8001154 <HAL_UART_MspInit+0xe8>)
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 800112a:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	e9cd 4405 	strd	r4, r4, [sp, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001130:	f001 fc68 	bl	8002a04 <HAL_GPIO_Init>
	HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001134:	4622      	mov	r2, r4
 8001136:	4621      	mov	r1, r4
 8001138:	2026      	movs	r0, #38	; 0x26
 800113a:	f001 fba5 	bl	8002888 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 800113e:	2026      	movs	r0, #38	; 0x26
 8001140:	f001 fbe0 	bl	8002904 <HAL_NVIC_EnableIRQ>
}
 8001144:	b008      	add	sp, #32
 8001146:	bd70      	pop	{r4, r5, r6, pc}
 8001148:	40013800 	.word	0x40013800
 800114c:	40004400 	.word	0x40004400
 8001150:	40021000 	.word	0x40021000
 8001154:	40010800 	.word	0x40010800

08001158 <myputstr>:
	return ch;	
}

void myputstr(const char *str)
{
	while(*str) {
 8001158:	7801      	ldrb	r1, [r0, #0]
 800115a:	b141      	cbz	r1, 800116e <myputstr+0x16>
	while((USART1->SR&0X40)==0);//循环发送,直到发送完毕   
 800115c:	4a04      	ldr	r2, [pc, #16]	; (8001170 <myputstr+0x18>)
 800115e:	6813      	ldr	r3, [r2, #0]
 8001160:	065b      	lsls	r3, r3, #25
 8001162:	d5fc      	bpl.n	800115e <myputstr+0x6>
	USART1->DR = (uint8_t) ch;      
 8001164:	6051      	str	r1, [r2, #4]
	while(*str) {
 8001166:	f810 1f01 	ldrb.w	r1, [r0, #1]!
 800116a:	2900      	cmp	r1, #0
 800116c:	d1f7      	bne.n	800115e <myputstr+0x6>
		//HAL_UART_Transmit(&huart1, (uint8_t *)str, 1, 0xFFFF);
		myputchar(*str);
		str++;
	}

}
 800116e:	4770      	bx	lr
 8001170:	40013800 	.word	0x40013800

08001174 <rt_hw_console_output>:

rt_weak void rt_hw_console_output(const char *str)
{
    /* empty console output */

    myputstr(str);
 8001174:	f7ff bff0 	b.w	8001158 <myputstr>

08001178 <rt_kprintf>:
 * @param fmt is the format parameters.
 *
 * @return The number of characters actually written to buffer.
 */
rt_weak int rt_kprintf(const char *fmt, ...)
{
 8001178:	b40f      	push	{r0, r1, r2, r3}
 800117a:	b530      	push	{r4, r5, lr}
 800117c:	b083      	sub	sp, #12
 800117e:	ab06      	add	r3, sp, #24
    /* the return value of vsnprintf is the number of bytes that would be
     * written to buffer had if the size of the buffer been sufficiently
     * large excluding the terminating null byte. If the output string
     * would be larger than the rt_log_buf, we have to adjust the output
     * length. */
    length = rt_vsnprintf(rt_log_buf, sizeof(rt_log_buf) - 1, fmt, args);
 8001180:	4d0a      	ldr	r5, [pc, #40]	; (80011ac <rt_kprintf+0x34>)
{
 8001182:	f853 2b04 	ldr.w	r2, [r3], #4
    length = rt_vsnprintf(rt_log_buf, sizeof(rt_log_buf) - 1, fmt, args);
 8001186:	217f      	movs	r1, #127	; 0x7f
 8001188:	4628      	mov	r0, r5
    va_start(args, fmt);
 800118a:	9301      	str	r3, [sp, #4]
    length = rt_vsnprintf(rt_log_buf, sizeof(rt_log_buf) - 1, fmt, args);
 800118c:	f000 ffde 	bl	800214c <rt_vsnprintf>
 8001190:	4604      	mov	r4, r0
    if (length > RT_CONSOLEBUF_SIZE - 1)
    {
        length = RT_CONSOLEBUF_SIZE - 1;
    }

    rt_hw_console_output(rt_log_buf);
 8001192:	4628      	mov	r0, r5
 8001194:	f7ff ffee 	bl	8001174 <rt_hw_console_output>

    va_end(args);

    return length;
}
 8001198:	2c7f      	cmp	r4, #127	; 0x7f
 800119a:	4620      	mov	r0, r4
 800119c:	bf28      	it	cs
 800119e:	207f      	movcs	r0, #127	; 0x7f
 80011a0:	b003      	add	sp, #12
 80011a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80011a6:	b004      	add	sp, #16
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	200004e8 	.word	0x200004e8

080011b0 <SystemClock_Config>:
  * @param  None
  * @retval None
  */
  #if 1
void SystemClock_Config(void)
{
 80011b0:	b510      	push	{r4, lr}
 80011b2:	b090      	sub	sp, #64	; 0x40
 RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011b4:	2220      	movs	r2, #32
 80011b6:	2100      	movs	r1, #0
 80011b8:	a807      	add	r0, sp, #28
 80011ba:	f002 fccb 	bl	8003b54 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011be:	2001      	movs	r0, #1
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011c0:	2300      	movs	r3, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011c2:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011c4:	2110      	movs	r1, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80011c6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011ca:	900a      	str	r0, [sp, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011cc:	a806      	add	r0, sp, #24
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011ce:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80011d2:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80011d6:	9301      	str	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011d8:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011da:	910b      	str	r1, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011dc:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80011de:	920f      	str	r2, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011e0:	f001 fd44 	bl	8002c6c <HAL_RCC_OscConfig>
 80011e4:	b108      	cbz	r0, 80011ea <SystemClock_Config+0x3a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011e6:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011e8:	e7fe      	b.n	80011e8 <SystemClock_Config+0x38>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011ea:	4601      	mov	r1, r0
 80011ec:	230f      	movs	r3, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011ee:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011f0:	e9cd 4102 	strd	r4, r1, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011f4:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011f8:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011fa:	f001 ff4f 	bl	800309c <HAL_RCC_ClockConfig>
 80011fe:	b108      	cbz	r0, 8001204 <SystemClock_Config+0x54>
 8001200:	b672      	cpsid	i
  while (1)
 8001202:	e7fe      	b.n	8001202 <SystemClock_Config+0x52>
}
 8001204:	b010      	add	sp, #64	; 0x40
 8001206:	bd10      	pop	{r4, pc}

08001208 <main>:
{
 8001208:	b508      	push	{r3, lr}
  HAL_Init();
 800120a:	f001 fb0d 	bl	8002828 <HAL_Init>
  SystemClock_Config();
 800120e:	f7ff ffcf 	bl	80011b0 <SystemClock_Config>
  GPIO_LED_Init();
 8001212:	f7ff fea7 	bl	8000f64 <GPIO_LED_Init>
  MX_USART1_UART_Init();
 8001216:	f7ff fef1 	bl	8000ffc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800121a:	f7ff ff0b 	bl	8001034 <MX_USART2_UART_Init>
  USER_LED1_On();
 800121e:	f7ff fed5 	bl	8000fcc <USER_LED1_On>
  USER_LED2_On();
 8001222:	f7ff fedf 	bl	8000fe4 <USER_LED2_On>
  rt_kprintf("Hello STM32F100RBT6! \r\n");
 8001226:	480a      	ldr	r0, [pc, #40]	; (8001250 <main+0x48>)
 8001228:	f7ff ffa6 	bl	8001178 <rt_kprintf>
 800122c:	4e09      	ldr	r6, [pc, #36]	; (8001254 <main+0x4c>)
	USER_LED1_Toggle();
 800122e:	f7ff fed3 	bl	8000fd8 <USER_LED1_Toggle>
	USER_LED2_Toggle();
 8001232:	f7ff fedd 	bl	8000ff0 <USER_LED2_Toggle>
    }
}
/* 原来的多延迟了1ms */
void HAL_Delay(uint32_t Delay)
{
  uint32_t tickstart = HAL_GetTick();
 8001236:	f001 fb0f 	bl	8002858 <HAL_GetTick>
 800123a:	4604      	mov	r4, r0
  uint32_t wait = Delay - 1;	//减掉原来多延迟的1ms

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
    wait += (uint32_t)(uwTickFreq);
 800123c:	7835      	ldrb	r5, [r6, #0]
 800123e:	f205 15f3 	addw	r5, r5, #499	; 0x1f3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001242:	f001 fb09 	bl	8002858 <HAL_GetTick>
 8001246:	1b00      	subs	r0, r0, r4
 8001248:	4285      	cmp	r5, r0
 800124a:	d8fa      	bhi.n	8001242 <main+0x3a>
 800124c:	e7ef      	b.n	800122e <main+0x26>
 800124e:	bf00      	nop
 8001250:	08003d28 	.word	0x08003d28
 8001254:	20000000 	.word	0x20000000

08001258 <Error_Handler>:
 8001258:	b672      	cpsid	i
  while (1)
 800125a:	e7fe      	b.n	800125a <Error_Handler+0x2>

0800125c <HAL_TIM_PeriodElapsedCallback>:
    if(htim->Instance == TIM7)
 800125c:	4b03      	ldr	r3, [pc, #12]	; (800126c <HAL_TIM_PeriodElapsedCallback+0x10>)
 800125e:	6802      	ldr	r2, [r0, #0]
 8001260:	429a      	cmp	r2, r3
 8001262:	d000      	beq.n	8001266 <HAL_TIM_PeriodElapsedCallback+0xa>
}
 8001264:	4770      	bx	lr
        HAL_IncTick();   // 可以用来替代 SysTick
 8001266:	f001 baeb 	b.w	8002840 <HAL_IncTick>
 800126a:	bf00      	nop
 800126c:	40001400 	.word	0x40001400

08001270 <out_buffer>:


// internal buffer output
static inline void out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
  if (idx < maxlen) {
 8001270:	429a      	cmp	r2, r3
    ((char*)buffer)[idx] = character;
 8001272:	bf38      	it	cc
 8001274:	5488      	strbcc	r0, [r1, r2]
  }
}
 8001276:	4770      	bx	lr

08001278 <out_discard>:

// internal null output
static inline void out_discard(char character, void* buffer, size_t idx, size_t maxlen)
{
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop

0800127c <out_rev_>:
}


// output the specified string in reverse, taking care of any zero-padding
static size_t out_rev_(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 800127c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001280:	469a      	mov	sl, r3
  const size_t start_idx = idx;

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8001282:	9b0d      	ldr	r3, [sp, #52]	; 0x34
{
 8001284:	4617      	mov	r7, r2
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8001286:	079a      	lsls	r2, r3, #30
{
 8001288:	4606      	mov	r6, r0
 800128a:	468b      	mov	fp, r1
 800128c:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8001290:	d111      	bne.n	80012b6 <out_rev_+0x3a>
    for (size_t i = len; i < width; i++) {
 8001292:	e9dd 320b 	ldrd	r3, r2, [sp, #44]	; 0x2c
 8001296:	4293      	cmp	r3, r2
 8001298:	d20d      	bcs.n	80012b6 <out_rev_+0x3a>
 800129a:	4613      	mov	r3, r2
 800129c:	463c      	mov	r4, r7
 800129e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80012a0:	1a9d      	subs	r5, r3, r2
 80012a2:	443d      	add	r5, r7
      out(' ', buffer, idx++, maxlen);
 80012a4:	4622      	mov	r2, r4
 80012a6:	4653      	mov	r3, sl
 80012a8:	4659      	mov	r1, fp
 80012aa:	2020      	movs	r0, #32
 80012ac:	3401      	adds	r4, #1
 80012ae:	47b0      	blx	r6
    for (size_t i = len; i < width; i++) {
 80012b0:	42ac      	cmp	r4, r5
 80012b2:	d1f7      	bne.n	80012a4 <out_rev_+0x28>
 80012b4:	e000      	b.n	80012b8 <out_rev_+0x3c>
 80012b6:	463d      	mov	r5, r7
    }
  }

  // reverse string
  while (len) {
 80012b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80012ba:	b173      	cbz	r3, 80012da <out_rev_+0x5e>
 80012bc:	eb08 0403 	add.w	r4, r8, r3
 80012c0:	eb04 0905 	add.w	r9, r4, r5
 80012c4:	eba9 0204 	sub.w	r2, r9, r4
    out(buf[--len], buffer, idx++, maxlen);
 80012c8:	f814 0d01 	ldrb.w	r0, [r4, #-1]!
 80012cc:	4653      	mov	r3, sl
 80012ce:	4659      	mov	r1, fp
 80012d0:	47b0      	blx	r6
  while (len) {
 80012d2:	4544      	cmp	r4, r8
 80012d4:	d1f6      	bne.n	80012c4 <out_rev_+0x48>
    out(buf[--len], buffer, idx++, maxlen);
 80012d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80012d8:	441d      	add	r5, r3
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 80012da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80012dc:	079b      	lsls	r3, r3, #30
 80012de:	d50e      	bpl.n	80012fe <out_rev_+0x82>
    while (idx - start_idx < width) {
 80012e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80012e2:	1bef      	subs	r7, r5, r7
 80012e4:	42bb      	cmp	r3, r7
 80012e6:	d90a      	bls.n	80012fe <out_rev_+0x82>
 80012e8:	461c      	mov	r4, r3
      out(' ', buffer, idx++, maxlen);
 80012ea:	462a      	mov	r2, r5
 80012ec:	4653      	mov	r3, sl
 80012ee:	4659      	mov	r1, fp
 80012f0:	2020      	movs	r0, #32
    while (idx - start_idx < width) {
 80012f2:	3701      	adds	r7, #1
      out(' ', buffer, idx++, maxlen);
 80012f4:	47b0      	blx	r6
    while (idx - start_idx < width) {
 80012f6:	42a7      	cmp	r7, r4
      out(' ', buffer, idx++, maxlen);
 80012f8:	f105 0501 	add.w	r5, r5, #1
    while (idx - start_idx < width) {
 80012fc:	d3f5      	bcc.n	80012ea <out_rev_+0x6e>
    }
  }

  return idx;
}
 80012fe:	4628      	mov	r0, r5
 8001300:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001304 <print_integer>:
  return out_rev_(out, buffer, idx, maxlen, buf, len, width, flags);
}

// An internal itoa-like function
static size_t print_integer(out_fct_type out, char* buffer, size_t idx, size_t maxlen, printf_unsigned_value_t value, bool negative, numeric_base_t base, unsigned int precision, unsigned int width, unsigned int flags)
{
 8001304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001308:	b093      	sub	sp, #76	; 0x4c
 800130a:	f89d 4078 	ldrb.w	r4, [sp, #120]	; 0x78
 800130e:	e9cd 2307 	strd	r2, r3, [sp, #28]
 8001312:	e9dd 561c 	ldrd	r5, r6, [sp, #112]	; 0x70
 8001316:	e9dd 9a20 	ldrd	r9, sl, [sp, #128]	; 0x80
  char buf[PRINTF_INTEGER_BUFFER_SIZE];
  size_t len = 0U;

  if (!value) {
 800131a:	ea55 0306 	orrs.w	r3, r5, r6
{
 800131e:	e9cd 0105 	strd	r0, r1, [sp, #20]
 8001322:	f89d 707c 	ldrb.w	r7, [sp, #124]	; 0x7c
 8001326:	f8dd b088 	ldr.w	fp, [sp, #136]	; 0x88
 800132a:	9409      	str	r4, [sp, #36]	; 0x24
  if (!value) {
 800132c:	d157      	bne.n	80013de <print_integer+0xda>
    if ( !(flags & FLAGS_PRECISION) ) {
 800132e:	f41b 6f80 	tst.w	fp, #1024	; 0x400
 8001332:	f040 80ab 	bne.w	800148c <print_integer+0x188>
      buf[len++] = '0';
 8001336:	2330      	movs	r3, #48	; 0x30
      flags &= ~FLAGS_HASH;
 8001338:	f02b 0b10 	bic.w	fp, fp, #16
      buf[len++] = '0';
 800133c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    if (!(flags & FLAGS_LEFT)) {
 8001340:	f01b 0f02 	tst.w	fp, #2
 8001344:	ab0a      	add	r3, sp, #40	; 0x28
      buf[len++] = '0';
 8001346:	f04f 0401 	mov.w	r4, #1
 800134a:	9304      	str	r3, [sp, #16]
    if (!(flags & FLAGS_LEFT)) {
 800134c:	d074      	beq.n	8001438 <print_integer+0x134>
 800134e:	4623      	mov	r3, r4
    while ((len < precision) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8001350:	4599      	cmp	r9, r3
 8001352:	d90d      	bls.n	8001370 <print_integer+0x6c>
 8001354:	2b20      	cmp	r3, #32
 8001356:	d00b      	beq.n	8001370 <print_integer+0x6c>
 8001358:	9804      	ldr	r0, [sp, #16]
 800135a:	1e5a      	subs	r2, r3, #1
      buf[len++] = '0';
 800135c:	2130      	movs	r1, #48	; 0x30
 800135e:	4402      	add	r2, r0
 8001360:	e001      	b.n	8001366 <print_integer+0x62>
    while ((len < precision) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8001362:	2b20      	cmp	r3, #32
 8001364:	d004      	beq.n	8001370 <print_integer+0x6c>
      buf[len++] = '0';
 8001366:	3301      	adds	r3, #1
    while ((len < precision) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8001368:	4599      	cmp	r9, r3
      buf[len++] = '0';
 800136a:	f802 1f01 	strb.w	r1, [r2, #1]!
    while ((len < precision) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 800136e:	d1f8      	bne.n	8001362 <print_integer+0x5e>
    if (base == BASE_OCTAL && (len > unpadded_len)) {
 8001370:	2f08      	cmp	r7, #8
 8001372:	d103      	bne.n	800137c <print_integer+0x78>
 8001374:	429c      	cmp	r4, r3
      flags &= ~FLAGS_HASH;
 8001376:	bf38      	it	cc
 8001378:	f02b 0b10 	biccc.w	fp, fp, #16
  if (flags & (FLAGS_HASH | FLAGS_POINTER)) {
 800137c:	f241 0210 	movw	r2, #4112	; 0x1010
 8001380:	ea1b 0f02 	tst.w	fp, r2
 8001384:	d011      	beq.n	80013aa <print_integer+0xa6>
    if (!(flags & FLAGS_PRECISION) && len && ((len == precision) || (len == width))) {
 8001386:	f41b 6f80 	tst.w	fp, #1024	; 0x400
 800138a:	d075      	beq.n	8001478 <print_integer+0x174>
    if ((base == BASE_HEX) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 800138c:	2f10      	cmp	r7, #16
 800138e:	f000 80b4 	beq.w	80014fa <print_integer+0x1f6>
    else if ((base == BASE_BINARY) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8001392:	2f02      	cmp	r7, #2
 8001394:	f000 809a 	beq.w	80014cc <print_integer+0x1c8>
    if (len < PRINTF_INTEGER_BUFFER_SIZE) {
 8001398:	2b20      	cmp	r3, #32
 800139a:	d012      	beq.n	80013c2 <print_integer+0xbe>
      buf[len++] = '0';
 800139c:	2130      	movs	r1, #48	; 0x30
 800139e:	185a      	adds	r2, r3, r1
 80013a0:	3218      	adds	r2, #24
 80013a2:	446a      	add	r2, sp
 80013a4:	f802 1c20 	strb.w	r1, [r2, #-32]
 80013a8:	3301      	adds	r3, #1
  if (len < PRINTF_INTEGER_BUFFER_SIZE) {
 80013aa:	2b20      	cmp	r3, #32
 80013ac:	d009      	beq.n	80013c2 <print_integer+0xbe>
    if (negative) {
 80013ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80013b0:	2a00      	cmp	r2, #0
 80013b2:	d071      	beq.n	8001498 <print_integer+0x194>
      buf[len++] = '-';
 80013b4:	212d      	movs	r1, #45	; 0x2d
      buf[len++] = ' ';
 80013b6:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80013ba:	446a      	add	r2, sp
 80013bc:	f802 1c20 	strb.w	r1, [r2, #-32]
 80013c0:	3301      	adds	r3, #1
  return out_rev_(out, buffer, idx, maxlen, buf, len, width, flags);
 80013c2:	9c04      	ldr	r4, [sp, #16]
 80013c4:	9301      	str	r3, [sp, #4]
 80013c6:	e9cd ab02 	strd	sl, fp, [sp, #8]
 80013ca:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80013ce:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 80013d2:	9400      	str	r4, [sp, #0]
 80013d4:	f7ff ff52 	bl	800127c <out_rev_>
      value /= base;
    } while (value && (len < PRINTF_INTEGER_BUFFER_SIZE));
  }

  return print_integer_finalization(out, buffer, idx, maxlen, buf, len, negative, base, precision, width, flags);
}
 80013d8:	b013      	add	sp, #76	; 0x4c
 80013da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80013de:	f01b 0f20 	tst.w	fp, #32
 80013e2:	bf14      	ite	ne
 80013e4:	2341      	movne	r3, #65	; 0x41
 80013e6:	2361      	moveq	r3, #97	; 0x61
 80013e8:	aa0a      	add	r2, sp, #40	; 0x28
      buf[len++] = (char)(digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10);
 80013ea:	3b0a      	subs	r3, #10
 80013ec:	f8cd 9080 	str.w	r9, [sp, #128]	; 0x80
 80013f0:	4690      	mov	r8, r2
  size_t len = 0U;
 80013f2:	2400      	movs	r4, #0
 80013f4:	4699      	mov	r9, r3
 80013f6:	9204      	str	r2, [sp, #16]
 80013f8:	e003      	b.n	8001402 <print_integer+0xfe>
    } while (value && (len < PRINTF_INTEGER_BUFFER_SIZE));
 80013fa:	2c20      	cmp	r4, #32
 80013fc:	d017      	beq.n	800142e <print_integer+0x12a>
      value /= base;
 80013fe:	4605      	mov	r5, r0
 8001400:	460e      	mov	r6, r1
      const char digit = (char)(value % base);
 8001402:	4628      	mov	r0, r5
 8001404:	4631      	mov	r1, r6
 8001406:	463a      	mov	r2, r7
 8001408:	2300      	movs	r3, #0
 800140a:	f7ff fbcf 	bl	8000bac <__aeabi_uldivmod>
 800140e:	b2d2      	uxtb	r2, r2
      buf[len++] = (char)(digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10);
 8001410:	2a09      	cmp	r2, #9
 8001412:	f102 0330 	add.w	r3, r2, #48	; 0x30
 8001416:	bf8a      	itet	hi
 8001418:	444a      	addhi	r2, r9
 800141a:	b2da      	uxtbls	r2, r3
 800141c:	b2d2      	uxtbhi	r2, r2
    } while (value && (len < PRINTF_INTEGER_BUFFER_SIZE));
 800141e:	42bd      	cmp	r5, r7
 8001420:	f176 0300 	sbcs.w	r3, r6, #0
      buf[len++] = (char)(digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10);
 8001424:	f808 2b01 	strb.w	r2, [r8], #1
 8001428:	f104 0401 	add.w	r4, r4, #1
    } while (value && (len < PRINTF_INTEGER_BUFFER_SIZE));
 800142c:	d2e5      	bcs.n	80013fa <print_integer+0xf6>
 800142e:	f8dd 9080 	ldr.w	r9, [sp, #128]	; 0x80
    if (!(flags & FLAGS_LEFT)) {
 8001432:	f01b 0f02 	tst.w	fp, #2
 8001436:	d18a      	bne.n	800134e <print_integer+0x4a>
      if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8001438:	f1ba 0f00 	cmp.w	sl, #0
 800143c:	d087      	beq.n	800134e <print_integer+0x4a>
 800143e:	f01b 0f01 	tst.w	fp, #1
 8001442:	d084      	beq.n	800134e <print_integer+0x4a>
 8001444:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001446:	2b00      	cmp	r3, #0
 8001448:	d152      	bne.n	80014f0 <print_integer+0x1ec>
 800144a:	f01b 0f0c 	tst.w	fp, #12
 800144e:	d14f      	bne.n	80014f0 <print_integer+0x1ec>
      while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8001450:	4554      	cmp	r4, sl
 8001452:	f4bf af7c 	bcs.w	800134e <print_integer+0x4a>
 8001456:	2c1f      	cmp	r4, #31
 8001458:	d84d      	bhi.n	80014f6 <print_integer+0x1f2>
 800145a:	9804      	ldr	r0, [sp, #16]
 800145c:	1e62      	subs	r2, r4, #1
 800145e:	4623      	mov	r3, r4
        buf[len++] = '0';
 8001460:	2130      	movs	r1, #48	; 0x30
 8001462:	4402      	add	r2, r0
 8001464:	e001      	b.n	800146a <print_integer+0x166>
      while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8001466:	2b20      	cmp	r3, #32
 8001468:	d045      	beq.n	80014f6 <print_integer+0x1f2>
        buf[len++] = '0';
 800146a:	3301      	adds	r3, #1
      while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 800146c:	4553      	cmp	r3, sl
        buf[len++] = '0';
 800146e:	f802 1f01 	strb.w	r1, [r2, #1]!
      while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8001472:	d1f8      	bne.n	8001466 <print_integer+0x162>
 8001474:	4653      	mov	r3, sl
 8001476:	e76b      	b.n	8001350 <print_integer+0x4c>
    if (!(flags & FLAGS_PRECISION) && len && ((len == precision) || (len == width))) {
 8001478:	b9c3      	cbnz	r3, 80014ac <print_integer+0x1a8>
    if ((base == BASE_HEX) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 800147a:	2f10      	cmp	r7, #16
 800147c:	d055      	beq.n	800152a <print_integer+0x226>
    else if ((base == BASE_BINARY) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 800147e:	2f02      	cmp	r7, #2
 8001480:	d060      	beq.n	8001544 <print_integer+0x240>
      buf[len++] = '0';
 8001482:	2330      	movs	r3, #48	; 0x30
 8001484:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8001488:	2301      	movs	r3, #1
 800148a:	e790      	b.n	80013ae <print_integer+0xaa>
    else if (base == BASE_HEX) {
 800148c:	2f10      	cmp	r7, #16
 800148e:	d029      	beq.n	80014e4 <print_integer+0x1e0>
 8001490:	ab0a      	add	r3, sp, #40	; 0x28
  size_t len = 0U;
 8001492:	2400      	movs	r4, #0
 8001494:	9304      	str	r3, [sp, #16]
 8001496:	e7cc      	b.n	8001432 <print_integer+0x12e>
    else if (flags & FLAGS_PLUS) {
 8001498:	f01b 0f04 	tst.w	fp, #4
 800149c:	d104      	bne.n	80014a8 <print_integer+0x1a4>
    else if (flags & FLAGS_SPACE) {
 800149e:	f01b 0f08 	tst.w	fp, #8
 80014a2:	d08e      	beq.n	80013c2 <print_integer+0xbe>
      buf[len++] = ' ';
 80014a4:	2120      	movs	r1, #32
 80014a6:	e786      	b.n	80013b6 <print_integer+0xb2>
      buf[len++] = '+';  // ignore the space if the '+' exists
 80014a8:	212b      	movs	r1, #43	; 0x2b
 80014aa:	e784      	b.n	80013b6 <print_integer+0xb2>
    if (!(flags & FLAGS_PRECISION) && len && ((len == precision) || (len == width))) {
 80014ac:	4599      	cmp	r9, r3
 80014ae:	d002      	beq.n	80014b6 <print_integer+0x1b2>
 80014b0:	459a      	cmp	sl, r3
 80014b2:	f47f af6b 	bne.w	800138c <print_integer+0x88>
      if (unpadded_len < len) {
 80014b6:	429c      	cmp	r4, r3
 80014b8:	f4bf af68 	bcs.w	800138c <print_integer+0x88>
      if (len && (base == BASE_HEX)) {
 80014bc:	1e5a      	subs	r2, r3, #1
 80014be:	d0dc      	beq.n	800147a <print_integer+0x176>
 80014c0:	2f10      	cmp	r7, #16
 80014c2:	d044      	beq.n	800154e <print_integer+0x24a>
    else if ((base == BASE_BINARY) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 80014c4:	2f02      	cmp	r7, #2
 80014c6:	d005      	beq.n	80014d4 <print_integer+0x1d0>
        len--;
 80014c8:	4613      	mov	r3, r2
 80014ca:	e767      	b.n	800139c <print_integer+0x98>
    else if ((base == BASE_BINARY) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 80014cc:	2b20      	cmp	r3, #32
 80014ce:	f43f af78 	beq.w	80013c2 <print_integer+0xbe>
 80014d2:	461a      	mov	r2, r3
      buf[len++] = 'b';
 80014d4:	2162      	movs	r1, #98	; 0x62
 80014d6:	f102 0348 	add.w	r3, r2, #72	; 0x48
 80014da:	446b      	add	r3, sp
 80014dc:	f803 1c20 	strb.w	r1, [r3, #-32]
 80014e0:	1c53      	adds	r3, r2, #1
 80014e2:	e759      	b.n	8001398 <print_integer+0x94>
      flags &= ~FLAGS_HASH;
 80014e4:	ab0a      	add	r3, sp, #40	; 0x28
  size_t len = 0U;
 80014e6:	2400      	movs	r4, #0
      flags &= ~FLAGS_HASH;
 80014e8:	f02b 0b10 	bic.w	fp, fp, #16
 80014ec:	9304      	str	r3, [sp, #16]
 80014ee:	e7a0      	b.n	8001432 <print_integer+0x12e>
        width--;
 80014f0:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80014f4:	e7ac      	b.n	8001450 <print_integer+0x14c>
      while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 80014f6:	2320      	movs	r3, #32
 80014f8:	e73a      	b.n	8001370 <print_integer+0x6c>
    if ((base == BASE_HEX) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 80014fa:	f01b 0f20 	tst.w	fp, #32
 80014fe:	d00b      	beq.n	8001518 <print_integer+0x214>
    else if ((base == BASE_HEX) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8001500:	2b20      	cmp	r3, #32
 8001502:	f43f af5e 	beq.w	80013c2 <print_integer+0xbe>
        len--;
 8001506:	4619      	mov	r1, r3
      buf[len++] = 'X';
 8001508:	2258      	movs	r2, #88	; 0x58
 800150a:	f101 0348 	add.w	r3, r1, #72	; 0x48
 800150e:	446b      	add	r3, sp
 8001510:	f803 2c20 	strb.w	r2, [r3, #-32]
 8001514:	1c4b      	adds	r3, r1, #1
 8001516:	e73f      	b.n	8001398 <print_integer+0x94>
    if ((base == BASE_HEX) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8001518:	2b20      	cmp	r3, #32
 800151a:	f43f af52 	beq.w	80013c2 <print_integer+0xbe>
      buf[len++] = 'x';
 800151e:	9a04      	ldr	r2, [sp, #16]
 8001520:	18d1      	adds	r1, r2, r3
 8001522:	3301      	adds	r3, #1
 8001524:	2278      	movs	r2, #120	; 0x78
 8001526:	700a      	strb	r2, [r1, #0]
 8001528:	e736      	b.n	8001398 <print_integer+0x94>
    if ((base == BASE_HEX) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 800152a:	f01b 0f20 	tst.w	fp, #32
 800152e:	d104      	bne.n	800153a <print_integer+0x236>
      buf[len++] = 'x';
 8001530:	2378      	movs	r3, #120	; 0x78
 8001532:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8001536:	2301      	movs	r3, #1
 8001538:	e730      	b.n	800139c <print_integer+0x98>
      buf[len++] = 'X';
 800153a:	2358      	movs	r3, #88	; 0x58
 800153c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8001540:	2301      	movs	r3, #1
 8001542:	e72b      	b.n	800139c <print_integer+0x98>
      buf[len++] = 'b';
 8001544:	2362      	movs	r3, #98	; 0x62
 8001546:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 800154a:	2301      	movs	r3, #1
 800154c:	e726      	b.n	800139c <print_integer+0x98>
        if (unpadded_len < len) {
 800154e:	4294      	cmp	r4, r2
 8001550:	d208      	bcs.n	8001564 <print_integer+0x260>
    if ((base == BASE_HEX) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8001552:	f01b 0f20 	tst.w	fp, #32
          len--;
 8001556:	f1a3 0102 	sub.w	r1, r3, #2
    if ((base == BASE_HEX) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 800155a:	d1d5      	bne.n	8001508 <print_integer+0x204>
      buf[len++] = 'x';
 800155c:	4613      	mov	r3, r2
 800155e:	9a04      	ldr	r2, [sp, #16]
 8001560:	4411      	add	r1, r2
 8001562:	e7df      	b.n	8001524 <print_integer+0x220>
    if ((base == BASE_HEX) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8001564:	f01b 0f20 	tst.w	fp, #32
        len--;
 8001568:	4613      	mov	r3, r2
    if ((base == BASE_HEX) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 800156a:	d0d8      	beq.n	800151e <print_integer+0x21a>
 800156c:	e7cb      	b.n	8001506 <print_integer+0x202>
 800156e:	bf00      	nop

08001570 <get_components>:

// Break up a double number - which is known to be a finite non-negative number -
// into its base-10 parts: integral - before the decimal point, and fractional - after it.
// Taken the precision into account, but does not change it even internally.
static struct double_components get_components(double number, unsigned int precision)
{
 8001570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001574:	461e      	mov	r6, r3
  struct double_components number_;
  number_.is_negative = get_sign(number);
  double abs_number = (number_.is_negative) ? -number : number;
 8001576:	0fdb      	lsrs	r3, r3, #31
 8001578:	bf18      	it	ne
 800157a:	f106 4600 	addne.w	r6, r6, #2147483648	; 0x80000000
{
 800157e:	b087      	sub	sp, #28
 8001580:	4605      	mov	r5, r0
  number_.integral = (int_fast64_t)abs_number;
 8001582:	4631      	mov	r1, r6
 8001584:	4610      	mov	r0, r2
{
 8001586:	4690      	mov	r8, r2
  double abs_number = (number_.is_negative) ? -number : number;
 8001588:	9303      	str	r3, [sp, #12]
  number_.integral = (int_fast64_t)abs_number;
 800158a:	f7ff fb27 	bl	8000bdc <__aeabi_d2lz>
{
 800158e:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
  double remainder = (abs_number - number_.integral) * powers_of_10[precision];
 8001592:	4b3f      	ldr	r3, [pc, #252]	; (8001690 <get_components+0x120>)
  number_.integral = (int_fast64_t)abs_number;
 8001594:	4607      	mov	r7, r0
  double remainder = (abs_number - number_.integral) * powers_of_10[precision];
 8001596:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800159a:	cb18      	ldmia	r3, {r3, r4}
  number_.integral = (int_fast64_t)abs_number;
 800159c:	468b      	mov	fp, r1
  double remainder = (abs_number - number_.integral) * powers_of_10[precision];
 800159e:	e9cd 3400 	strd	r3, r4, [sp]
 80015a2:	f7fe ffc3 	bl	800052c <__aeabi_l2d>
 80015a6:	4602      	mov	r2, r0
 80015a8:	460b      	mov	r3, r1
 80015aa:	4640      	mov	r0, r8
 80015ac:	4631      	mov	r1, r6
 80015ae:	f7fe fe33 	bl	8000218 <__aeabi_dsub>
 80015b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80015b6:	f7fe ffe7 	bl	8000588 <__aeabi_dmul>
 80015ba:	4602      	mov	r2, r0
 80015bc:	460b      	mov	r3, r1
 80015be:	e9cd 2304 	strd	r2, r3, [sp, #16]
  number_.fractional = (int_fast64_t)remainder;
 80015c2:	f7ff fb0b 	bl	8000bdc <__aeabi_d2lz>
 80015c6:	4604      	mov	r4, r0
 80015c8:	468a      	mov	sl, r1

  remainder -= (double) number_.fractional;
 80015ca:	f7fe ffaf 	bl	800052c <__aeabi_l2d>
 80015ce:	4602      	mov	r2, r0
 80015d0:	460b      	mov	r3, r1
 80015d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80015d6:	f7fe fe1f 	bl	8000218 <__aeabi_dsub>
 80015da:	4602      	mov	r2, r0
 80015dc:	460b      	mov	r3, r1
 80015de:	e9cd 2304 	strd	r2, r3, [sp, #16]

  if (remainder > 0.5) {
 80015e2:	2200      	movs	r2, #0
 80015e4:	4b2b      	ldr	r3, [pc, #172]	; (8001694 <get_components+0x124>)
 80015e6:	f7ff fa5f 	bl	8000aa8 <__aeabi_dcmpgt>
 80015ea:	2800      	cmp	r0, #0
 80015ec:	d038      	beq.n	8001660 <get_components+0xf0>
    ++number_.fractional;
 80015ee:	3401      	adds	r4, #1
 80015f0:	f14a 0a00 	adc.w	sl, sl, #0
    // handle rollover, e.g. case 0.99 with precision 1 is 1.0
    if ((double) number_.fractional >= powers_of_10[precision]) {
 80015f4:	4651      	mov	r1, sl
 80015f6:	4620      	mov	r0, r4
 80015f8:	f7fe ff98 	bl	800052c <__aeabi_l2d>
 80015fc:	4602      	mov	r2, r0
 80015fe:	460b      	mov	r3, r1
 8001600:	e9dd 0100 	ldrd	r0, r1, [sp]
 8001604:	f7ff fa3c 	bl	8000a80 <__aeabi_dcmple>
 8001608:	2800      	cmp	r0, #0
 800160a:	d138      	bne.n	800167e <get_components+0x10e>
      // if halfway, round up if odd OR if last digit is 0
      ++number_.fractional;
    }
  }

  if (precision == 0U) {
 800160c:	f1b9 0f00 	cmp.w	r9, #0
 8001610:	d11c      	bne.n	800164c <get_components+0xdc>
    remainder = abs_number - (double) number_.integral;
 8001612:	4638      	mov	r0, r7
 8001614:	4659      	mov	r1, fp
 8001616:	f7fe ff89 	bl	800052c <__aeabi_l2d>
 800161a:	4602      	mov	r2, r0
 800161c:	460b      	mov	r3, r1
 800161e:	4640      	mov	r0, r8
 8001620:	4631      	mov	r1, r6
 8001622:	f7fe fdf9 	bl	8000218 <__aeabi_dsub>
    if ((!(remainder < 0.5) || (remainder > 0.5)) && (number_.integral & 1)) {
 8001626:	2200      	movs	r2, #0
 8001628:	4b1a      	ldr	r3, [pc, #104]	; (8001694 <get_components+0x124>)
    remainder = abs_number - (double) number_.integral;
 800162a:	4680      	mov	r8, r0
 800162c:	4689      	mov	r9, r1
    if ((!(remainder < 0.5) || (remainder > 0.5)) && (number_.integral & 1)) {
 800162e:	f7ff fa1d 	bl	8000a6c <__aeabi_dcmplt>
 8001632:	b130      	cbz	r0, 8001642 <get_components+0xd2>
 8001634:	4640      	mov	r0, r8
 8001636:	4649      	mov	r1, r9
 8001638:	2200      	movs	r2, #0
 800163a:	4b16      	ldr	r3, [pc, #88]	; (8001694 <get_components+0x124>)
 800163c:	f7ff fa34 	bl	8000aa8 <__aeabi_dcmpgt>
 8001640:	b120      	cbz	r0, 800164c <get_components+0xdc>
 8001642:	07fb      	lsls	r3, r7, #31
 8001644:	d502      	bpl.n	800164c <get_components+0xdc>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++number_.integral;
 8001646:	3701      	adds	r7, #1
 8001648:	f14b 0b00 	adc.w	fp, fp, #0
    }
  }
  return number_;
}
 800164c:	4628      	mov	r0, r5
  return number_;
 800164e:	9b03      	ldr	r3, [sp, #12]
 8001650:	e9c5 7b00 	strd	r7, fp, [r5]
 8001654:	e9c5 4a02 	strd	r4, sl, [r5, #8]
 8001658:	742b      	strb	r3, [r5, #16]
}
 800165a:	b007      	add	sp, #28
 800165c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  else if (remainder == 0.5) {
 8001660:	2200      	movs	r2, #0
 8001662:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8001666:	4b0b      	ldr	r3, [pc, #44]	; (8001694 <get_components+0x124>)
 8001668:	f7ff f9f6 	bl	8000a58 <__aeabi_dcmpeq>
 800166c:	2800      	cmp	r0, #0
 800166e:	d0cd      	beq.n	800160c <get_components+0x9c>
    if ((number_.fractional == 0U) || (number_.fractional & 1U)) {
 8001670:	ea54 030a 	orrs.w	r3, r4, sl
 8001674:	d109      	bne.n	800168a <get_components+0x11a>
      ++number_.fractional;
 8001676:	3401      	adds	r4, #1
 8001678:	f14a 0a00 	adc.w	sl, sl, #0
 800167c:	e7c6      	b.n	800160c <get_components+0x9c>
      number_.fractional = 0;
 800167e:	2400      	movs	r4, #0
      ++number_.integral;
 8001680:	3701      	adds	r7, #1
      number_.fractional = 0;
 8001682:	46a2      	mov	sl, r4
      ++number_.integral;
 8001684:	f14b 0b00 	adc.w	fp, fp, #0
 8001688:	e7c0      	b.n	800160c <get_components+0x9c>
    if ((number_.fractional == 0U) || (number_.fractional & 1U)) {
 800168a:	07e2      	lsls	r2, r4, #31
 800168c:	d5be      	bpl.n	800160c <get_components+0x9c>
 800168e:	e7f2      	b.n	8001676 <get_components+0x106>
 8001690:	08003d68 	.word	0x08003d68
 8001694:	3fe00000 	.word	0x3fe00000

08001698 <print_broken_up_decimal.isra.0>:
  }
  return components;
}
#endif

static size_t print_broken_up_decimal(
 8001698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800169c:	b08b      	sub	sp, #44	; 0x2c
 800169e:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 80016a2:	f8dd c06c 	ldr.w	ip, [sp, #108]	; 0x6c
 80016a6:	9408      	str	r4, [sp, #32]
 80016a8:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80016aa:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
 80016ae:	9404      	str	r4, [sp, #16]
 80016b0:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80016b2:	460d      	mov	r5, r1
 80016b4:	9405      	str	r4, [sp, #20]
 80016b6:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80016b8:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80016ba:	9406      	str	r4, [sp, #24]
 80016bc:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80016be:	f8cd c008 	str.w	ip, [sp, #8]
 80016c2:	9407      	str	r4, [sp, #28]
 80016c4:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 80016c6:	9403      	str	r4, [sp, #12]
 80016c8:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80016ca:	9401      	str	r4, [sp, #4]
 80016cc:	4604      	mov	r4, r0
  struct double_components number_, out_fct_type out, char *buffer, size_t idx, size_t maxlen, unsigned int precision,
  unsigned int width, unsigned int flags, char *buf, size_t len)
{
  if (precision != 0U) {
 80016ce:	f1b9 0f00 	cmp.w	r9, #0
 80016d2:	d042      	beq.n	800175a <print_broken_up_decimal.isra.0+0xc2>
 80016d4:	4698      	mov	r8, r3
    // do fractional part, as an unsigned number

    unsigned int count = precision;

    if (flags & FLAGS_ADAPT_EXP && !(flags & FLAGS_HASH)) {
 80016d6:	f40c 6301 	and.w	r3, ip, #2064	; 0x810
 80016da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80016de:	4617      	mov	r7, r2
 80016e0:	f000 8093 	beq.w	800180a <print_broken_up_decimal.isra.0+0x172>
 80016e4:	9a01      	ldr	r2, [sp, #4]
 80016e6:	1e73      	subs	r3, r6, #1
 80016e8:	eb02 0b03 	add.w	fp, r2, r3
 80016ec:	9409      	str	r4, [sp, #36]	; 0x24
 80016ee:	e017      	b.n	8001720 <print_broken_up_decimal.isra.0+0x88>
    }

    if (number_.fractional > 0 || !(flags & FLAGS_ADAPT_EXP) || (flags & FLAGS_HASH) ) {
      while (len < PRINTF_FTOA_BUFFER_SIZE) {
        --count;
        buf[len++] = (char)('0' + number_.fractional % 10U);
 80016f0:	4638      	mov	r0, r7
 80016f2:	4641      	mov	r1, r8
 80016f4:	220a      	movs	r2, #10
 80016f6:	2300      	movs	r3, #0
 80016f8:	f7ff fa08 	bl	8000b0c <__aeabi_ldivmod>
 80016fc:	4694      	mov	ip, r2
        if (!(number_.fractional /= 10U)) {
 80016fe:	4638      	mov	r0, r7
        buf[len++] = (char)('0' + number_.fractional % 10U);
 8001700:	f10c 0730 	add.w	r7, ip, #48	; 0x30
        if (!(number_.fractional /= 10U)) {
 8001704:	4641      	mov	r1, r8
 8001706:	2300      	movs	r3, #0
        buf[len++] = (char)('0' + number_.fractional % 10U);
 8001708:	f80b 7f01 	strb.w	r7, [fp, #1]!
        if (!(number_.fractional /= 10U)) {
 800170c:	220a      	movs	r2, #10
 800170e:	f7ff f9fd 	bl	8000b0c <__aeabi_ldivmod>
 8001712:	ea51 0300 	orrs.w	r3, r1, r0
 8001716:	4607      	mov	r7, r0
 8001718:	4688      	mov	r8, r1
 800171a:	d060      	beq.n	80017de <print_broken_up_decimal.isra.0+0x146>
        --count;
 800171c:	46a1      	mov	r9, r4
        buf[len++] = (char)('0' + number_.fractional % 10U);
 800171e:	4656      	mov	r6, sl
      while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8001720:	2e20      	cmp	r6, #32
        --count;
 8001722:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
        buf[len++] = (char)('0' + number_.fractional % 10U);
 8001726:	f106 0a01 	add.w	sl, r6, #1
      while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800172a:	d1e1      	bne.n	80016f0 <print_broken_up_decimal.isra.0+0x58>
      break;
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 800172c:	9b02      	ldr	r3, [sp, #8]
 800172e:	f003 0303 	and.w	r3, r3, #3
 8001732:	2b01      	cmp	r3, #1
 8001734:	f000 8094 	beq.w	8001860 <print_broken_up_decimal.isra.0+0x1c8>
    if (width && (number_.is_negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8001738:	2720      	movs	r7, #32
    else if (flags & FLAGS_SPACE) {
      buf[len++] = ' ';
    }
  }

  return out_rev_(out, buffer, idx, maxlen, buf, len, width, flags);
 800173a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800173e:	9b02      	ldr	r3, [sp, #8]
 8001740:	9c01      	ldr	r4, [sp, #4]
 8001742:	9317      	str	r3, [sp, #92]	; 0x5c
 8001744:	9b03      	ldr	r3, [sp, #12]
 8001746:	9414      	str	r4, [sp, #80]	; 0x50
 8001748:	e9cd 7315 	strd	r7, r3, [sp, #84]	; 0x54
 800174c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
}
 8001750:	b00b      	add	sp, #44	; 0x2c
 8001752:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return out_rev_(out, buffer, idx, maxlen, buf, len, width, flags);
 8001756:	f7ff bd91 	b.w	800127c <out_rev_>
    if (flags & FLAGS_HASH) {
 800175a:	9b02      	ldr	r3, [sp, #8]
 800175c:	06d9      	lsls	r1, r3, #27
 800175e:	d505      	bpl.n	800176c <print_broken_up_decimal.isra.0+0xd4>
      if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8001760:	2e20      	cmp	r6, #32
 8001762:	d0e3      	beq.n	800172c <print_broken_up_decimal.isra.0+0x94>
        buf[len++] = '.';
 8001764:	232e      	movs	r3, #46	; 0x2e
 8001766:	9a01      	ldr	r2, [sp, #4]
 8001768:	5593      	strb	r3, [r2, r6]
 800176a:	3601      	adds	r6, #1
 800176c:	9b01      	ldr	r3, [sp, #4]
 800176e:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8001772:	4498      	add	r8, r3
 8001774:	e000      	b.n	8001778 <print_broken_up_decimal.isra.0+0xe0>
    buf[len++] = (char)('0' + (number_.integral % 10));
 8001776:	463e      	mov	r6, r7
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8001778:	2e20      	cmp	r6, #32
    buf[len++] = (char)('0' + (number_.integral % 10));
 800177a:	f106 0701 	add.w	r7, r6, #1
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800177e:	d0d5      	beq.n	800172c <print_broken_up_decimal.isra.0+0x94>
    buf[len++] = (char)('0' + (number_.integral % 10));
 8001780:	4620      	mov	r0, r4
 8001782:	4629      	mov	r1, r5
 8001784:	220a      	movs	r2, #10
 8001786:	2300      	movs	r3, #0
 8001788:	f7ff f9c0 	bl	8000b0c <__aeabi_ldivmod>
 800178c:	4694      	mov	ip, r2
    if (!(number_.integral /= 10)) {
 800178e:	4620      	mov	r0, r4
    buf[len++] = (char)('0' + (number_.integral % 10));
 8001790:	f10c 0430 	add.w	r4, ip, #48	; 0x30
    if (!(number_.integral /= 10)) {
 8001794:	2300      	movs	r3, #0
 8001796:	4629      	mov	r1, r5
    buf[len++] = (char)('0' + (number_.integral % 10));
 8001798:	f808 4f01 	strb.w	r4, [r8, #1]!
    if (!(number_.integral /= 10)) {
 800179c:	220a      	movs	r2, #10
 800179e:	f7ff f9b5 	bl	8000b0c <__aeabi_ldivmod>
 80017a2:	ea51 0300 	orrs.w	r3, r1, r0
 80017a6:	4604      	mov	r4, r0
 80017a8:	460d      	mov	r5, r1
 80017aa:	d1e4      	bne.n	8001776 <print_broken_up_decimal.isra.0+0xde>
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 80017ac:	9b02      	ldr	r3, [sp, #8]
 80017ae:	f003 0303 	and.w	r3, r3, #3
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d062      	beq.n	800187c <print_broken_up_decimal.isra.0+0x1e4>
  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 80017b6:	2f20      	cmp	r7, #32
 80017b8:	d0be      	beq.n	8001738 <print_broken_up_decimal.isra.0+0xa0>
    if (number_.is_negative) {
 80017ba:	9b08      	ldr	r3, [sp, #32]
 80017bc:	b123      	cbz	r3, 80017c8 <print_broken_up_decimal.isra.0+0x130>
      buf[len++] = '-';
 80017be:	232d      	movs	r3, #45	; 0x2d
 80017c0:	9a01      	ldr	r2, [sp, #4]
 80017c2:	55d3      	strb	r3, [r2, r7]
 80017c4:	3701      	adds	r7, #1
 80017c6:	e7b8      	b.n	800173a <print_broken_up_decimal.isra.0+0xa2>
    else if (flags & FLAGS_PLUS) {
 80017c8:	9b02      	ldr	r3, [sp, #8]
 80017ca:	075a      	lsls	r2, r3, #29
 80017cc:	d443      	bmi.n	8001856 <print_broken_up_decimal.isra.0+0x1be>
    else if (flags & FLAGS_SPACE) {
 80017ce:	9b02      	ldr	r3, [sp, #8]
 80017d0:	071b      	lsls	r3, r3, #28
 80017d2:	d5b2      	bpl.n	800173a <print_broken_up_decimal.isra.0+0xa2>
      buf[len++] = ' ';
 80017d4:	2320      	movs	r3, #32
 80017d6:	9a01      	ldr	r2, [sp, #4]
 80017d8:	55d3      	strb	r3, [r2, r7]
 80017da:	3701      	adds	r7, #1
 80017dc:	e7ad      	b.n	800173a <print_broken_up_decimal.isra.0+0xa2>
      while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 80017de:	f1ba 0f20 	cmp.w	sl, #32
 80017e2:	4623      	mov	r3, r4
 80017e4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80017e6:	d0a1      	beq.n	800172c <print_broken_up_decimal.isra.0+0x94>
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d068      	beq.n	80018be <print_broken_up_decimal.isra.0+0x226>
 80017ec:	9b01      	ldr	r3, [sp, #4]
        buf[len++] = '0';
 80017ee:	2130      	movs	r1, #48	; 0x30
 80017f0:	199a      	adds	r2, r3, r6
      while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 80017f2:	4656      	mov	r6, sl
        buf[len++] = '0';
 80017f4:	3601      	adds	r6, #1
      while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 80017f6:	2e20      	cmp	r6, #32
        buf[len++] = '0';
 80017f8:	f802 1f01 	strb.w	r1, [r2, #1]!
      while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 80017fc:	d096      	beq.n	800172c <print_broken_up_decimal.isra.0+0x94>
 80017fe:	43f3      	mvns	r3, r6
 8001800:	444b      	add	r3, r9
 8001802:	eb1a 0f03 	cmn.w	sl, r3
 8001806:	d1f5      	bne.n	80017f4 <print_broken_up_decimal.isra.0+0x15c>
 8001808:	e7ac      	b.n	8001764 <print_broken_up_decimal.isra.0+0xcc>
      if (number_.fractional > 0) {
 800180a:	2a01      	cmp	r2, #1
 800180c:	f178 0300 	sbcs.w	r3, r8, #0
 8001810:	dbac      	blt.n	800176c <print_broken_up_decimal.isra.0+0xd4>
          if (digit != 0) {
 8001812:	4610      	mov	r0, r2
 8001814:	4641      	mov	r1, r8
 8001816:	220a      	movs	r2, #10
 8001818:	2300      	movs	r3, #0
 800181a:	f7ff f977 	bl	8000b0c <__aeabi_ldivmod>
 800181e:	4313      	orrs	r3, r2
 8001820:	f47f af60 	bne.w	80016e4 <print_broken_up_decimal.isra.0+0x4c>
          number_.fractional /= 10U;
 8001824:	4638      	mov	r0, r7
 8001826:	4641      	mov	r1, r8
 8001828:	220a      	movs	r2, #10
 800182a:	2300      	movs	r3, #0
 800182c:	f7ff f96e 	bl	8000b0c <__aeabi_ldivmod>
 8001830:	220a      	movs	r2, #10
 8001832:	2300      	movs	r3, #0
 8001834:	46bb      	mov	fp, r7
 8001836:	46c2      	mov	sl, r8
 8001838:	4607      	mov	r7, r0
 800183a:	4688      	mov	r8, r1
 800183c:	f7ff f966 	bl	8000b0c <__aeabi_ldivmod>
          if (digit != 0) {
 8001840:	4313      	orrs	r3, r2
          --count;
 8001842:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
          if (digit != 0) {
 8001846:	d0ed      	beq.n	8001824 <print_broken_up_decimal.isra.0+0x18c>
    if (number_.fractional > 0 || !(flags & FLAGS_ADAPT_EXP) || (flags & FLAGS_HASH) ) {
 8001848:	f1bb 0f0a 	cmp.w	fp, #10
 800184c:	f17a 0300 	sbcs.w	r3, sl, #0
 8001850:	f6bf af48 	bge.w	80016e4 <print_broken_up_decimal.isra.0+0x4c>
 8001854:	e78a      	b.n	800176c <print_broken_up_decimal.isra.0+0xd4>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8001856:	232b      	movs	r3, #43	; 0x2b
 8001858:	9a01      	ldr	r2, [sp, #4]
 800185a:	55d3      	strb	r3, [r2, r7]
 800185c:	3701      	adds	r7, #1
 800185e:	e76c      	b.n	800173a <print_broken_up_decimal.isra.0+0xa2>
    if (width && (number_.is_negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8001860:	9b03      	ldr	r3, [sp, #12]
 8001862:	2b00      	cmp	r3, #0
 8001864:	f43f af68 	beq.w	8001738 <print_broken_up_decimal.isra.0+0xa0>
 8001868:	9a08      	ldr	r2, [sp, #32]
 800186a:	bb0a      	cbnz	r2, 80018b0 <print_broken_up_decimal.isra.0+0x218>
 800186c:	9a02      	ldr	r2, [sp, #8]
 800186e:	f012 0f0c 	tst.w	r2, #12
 8001872:	f43f af61 	beq.w	8001738 <print_broken_up_decimal.isra.0+0xa0>
      width--;
 8001876:	3b01      	subs	r3, #1
 8001878:	9303      	str	r3, [sp, #12]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800187a:	e75d      	b.n	8001738 <print_broken_up_decimal.isra.0+0xa0>
    if (width && (number_.is_negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800187c:	9b03      	ldr	r3, [sp, #12]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d099      	beq.n	80017b6 <print_broken_up_decimal.isra.0+0x11e>
 8001882:	9b08      	ldr	r3, [sp, #32]
 8001884:	b1b3      	cbz	r3, 80018b4 <print_broken_up_decimal.isra.0+0x21c>
      width--;
 8001886:	9b03      	ldr	r3, [sp, #12]
 8001888:	3b01      	subs	r3, #1
 800188a:	9303      	str	r3, [sp, #12]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800188c:	9b03      	ldr	r3, [sp, #12]
 800188e:	429f      	cmp	r7, r3
 8001890:	d291      	bcs.n	80017b6 <print_broken_up_decimal.isra.0+0x11e>
 8001892:	2f1f      	cmp	r7, #31
 8001894:	f63f af50 	bhi.w	8001738 <print_broken_up_decimal.isra.0+0xa0>
 8001898:	9b01      	ldr	r3, [sp, #4]
      buf[len++] = '0';
 800189a:	9a03      	ldr	r2, [sp, #12]
 800189c:	441e      	add	r6, r3
 800189e:	2330      	movs	r3, #48	; 0x30
 80018a0:	3701      	adds	r7, #1
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 80018a2:	4297      	cmp	r7, r2
      buf[len++] = '0';
 80018a4:	f806 3f01 	strb.w	r3, [r6, #1]!
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 80018a8:	d085      	beq.n	80017b6 <print_broken_up_decimal.isra.0+0x11e>
 80018aa:	2f20      	cmp	r7, #32
 80018ac:	d1f8      	bne.n	80018a0 <print_broken_up_decimal.isra.0+0x208>
 80018ae:	e743      	b.n	8001738 <print_broken_up_decimal.isra.0+0xa0>
      width--;
 80018b0:	9b03      	ldr	r3, [sp, #12]
 80018b2:	e7e0      	b.n	8001876 <print_broken_up_decimal.isra.0+0x1de>
    if (width && (number_.is_negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 80018b4:	9b02      	ldr	r3, [sp, #8]
 80018b6:	f013 0f0c 	tst.w	r3, #12
 80018ba:	d0e7      	beq.n	800188c <print_broken_up_decimal.isra.0+0x1f4>
 80018bc:	e7e3      	b.n	8001886 <print_broken_up_decimal.isra.0+0x1ee>
      while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 80018be:	4656      	mov	r6, sl
 80018c0:	e750      	b.n	8001764 <print_broken_up_decimal.isra.0+0xcc>
 80018c2:	bf00      	nop
 80018c4:	0000      	movs	r0, r0
	...

080018c8 <print_exponential_number>:
}

#if PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t print_exponential_number(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double number, unsigned int precision, unsigned int width, unsigned int flags, char* buf, size_t len)
{
 80018c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018cc:	b09b      	sub	sp, #108	; 0x6c
 80018ce:	e9dd 4524 	ldrd	r4, r5, [sp, #144]	; 0x90
  return get_bit_access(x).U >> (DOUBLE_SIZE_IN_BITS - 1);
 80018d2:	0fee      	lsrs	r6, r5, #31
{
 80018d4:	f04f 0800 	mov.w	r8, #0
 80018d8:	468a      	mov	sl, r1
 80018da:	469b      	mov	fp, r3
  return get_bit_access(x).U >> (DOUBLE_SIZE_IN_BITS - 1);
 80018dc:	960e      	str	r6, [sp, #56]	; 0x38
  const bool negative = get_sign(number);
 80018de:	9610      	str	r6, [sp, #64]	; 0x40
{
 80018e0:	900c      	str	r0, [sp, #48]	; 0x30
 80018e2:	920d      	str	r2, [sp, #52]	; 0x34
  // This number will decrease gradually (by factors of 10) as we "extract" the exponent out of it
  double abs_number =  negative ? -number : number;
 80018e4:	b116      	cbz	r6, 80018ec <print_exponential_number+0x24>
 80018e6:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80018ea:	461d      	mov	r5, r3
  bool abs_exp10_covered_by_powers_table;
  struct scaling_factor normalization;


  // Determine the decimal exponent
  if (abs_number == 0.0) {
 80018ec:	4620      	mov	r0, r4
 80018ee:	4629      	mov	r1, r5
 80018f0:	2200      	movs	r2, #0
 80018f2:	2300      	movs	r3, #0
 80018f4:	f7ff f8b0 	bl	8000a58 <__aeabi_dcmpeq>
 80018f8:	900f      	str	r0, [sp, #60]	; 0x3c
 80018fa:	2800      	cmp	r0, #0
 80018fc:	d054      	beq.n	80019a8 <print_exponential_number+0xe0>
  // For both of these, the value of 0 has a special meaning, but not the same one:
  // a 0 exponent-part width means "don't print the exponent"; a 0 decimal-part width
  // means "use as many characters as necessary".

  bool fall_back_to_decimal_only_mode = false;
  if (flags & FLAGS_ADAPT_EXP) {
 80018fe:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8001900:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8001904:	f040 81c8 	bne.w	8001c98 <print_exponential_number+0x3d0>
 8001908:	4698      	mov	r8, r3
  bool fall_back_to_decimal_only_mode = false;
 800190a:	930b      	str	r3, [sp, #44]	; 0x2c

  normalization.multiply = (exp10 < 0 && abs_exp10_covered_by_powers_table);
  bool should_skip_normalization = (fall_back_to_decimal_only_mode || exp10 == 0);
  struct double_components decimal_part_components =
    should_skip_normalization ?
    get_components(negative ? -abs_number : abs_number, precision) :
 800190c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800190e:	b113      	cbz	r3, 8001916 <print_exponential_number+0x4e>
 8001910:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8001914:	461d      	mov	r5, r3
 8001916:	9926      	ldr	r1, [sp, #152]	; 0x98
 8001918:	462b      	mov	r3, r5
 800191a:	4622      	mov	r2, r4
 800191c:	9100      	str	r1, [sp, #0]
 800191e:	a814      	add	r0, sp, #80	; 0x50
 8001920:	f7ff fe26 	bl	8001570 <get_components>
 8001924:	e9dd 5416 	ldrd	r5, r4, [sp, #88]	; 0x58
 8001928:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
 800192c:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 8001930:	930e      	str	r3, [sp, #56]	; 0x38
    get_normalized_components(negative, precision, abs_number, normalization);

  // Account for roll-over, e.g. rounding from 9.99 to 100.0 - which effects
  // the exponent and may require additional tweaking of the parts
  if (fall_back_to_decimal_only_mode) {
 8001932:	f1b8 0f00 	cmp.w	r8, #0
 8001936:	f000 818b 	beq.w	8001c50 <print_exponential_number+0x388>
    if ( (flags & FLAGS_ADAPT_EXP) && exp10 >= -1 && decimal_part_components.integral == powers_of_10[exp10 + 1]) {
 800193a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800193c:	051b      	lsls	r3, r3, #20
 800193e:	d513      	bpl.n	8001968 <print_exponential_number+0xa0>
 8001940:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8001944:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8001948:	db0e      	blt.n	8001968 <print_exponential_number+0xa0>
 800194a:	4630      	mov	r0, r6
 800194c:	4639      	mov	r1, r7
 800194e:	f7fe fded 	bl	800052c <__aeabi_l2d>
 8001952:	4b14      	ldr	r3, [pc, #80]	; (80019a4 <print_exponential_number+0xdc>)
 8001954:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8001958:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800195c:	f7ff f87c 	bl	8000a58 <__aeabi_dcmpeq>
 8001960:	b110      	cbz	r0, 8001968 <print_exponential_number+0xa0>
      exp10++; // Not strictly necessary, since exp10 is no longer really used
      precision--;
 8001962:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8001964:	3b01      	subs	r3, #1
 8001966:	9326      	str	r3, [sp, #152]	; 0x98
        // No; we just give up on any restriction on the decimal part and use as many
        // characters as we need
        0U);

  const size_t start_idx = idx;
  idx = print_broken_up_decimal(decimal_part_components, out, buffer, idx, maxlen, precision, decimal_part_width, flags, buf, len);
 8001968:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800196a:	462a      	mov	r2, r5
 800196c:	9309      	str	r3, [sp, #36]	; 0x24
 800196e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8001970:	4630      	mov	r0, r6
 8001972:	9308      	str	r3, [sp, #32]
 8001974:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8001976:	4639      	mov	r1, r7
 8001978:	9307      	str	r3, [sp, #28]
 800197a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800197c:	9306      	str	r3, [sp, #24]
 800197e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8001980:	e9cd b304 	strd	fp, r3, [sp, #16]
 8001984:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001986:	e9cd a302 	strd	sl, r3, [sp, #8]
 800198a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800198c:	9301      	str	r3, [sp, #4]
 800198e:	4623      	mov	r3, r4
 8001990:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8001992:	9400      	str	r4, [sp, #0]
 8001994:	f7ff fe80 	bl	8001698 <print_broken_up_decimal.isra.0>
 8001998:	4604      	mov	r4, r0
      // We need to right-pad with spaces to meet the width requirement
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
    }
  }
  return idx;
}
 800199a:	4620      	mov	r0, r4
 800199c:	b01b      	add	sp, #108	; 0x6c
 800199e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80019a2:	bf00      	nop
 80019a4:	08003d68 	.word	0x08003d68
  return (int)((x.U >> DOUBLE_STORED_MANTISSA_BITS ) & DOUBLE_EXPONENT_MASK) - DOUBLE_BASE_EXPONENT;
 80019a8:	f3c5 500a 	ubfx	r0, r5, #20, #11
      exp10 = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 80019ac:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 80019b0:	f7fe fd80 	bl	80004b4 <__aeabi_i2d>
 80019b4:	a3c4      	add	r3, pc, #784	; (adr r3, 8001cc8 <print_exponential_number+0x400>)
 80019b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ba:	f7fe fde5 	bl	8000588 <__aeabi_dmul>
 80019be:	a3c4      	add	r3, pc, #784	; (adr r3, 8001cd0 <print_exponential_number+0x408>)
 80019c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c4:	f7fe fc2a 	bl	800021c <__adddf3>
      conv.U = (conv.U & (( (double_uint_t)(1) << DOUBLE_STORED_MANTISSA_BITS) - 1U)) | ((double_uint_t) DOUBLE_BASE_EXPONENT << DOUBLE_STORED_MANTISSA_BITS);
 80019c8:	f3c5 0313 	ubfx	r3, r5, #0, #20
      exp10 = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 80019cc:	460f      	mov	r7, r1
      conv.U = (conv.U & (( (double_uint_t)(1) << DOUBLE_STORED_MANTISSA_BITS) - 1U)) | ((double_uint_t) DOUBLE_BASE_EXPONENT << DOUBLE_STORED_MANTISSA_BITS);
 80019ce:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
      exp10 = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 80019d2:	4606      	mov	r6, r0
 80019d4:	2200      	movs	r2, #0
 80019d6:	4bc8      	ldr	r3, [pc, #800]	; (8001cf8 <print_exponential_number+0x430>)
      conv.U = (conv.U & (( (double_uint_t)(1) << DOUBLE_STORED_MANTISSA_BITS) - 1U)) | ((double_uint_t) DOUBLE_BASE_EXPONENT << DOUBLE_STORED_MANTISSA_BITS);
 80019d8:	4620      	mov	r0, r4
 80019da:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
      exp10 = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 80019de:	f7fe fc1b 	bl	8000218 <__aeabi_dsub>
 80019e2:	a3bd      	add	r3, pc, #756	; (adr r3, 8001cd8 <print_exponential_number+0x410>)
 80019e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e8:	f7fe fdce 	bl	8000588 <__aeabi_dmul>
 80019ec:	4602      	mov	r2, r0
 80019ee:	460b      	mov	r3, r1
 80019f0:	4630      	mov	r0, r6
 80019f2:	4639      	mov	r1, r7
 80019f4:	f7fe fc12 	bl	800021c <__adddf3>
 80019f8:	f7ff f860 	bl	8000abc <__aeabi_d2iz>
 80019fc:	900b      	str	r0, [sp, #44]	; 0x2c
      exp2 = (int)(exp10 * 3.321928094887362 + 0.5);
 80019fe:	f7fe fd59 	bl	80004b4 <__aeabi_i2d>
 8001a02:	a3b7      	add	r3, pc, #732	; (adr r3, 8001ce0 <print_exponential_number+0x418>)
 8001a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a08:	4606      	mov	r6, r0
 8001a0a:	460f      	mov	r7, r1
 8001a0c:	f7fe fdbc 	bl	8000588 <__aeabi_dmul>
 8001a10:	2200      	movs	r2, #0
 8001a12:	4bba      	ldr	r3, [pc, #744]	; (8001cfc <print_exponential_number+0x434>)
 8001a14:	f7fe fc02 	bl	800021c <__adddf3>
 8001a18:	f7ff f850 	bl	8000abc <__aeabi_d2iz>
 8001a1c:	4603      	mov	r3, r0
      const double z  = exp10 * 2.302585092994046 - exp2 * 0.6931471805599453;
 8001a1e:	4639      	mov	r1, r7
      exp2 = (int)(exp10 * 3.321928094887362 + 0.5);
 8001a20:	4698      	mov	r8, r3
      const double z  = exp10 * 2.302585092994046 - exp2 * 0.6931471805599453;
 8001a22:	a3b1      	add	r3, pc, #708	; (adr r3, 8001ce8 <print_exponential_number+0x420>)
 8001a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a28:	4630      	mov	r0, r6
 8001a2a:	f7fe fdad 	bl	8000588 <__aeabi_dmul>
 8001a2e:	4606      	mov	r6, r0
 8001a30:	4640      	mov	r0, r8
 8001a32:	460f      	mov	r7, r1
 8001a34:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
 8001a38:	f7fe fd3c 	bl	80004b4 <__aeabi_i2d>
 8001a3c:	a3ac      	add	r3, pc, #688	; (adr r3, 8001cf0 <print_exponential_number+0x428>)
 8001a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a42:	f7fe fda1 	bl	8000588 <__aeabi_dmul>
 8001a46:	4602      	mov	r2, r0
 8001a48:	460b      	mov	r3, r1
 8001a4a:	4630      	mov	r0, r6
 8001a4c:	4639      	mov	r1, r7
 8001a4e:	f7fe fbe3 	bl	8000218 <__aeabi_dsub>
      const double z2 = z * z;
 8001a52:	4602      	mov	r2, r0
 8001a54:	460b      	mov	r3, r1
      const double z  = exp10 * 2.302585092994046 - exp2 * 0.6931471805599453;
 8001a56:	4606      	mov	r6, r0
 8001a58:	460f      	mov	r7, r1
      const double z2 = z * z;
 8001a5a:	f7fe fd95 	bl	8000588 <__aeabi_dmul>
      conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8001a5e:	4632      	mov	r2, r6
      const double z2 = z * z;
 8001a60:	4680      	mov	r8, r0
 8001a62:	4689      	mov	r9, r1
      conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8001a64:	463b      	mov	r3, r7
 8001a66:	4630      	mov	r0, r6
 8001a68:	4639      	mov	r1, r7
 8001a6a:	f7fe fbd7 	bl	800021c <__adddf3>
 8001a6e:	2200      	movs	r2, #0
 8001a70:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8001a74:	4ba2      	ldr	r3, [pc, #648]	; (8001d00 <print_exponential_number+0x438>)
 8001a76:	4640      	mov	r0, r8
 8001a78:	4649      	mov	r1, r9
 8001a7a:	f7fe feaf 	bl	80007dc <__aeabi_ddiv>
 8001a7e:	2200      	movs	r2, #0
 8001a80:	4ba0      	ldr	r3, [pc, #640]	; (8001d04 <print_exponential_number+0x43c>)
 8001a82:	f7fe fbcb 	bl	800021c <__adddf3>
 8001a86:	4602      	mov	r2, r0
 8001a88:	460b      	mov	r3, r1
 8001a8a:	4640      	mov	r0, r8
 8001a8c:	4649      	mov	r1, r9
 8001a8e:	f7fe fea5 	bl	80007dc <__aeabi_ddiv>
 8001a92:	2200      	movs	r2, #0
 8001a94:	4b9c      	ldr	r3, [pc, #624]	; (8001d08 <print_exponential_number+0x440>)
 8001a96:	f7fe fbc1 	bl	800021c <__adddf3>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	4640      	mov	r0, r8
 8001aa0:	4649      	mov	r1, r9
 8001aa2:	f7fe fe9b 	bl	80007dc <__aeabi_ddiv>
 8001aa6:	4632      	mov	r2, r6
 8001aa8:	463b      	mov	r3, r7
 8001aaa:	4606      	mov	r6, r0
 8001aac:	460f      	mov	r7, r1
 8001aae:	2000      	movs	r0, #0
 8001ab0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001ab4:	f7fe fbb0 	bl	8000218 <__aeabi_dsub>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	460b      	mov	r3, r1
 8001abc:	4630      	mov	r0, r6
 8001abe:	4639      	mov	r1, r7
 8001ac0:	f7fe fbac 	bl	800021c <__adddf3>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8001acc:	f7fe fe86 	bl	80007dc <__aeabi_ddiv>
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	4b8e      	ldr	r3, [pc, #568]	; (8001d0c <print_exponential_number+0x444>)
 8001ad4:	f7fe fba2 	bl	800021c <__adddf3>
      conv.U = ((double_uint_t)(exp2) + DOUBLE_BASE_EXPONENT) << DOUBLE_STORED_MANTISSA_BITS;
 8001ad8:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
 8001adc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8001ade:	f208 36ff 	addw	r6, r8, #1023	; 0x3ff
 8001ae2:	0533      	lsls	r3, r6, #20
      conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8001ae4:	f7fe fd50 	bl	8000588 <__aeabi_dmul>
      if (abs_number < conv.F) {
 8001ae8:	4622      	mov	r2, r4
 8001aea:	462b      	mov	r3, r5
      conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8001aec:	4606      	mov	r6, r0
 8001aee:	460f      	mov	r7, r1
      if (abs_number < conv.F) {
 8001af0:	f7fe ffda 	bl	8000aa8 <__aeabi_dcmpgt>
 8001af4:	2800      	cmp	r0, #0
 8001af6:	f040 80c3 	bne.w	8001c80 <print_exponential_number+0x3b8>
      conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8001afa:	4632      	mov	r2, r6
 8001afc:	46b9      	mov	r9, r7
    abs_exp10_covered_by_powers_table = PRINTF_ABS(exp10) < PRINTF_MAX_PRECOMPUTED_POWER_OF_10;
 8001afe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8001b00:	f101 0311 	add.w	r3, r1, #17
 8001b04:	2b22      	cmp	r3, #34	; 0x22
 8001b06:	bf94      	ite	ls
 8001b08:	f04f 0801 	movls.w	r8, #1
 8001b0c:	f04f 0800 	movhi.w	r8, #0
    normalization.raw_factor = abs_exp10_covered_by_powers_table ? powers_of_10[PRINTF_ABS(exp10)] : conv.F;
 8001b10:	f200 815d 	bhi.w	8001dce <print_exponential_number+0x506>
 8001b14:	460a      	mov	r2, r1
 8001b16:	ea81 71e1 	eor.w	r1, r1, r1, asr #31
 8001b1a:	eba1 71e2 	sub.w	r1, r1, r2, asr #31
 8001b1e:	4a7c      	ldr	r2, [pc, #496]	; (8001d10 <print_exponential_number+0x448>)
 8001b20:	eb02 00c1 	add.w	r0, r2, r1, lsl #3
 8001b24:	f852 2031 	ldr.w	r2, [r2, r1, lsl #3]
 8001b28:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8001b2c:	9211      	str	r2, [sp, #68]	; 0x44
  if (flags & FLAGS_ADAPT_EXP) {
 8001b2e:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8001b30:	0512      	lsls	r2, r2, #20
 8001b32:	f140 80ef 	bpl.w	8001d14 <print_exponential_number+0x44c>
    fall_back_to_decimal_only_mode = (exp10 >= -4 && exp10 < required_significant_digits);
 8001b36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001b38:	3304      	adds	r3, #4
 8001b3a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8001b3c:	f280 81fc 	bge.w	8001f38 <print_exponential_number+0x670>
        (int) precision - 1 - exp10 :
 8001b40:	3b01      	subs	r3, #1
    precision = (precision_ > 0 ? (unsigned) precision_ : 0U);
 8001b42:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001b46:	9326      	str	r3, [sp, #152]	; 0x98
    flags |= FLAGS_PRECISION;   // make sure print_broken_up_decimal respects our choice above
 8001b48:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8001b4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b4e:	9328      	str	r3, [sp, #160]	; 0xa0
  normalization.multiply = (exp10 < 0 && abs_exp10_covered_by_powers_table);
 8001b50:	f1b8 0f00 	cmp.w	r8, #0
 8001b54:	f040 80e5 	bne.w	8001d22 <print_exponential_number+0x45a>
  return normalization.multiply ? num * normalization.raw_factor : num / normalization.raw_factor;
 8001b58:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
  components.is_negative = negative;
 8001b5c:	9e10      	ldr	r6, [sp, #64]	; 0x40
  return normalization.multiply ? num * normalization.raw_factor : num / normalization.raw_factor;
 8001b5e:	4642      	mov	r2, r8
 8001b60:	464b      	mov	r3, r9
 8001b62:	4620      	mov	r0, r4
 8001b64:	4629      	mov	r1, r5
  components.is_negative = negative;
 8001b66:	960e      	str	r6, [sp, #56]	; 0x38
  return normalization.multiply ? num * normalization.raw_factor : num / normalization.raw_factor;
 8001b68:	f7fe fe38 	bl	80007dc <__aeabi_ddiv>
  components.integral = (int_fast64_t) apply_scaling(non_normalized, normalization);
 8001b6c:	f7ff f836 	bl	8000bdc <__aeabi_d2lz>
 8001b70:	4606      	mov	r6, r0
 8001b72:	460f      	mov	r7, r1
  double remainder = non_normalized - unapply_scaling((double) components.integral, normalization);
 8001b74:	f7fe fcda 	bl	800052c <__aeabi_l2d>
  return normalization.multiply ? normalized / normalization.raw_factor : normalized * normalization.raw_factor;
 8001b78:	4642      	mov	r2, r8
 8001b7a:	464b      	mov	r3, r9
 8001b7c:	f7fe fd04 	bl	8000588 <__aeabi_dmul>
 8001b80:	4602      	mov	r2, r0
 8001b82:	460b      	mov	r3, r1
  double remainder = non_normalized - unapply_scaling((double) components.integral, normalization);
 8001b84:	4620      	mov	r0, r4
 8001b86:	4629      	mov	r1, r5
 8001b88:	f7fe fb46 	bl	8000218 <__aeabi_dsub>
  double prec_power_of_10 = powers_of_10[precision];
 8001b8c:	4b60      	ldr	r3, [pc, #384]	; (8001d10 <print_exponential_number+0x448>)
 8001b8e:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8001b90:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8001b92:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8001b96:	6864      	ldr	r4, [r4, #4]
 8001b98:	f853 3035 	ldr.w	r3, [r3, r5, lsl #3]
  return (int)((x.U >> DOUBLE_STORED_MANTISSA_BITS ) & DOUBLE_EXPONENT_MASK) - DOUBLE_BASE_EXPONENT;
 8001b9c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8001ba0:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
  double prec_power_of_10 = powers_of_10[precision];
 8001ba4:	930f      	str	r3, [sp, #60]	; 0x3c
  return (int)((x.U >> DOUBLE_STORED_MANTISSA_BITS ) & DOUBLE_EXPONENT_MASK) - DOUBLE_BASE_EXPONENT;
 8001ba6:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8001baa:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
    if (PRINTF_ABS(factor_exp2) > PRINTF_ABS(extra_factor_exp2)) {
 8001bae:	2a00      	cmp	r2, #0
 8001bb0:	bfb8      	it	lt
 8001bb2:	4252      	neglt	r2, r2
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	bfb8      	it	lt
 8001bb8:	425b      	neglt	r3, r3
 8001bba:	429a      	cmp	r2, r3
  double prec_power_of_10 = powers_of_10[precision];
 8001bbc:	9410      	str	r4, [sp, #64]	; 0x40
  double remainder = non_normalized - unapply_scaling((double) components.integral, normalization);
 8001bbe:	460d      	mov	r5, r1
 8001bc0:	4604      	mov	r4, r0
    if (PRINTF_ABS(factor_exp2) > PRINTF_ABS(extra_factor_exp2)) {
 8001bc2:	f340 81a3 	ble.w	8001f0c <print_exponential_number+0x644>
      result.raw_factor = sf.raw_factor / extra_multiplicative_factor;
 8001bc6:	4649      	mov	r1, r9
 8001bc8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8001bca:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001bcc:	9811      	ldr	r0, [sp, #68]	; 0x44
 8001bce:	f7fe fe05 	bl	80007dc <__aeabi_ddiv>
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	4602      	mov	r2, r0
  return normalization.multiply ? num * normalization.raw_factor : num / normalization.raw_factor;
 8001bd6:	4629      	mov	r1, r5
 8001bd8:	4620      	mov	r0, r4
 8001bda:	f7fe fdff 	bl	80007dc <__aeabi_ddiv>
  if (precision == 0U) {
 8001bde:	9b26      	ldr	r3, [sp, #152]	; 0x98
  return normalization.multiply ? num * normalization.raw_factor : num / normalization.raw_factor;
 8001be0:	4680      	mov	r8, r0
 8001be2:	4689      	mov	r9, r1
  if (precision == 0U) {
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	f000 80d6 	beq.w	8001d96 <print_exponential_number+0x4ce>
    components.fractional = (int_fast64_t) scaled_remainder;
 8001bea:	4640      	mov	r0, r8
 8001bec:	4649      	mov	r1, r9
 8001bee:	f7fe fff5 	bl	8000bdc <__aeabi_d2lz>
 8001bf2:	4605      	mov	r5, r0
 8001bf4:	460c      	mov	r4, r1
    scaled_remainder -= components.fractional;
 8001bf6:	f7fe fc99 	bl	800052c <__aeabi_l2d>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	4640      	mov	r0, r8
 8001c00:	4649      	mov	r1, r9
 8001c02:	f7fe fb09 	bl	8000218 <__aeabi_dsub>
    components.fractional += (scaled_remainder >= rounding_threshold);
 8001c06:	2200      	movs	r2, #0
 8001c08:	4b3c      	ldr	r3, [pc, #240]	; (8001cfc <print_exponential_number+0x434>)
    scaled_remainder -= components.fractional;
 8001c0a:	4680      	mov	r8, r0
 8001c0c:	4689      	mov	r9, r1
    components.fractional += (scaled_remainder >= rounding_threshold);
 8001c0e:	f7fe ff41 	bl	8000a94 <__aeabi_dcmpge>
 8001c12:	4603      	mov	r3, r0
 8001c14:	3b00      	subs	r3, #0
 8001c16:	bf18      	it	ne
 8001c18:	2301      	movne	r3, #1
    if (scaled_remainder == rounding_threshold) {
 8001c1a:	4640      	mov	r0, r8
    components.fractional += (scaled_remainder >= rounding_threshold);
 8001c1c:	195d      	adds	r5, r3, r5
    if (scaled_remainder == rounding_threshold) {
 8001c1e:	4649      	mov	r1, r9
 8001c20:	f04f 0200 	mov.w	r2, #0
 8001c24:	4b35      	ldr	r3, [pc, #212]	; (8001cfc <print_exponential_number+0x434>)
    components.fractional += (scaled_remainder >= rounding_threshold);
 8001c26:	f144 0400 	adc.w	r4, r4, #0
    if (scaled_remainder == rounding_threshold) {
 8001c2a:	f7fe ff15 	bl	8000a58 <__aeabi_dcmpeq>
 8001c2e:	b108      	cbz	r0, 8001c34 <print_exponential_number+0x36c>
      components.fractional &= ~((int_fast64_t) 0x1);
 8001c30:	f025 0501 	bic.w	r5, r5, #1
    if ((double) components.fractional >= prec_power_of_10) {
 8001c34:	4628      	mov	r0, r5
 8001c36:	4621      	mov	r1, r4
 8001c38:	f7fe fc78 	bl	800052c <__aeabi_l2d>
 8001c3c:	e9dd 230f 	ldrd	r2, r3, [sp, #60]	; 0x3c
 8001c40:	f7fe ff28 	bl	8000a94 <__aeabi_dcmpge>
 8001c44:	b120      	cbz	r0, 8001c50 <print_exponential_number+0x388>
      ++components.integral;
 8001c46:	3601      	adds	r6, #1
 8001c48:	f147 0700 	adc.w	r7, r7, #0
      components.fractional = 0;
 8001c4c:	2500      	movs	r5, #0
 8001c4e:	462c      	mov	r4, r5
    if (decimal_part_components.integral >= 10) {
 8001c50:	2e0a      	cmp	r6, #10
 8001c52:	f177 0300 	sbcs.w	r3, r7, #0
 8001c56:	db06      	blt.n	8001c66 <print_exponential_number+0x39e>
      decimal_part_components.fractional = 0;
 8001c58:	2500      	movs	r5, #0
      decimal_part_components.integral = 1;
 8001c5a:	2601      	movs	r6, #1
      decimal_part_components.fractional = 0;
 8001c5c:	462c      	mov	r4, r5
      decimal_part_components.integral = 1;
 8001c5e:	462f      	mov	r7, r5
      exp10++;
 8001c60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001c62:	3301      	adds	r3, #1
 8001c64:	930b      	str	r3, [sp, #44]	; 0x2c
  unsigned int exp10_part_width = fall_back_to_decimal_only_mode ? 0U : (PRINTF_ABS(exp10) < 100) ? 4U : 5U;
 8001c66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001c68:	3363      	adds	r3, #99	; 0x63
 8001c6a:	2bc6      	cmp	r3, #198	; 0xc6
 8001c6c:	f200 80b1 	bhi.w	8001dd2 <print_exponential_number+0x50a>
      0U :
 8001c70:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8001c72:	f013 0902 	ands.w	r9, r3, #2
 8001c76:	f040 8130 	bne.w	8001eda <print_exponential_number+0x612>
  unsigned int exp10_part_width = fall_back_to_decimal_only_mode ? 0U : (PRINTF_ABS(exp10) < 100) ? 4U : 5U;
 8001c7a:	f04f 0804 	mov.w	r8, #4
 8001c7e:	e108      	b.n	8001e92 <print_exponential_number+0x5ca>
        exp10--;
 8001c80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        conv.F /= 10;
 8001c82:	2200      	movs	r2, #0
        exp10--;
 8001c84:	3b01      	subs	r3, #1
 8001c86:	930b      	str	r3, [sp, #44]	; 0x2c
        conv.F /= 10;
 8001c88:	4630      	mov	r0, r6
 8001c8a:	4639      	mov	r1, r7
 8001c8c:	4b1d      	ldr	r3, [pc, #116]	; (8001d04 <print_exponential_number+0x43c>)
 8001c8e:	f7fe fda5 	bl	80007dc <__aeabi_ddiv>
 8001c92:	4602      	mov	r2, r0
 8001c94:	4689      	mov	r9, r1
 8001c96:	e732      	b.n	8001afe <print_exponential_number+0x236>
    fall_back_to_decimal_only_mode = (exp10 >= -4 && exp10 < required_significant_digits);
 8001c98:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	bf38      	it	cc
 8001c9e:	2301      	movcc	r3, #1
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	f340 811d 	ble.w	8001ee0 <print_exponential_number+0x618>
        (int) precision - 1 - exp10 :
 8001ca6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8001ca8:	3b01      	subs	r3, #1
    precision = (precision_ > 0 ? (unsigned) precision_ : 0U);
 8001caa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001cae:	9326      	str	r3, [sp, #152]	; 0x98
    flags |= FLAGS_PRECISION;   // make sure print_broken_up_decimal respects our choice above
 8001cb0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8001cb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cb6:	9328      	str	r3, [sp, #160]	; 0xa0
    exp10 = 0; // ... and no need to set a normalization factor or check the powers table
 8001cb8:	2300      	movs	r3, #0
 8001cba:	930b      	str	r3, [sp, #44]	; 0x2c
  normalization.multiply = (exp10 < 0 && abs_exp10_covered_by_powers_table);
 8001cbc:	f04f 0801 	mov.w	r8, #1
 8001cc0:	e624      	b.n	800190c <print_exponential_number+0x44>
 8001cc2:	bf00      	nop
 8001cc4:	f3af 8000 	nop.w
 8001cc8:	509f79fb 	.word	0x509f79fb
 8001ccc:	3fd34413 	.word	0x3fd34413
 8001cd0:	8b60c8b3 	.word	0x8b60c8b3
 8001cd4:	3fc68a28 	.word	0x3fc68a28
 8001cd8:	636f4361 	.word	0x636f4361
 8001cdc:	3fd287a7 	.word	0x3fd287a7
 8001ce0:	0979a371 	.word	0x0979a371
 8001ce4:	400a934f 	.word	0x400a934f
 8001ce8:	bbb55516 	.word	0xbbb55516
 8001cec:	40026bb1 	.word	0x40026bb1
 8001cf0:	fefa39ef 	.word	0xfefa39ef
 8001cf4:	3fe62e42 	.word	0x3fe62e42
 8001cf8:	3ff80000 	.word	0x3ff80000
 8001cfc:	3fe00000 	.word	0x3fe00000
 8001d00:	402c0000 	.word	0x402c0000
 8001d04:	40240000 	.word	0x40240000
 8001d08:	40180000 	.word	0x40180000
 8001d0c:	3ff00000 	.word	0x3ff00000
 8001d10:	08003d68 	.word	0x08003d68
 8001d14:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001d16:	2a00      	cmp	r2, #0
 8001d18:	f280 80f1 	bge.w	8001efe <print_exponential_number+0x636>
 8001d1c:	2b22      	cmp	r3, #34	; 0x22
 8001d1e:	f63f af1b 	bhi.w	8001b58 <print_exponential_number+0x290>
  return normalization.multiply ? num * normalization.raw_factor : num / normalization.raw_factor;
 8001d22:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
  components.is_negative = negative;
 8001d26:	9e10      	ldr	r6, [sp, #64]	; 0x40
  return normalization.multiply ? num * normalization.raw_factor : num / normalization.raw_factor;
 8001d28:	4642      	mov	r2, r8
 8001d2a:	464b      	mov	r3, r9
 8001d2c:	4620      	mov	r0, r4
 8001d2e:	4629      	mov	r1, r5
  components.is_negative = negative;
 8001d30:	960e      	str	r6, [sp, #56]	; 0x38
  return normalization.multiply ? num * normalization.raw_factor : num / normalization.raw_factor;
 8001d32:	f7fe fc29 	bl	8000588 <__aeabi_dmul>
  components.integral = (int_fast64_t) apply_scaling(non_normalized, normalization);
 8001d36:	f7fe ff51 	bl	8000bdc <__aeabi_d2lz>
 8001d3a:	4606      	mov	r6, r0
 8001d3c:	460f      	mov	r7, r1
  double remainder = non_normalized - unapply_scaling((double) components.integral, normalization);
 8001d3e:	f7fe fbf5 	bl	800052c <__aeabi_l2d>
  return normalization.multiply ? normalized / normalization.raw_factor : normalized * normalization.raw_factor;
 8001d42:	4642      	mov	r2, r8
 8001d44:	464b      	mov	r3, r9
 8001d46:	f7fe fd49 	bl	80007dc <__aeabi_ddiv>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	460b      	mov	r3, r1
  double remainder = non_normalized - unapply_scaling((double) components.integral, normalization);
 8001d4e:	4620      	mov	r0, r4
 8001d50:	4629      	mov	r1, r5
 8001d52:	f7fe fa61 	bl	8000218 <__aeabi_dsub>
  double prec_power_of_10 = powers_of_10[precision];
 8001d56:	f8df c204 	ldr.w	ip, [pc, #516]	; 8001f5c <print_exponential_number+0x694>
  double remainder = non_normalized - unapply_scaling((double) components.integral, normalization);
 8001d5a:	460d      	mov	r5, r1
  double prec_power_of_10 = powers_of_10[precision];
 8001d5c:	f8dd e098 	ldr.w	lr, [sp, #152]	; 0x98
 8001d60:	9926      	ldr	r1, [sp, #152]	; 0x98
  double remainder = non_normalized - unapply_scaling((double) components.integral, normalization);
 8001d62:	4604      	mov	r4, r0
  double prec_power_of_10 = powers_of_10[precision];
 8001d64:	f85c 1031 	ldr.w	r1, [ip, r1, lsl #3]
 8001d68:	eb0c 0cce 	add.w	ip, ip, lr, lsl #3
 8001d6c:	f8dc c004 	ldr.w	ip, [ip, #4]
    result.raw_factor = sf.raw_factor * extra_multiplicative_factor;
 8001d70:	4608      	mov	r0, r1
  double prec_power_of_10 = powers_of_10[precision];
 8001d72:	910f      	str	r1, [sp, #60]	; 0x3c
    result.raw_factor = sf.raw_factor * extra_multiplicative_factor;
 8001d74:	4642      	mov	r2, r8
 8001d76:	464b      	mov	r3, r9
 8001d78:	4661      	mov	r1, ip
  double prec_power_of_10 = powers_of_10[precision];
 8001d7a:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
    result.raw_factor = sf.raw_factor * extra_multiplicative_factor;
 8001d7e:	f7fe fc03 	bl	8000588 <__aeabi_dmul>
  return normalization.multiply ? num * normalization.raw_factor : num / normalization.raw_factor;
 8001d82:	462b      	mov	r3, r5
 8001d84:	4622      	mov	r2, r4
 8001d86:	f7fe fbff 	bl	8000588 <__aeabi_dmul>
  if (precision == 0U) {
 8001d8a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  return normalization.multiply ? num * normalization.raw_factor : num / normalization.raw_factor;
 8001d8c:	4680      	mov	r8, r0
 8001d8e:	4689      	mov	r9, r1
  if (precision == 0U) {
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	f47f af2a 	bne.w	8001bea <print_exponential_number+0x322>
    components.integral += (scaled_remainder >= rounding_threshold);
 8001d96:	2200      	movs	r2, #0
 8001d98:	4649      	mov	r1, r9
 8001d9a:	4b71      	ldr	r3, [pc, #452]	; (8001f60 <print_exponential_number+0x698>)
 8001d9c:	4640      	mov	r0, r8
 8001d9e:	f7fe fe79 	bl	8000a94 <__aeabi_dcmpge>
 8001da2:	4603      	mov	r3, r0
 8001da4:	3b00      	subs	r3, #0
 8001da6:	bf18      	it	ne
 8001da8:	2301      	movne	r3, #1
    if (scaled_remainder == rounding_threshold) {
 8001daa:	4640      	mov	r0, r8
    components.integral += (scaled_remainder >= rounding_threshold);
 8001dac:	199e      	adds	r6, r3, r6
    if (scaled_remainder == rounding_threshold) {
 8001dae:	4649      	mov	r1, r9
 8001db0:	f04f 0200 	mov.w	r2, #0
 8001db4:	4b6a      	ldr	r3, [pc, #424]	; (8001f60 <print_exponential_number+0x698>)
    components.integral += (scaled_remainder >= rounding_threshold);
 8001db6:	f147 0700 	adc.w	r7, r7, #0
    if (scaled_remainder == rounding_threshold) {
 8001dba:	f7fe fe4d 	bl	8000a58 <__aeabi_dcmpeq>
 8001dbe:	2800      	cmp	r0, #0
 8001dc0:	f43f af44 	beq.w	8001c4c <print_exponential_number+0x384>
    components.fractional = 0;
 8001dc4:	9d26      	ldr	r5, [sp, #152]	; 0x98
      components.integral &= ~((int_fast64_t) 0x1);
 8001dc6:	f026 0601 	bic.w	r6, r6, #1
    components.fractional = 0;
 8001dca:	462c      	mov	r4, r5
 8001dcc:	e740      	b.n	8001c50 <print_exponential_number+0x388>
    normalization.raw_factor = abs_exp10_covered_by_powers_table ? powers_of_10[PRINTF_ABS(exp10)] : conv.F;
 8001dce:	9211      	str	r2, [sp, #68]	; 0x44
 8001dd0:	e6ad      	b.n	8001b2e <print_exponential_number+0x266>
      0U :
 8001dd2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8001dd4:	f013 0902 	ands.w	r9, r3, #2
 8001dd8:	d059      	beq.n	8001e8e <print_exponential_number+0x5c6>
 8001dda:	f04f 0804 	mov.w	r8, #4
  idx = print_broken_up_decimal(decimal_part_components, out, buffer, idx, maxlen, precision, decimal_part_width, flags, buf, len);
 8001dde:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8001de0:	462a      	mov	r2, r5
 8001de2:	9309      	str	r3, [sp, #36]	; 0x24
 8001de4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8001de6:	4630      	mov	r0, r6
 8001de8:	9308      	str	r3, [sp, #32]
 8001dea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8001dec:	4639      	mov	r1, r7
 8001dee:	9305      	str	r3, [sp, #20]
 8001df0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001df2:	f8cd b010 	str.w	fp, [sp, #16]
 8001df6:	9300      	str	r3, [sp, #0]
 8001df8:	4623      	mov	r3, r4
 8001dfa:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 8001dfc:	9407      	str	r4, [sp, #28]
 8001dfe:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8001e00:	e9cd a402 	strd	sl, r4, [sp, #8]
 8001e04:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8001e06:	9401      	str	r4, [sp, #4]
 8001e08:	2400      	movs	r4, #0
 8001e0a:	9406      	str	r4, [sp, #24]
 8001e0c:	f7ff fc44 	bl	8001698 <print_broken_up_decimal.isra.0>
 8001e10:	4602      	mov	r2, r0
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 8001e12:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8001e14:	4651      	mov	r1, sl
 8001e16:	f013 0f20 	tst.w	r3, #32
 8001e1a:	bf14      	ite	ne
 8001e1c:	2045      	movne	r0, #69	; 0x45
 8001e1e:	2065      	moveq	r0, #101	; 0x65
 8001e20:	465b      	mov	r3, fp
 8001e22:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001e24:	1c54      	adds	r4, r2, #1
 8001e26:	47a8      	blx	r5
    idx = print_integer(out, buffer, idx, maxlen,
 8001e28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	dd75      	ble.n	8001f1a <print_exponential_number+0x652>
 8001e2e:	461a      	mov	r2, r3
 8001e30:	17db      	asrs	r3, r3, #31
 8001e32:	e9cd 2300 	strd	r2, r3, [sp]
 8001e36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001e38:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8001e3a:	0fd8      	lsrs	r0, r3, #31
 8001e3c:	2305      	movs	r3, #5
 8001e3e:	9002      	str	r0, [sp, #8]
 8001e40:	9306      	str	r3, [sp, #24]
 8001e42:	2000      	movs	r0, #0
 8001e44:	230a      	movs	r3, #10
 8001e46:	4622      	mov	r2, r4
 8001e48:	e9cd 3003 	strd	r3, r0, [sp, #12]
 8001e4c:	4651      	mov	r1, sl
 8001e4e:	465b      	mov	r3, fp
 8001e50:	4630      	mov	r0, r6
 8001e52:	f8cd 8014 	str.w	r8, [sp, #20]
 8001e56:	f7ff fa55 	bl	8001304 <print_integer>
 8001e5a:	4604      	mov	r4, r0
    if (flags & FLAGS_LEFT) {
 8001e5c:	f1b9 0f00 	cmp.w	r9, #0
 8001e60:	f43f ad9b 	beq.w	800199a <print_exponential_number+0xd2>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 8001e64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001e66:	1ac5      	subs	r5, r0, r3
 8001e68:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8001e6a:	42ab      	cmp	r3, r5
 8001e6c:	f67f ad95 	bls.w	800199a <print_exponential_number+0xd2>
 8001e70:	461f      	mov	r7, r3
 8001e72:	4622      	mov	r2, r4
 8001e74:	465b      	mov	r3, fp
 8001e76:	4651      	mov	r1, sl
 8001e78:	2020      	movs	r0, #32
 8001e7a:	3501      	adds	r5, #1
 8001e7c:	47b0      	blx	r6
 8001e7e:	42af      	cmp	r7, r5
 8001e80:	f104 0401 	add.w	r4, r4, #1
 8001e84:	d8f5      	bhi.n	8001e72 <print_exponential_number+0x5aa>
}
 8001e86:	4620      	mov	r0, r4
 8001e88:	b01b      	add	sp, #108	; 0x6c
 8001e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  unsigned int exp10_part_width = fall_back_to_decimal_only_mode ? 0U : (PRINTF_ABS(exp10) < 100) ? 4U : 5U;
 8001e8e:	f04f 0805 	mov.w	r8, #5
        width - exp10_part_width :
 8001e92:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  idx = print_broken_up_decimal(decimal_part_components, out, buffer, idx, maxlen, precision, decimal_part_width, flags, buf, len);
 8001e94:	462a      	mov	r2, r5
        width - exp10_part_width :
 8001e96:	4598      	cmp	r8, r3
  idx = print_broken_up_decimal(decimal_part_components, out, buffer, idx, maxlen, precision, decimal_part_width, flags, buf, len);
 8001e98:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8001e9a:	4630      	mov	r0, r6
 8001e9c:	9309      	str	r3, [sp, #36]	; 0x24
 8001e9e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8001ea0:	4639      	mov	r1, r7
 8001ea2:	9308      	str	r3, [sp, #32]
 8001ea4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8001ea6:	f8cd b010 	str.w	fp, [sp, #16]
 8001eaa:	9305      	str	r3, [sp, #20]
 8001eac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001eae:	9300      	str	r3, [sp, #0]
 8001eb0:	4623      	mov	r3, r4
 8001eb2:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 8001eb4:	9407      	str	r4, [sp, #28]
 8001eb6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8001eb8:	e9cd a402 	strd	sl, r4, [sp, #8]
 8001ebc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8001ebe:	9401      	str	r4, [sp, #4]
        width - exp10_part_width :
 8001ec0:	d231      	bcs.n	8001f26 <print_exponential_number+0x65e>
 8001ec2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
    idx = print_integer(out, buffer, idx, maxlen,
 8001ec4:	f04f 0900 	mov.w	r9, #0
        width - exp10_part_width :
 8001ec8:	eba4 0408 	sub.w	r4, r4, r8
  idx = print_broken_up_decimal(decimal_part_components, out, buffer, idx, maxlen, precision, decimal_part_width, flags, buf, len);
 8001ecc:	9406      	str	r4, [sp, #24]
 8001ece:	f7ff fbe3 	bl	8001698 <print_broken_up_decimal.isra.0>
    idx = print_integer(out, buffer, idx, maxlen,
 8001ed2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
  idx = print_broken_up_decimal(decimal_part_components, out, buffer, idx, maxlen, precision, decimal_part_width, flags, buf, len);
 8001ed6:	4602      	mov	r2, r0
  if (! fall_back_to_decimal_only_mode) {
 8001ed8:	e79b      	b.n	8001e12 <print_exponential_number+0x54a>
      0U :
 8001eda:	f04f 0803 	mov.w	r8, #3
 8001ede:	e77e      	b.n	8001dde <print_exponential_number+0x516>
    exp10 = 0; // ... and no need to set a normalization factor or check the powers table
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	930b      	str	r3, [sp, #44]	; 0x2c
        (int) precision - 1 - exp10 :
 8001ee4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8001ee6:	3b01      	subs	r3, #1
    precision = (precision_ > 0 ? (unsigned) precision_ : 0U);
 8001ee8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001eec:	9326      	str	r3, [sp, #152]	; 0x98
    flags |= FLAGS_PRECISION;   // make sure print_broken_up_decimal respects our choice above
 8001eee:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8001ef0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ef4:	9328      	str	r3, [sp, #160]	; 0xa0
  normalization.multiply = (exp10 < 0 && abs_exp10_covered_by_powers_table);
 8001ef6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	f6ff ae29 	blt.w	8001b50 <print_exponential_number+0x288>
  bool should_skip_normalization = (fall_back_to_decimal_only_mode || exp10 == 0);
 8001efe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	f47f ae29 	bne.w	8001b58 <print_exponential_number+0x290>
 8001f06:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8001f0a:	e4ff      	b.n	800190c <print_exponential_number+0x44>
      result.raw_factor = extra_multiplicative_factor / sf.raw_factor;
 8001f0c:	464b      	mov	r3, r9
 8001f0e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8001f10:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8001f12:	9910      	ldr	r1, [sp, #64]	; 0x40
 8001f14:	f7fe fc62 	bl	80007dc <__aeabi_ddiv>
 8001f18:	e733      	b.n	8001d82 <print_exponential_number+0x4ba>
                ABS_FOR_PRINTING(exp10),
 8001f1a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001f1c:	17d3      	asrs	r3, r2, #31
 8001f1e:	4252      	negs	r2, r2
 8001f20:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001f24:	e785      	b.n	8001e32 <print_exponential_number+0x56a>
  idx = print_broken_up_decimal(decimal_part_components, out, buffer, idx, maxlen, precision, decimal_part_width, flags, buf, len);
 8001f26:	2500      	movs	r5, #0
 8001f28:	9506      	str	r5, [sp, #24]
 8001f2a:	f7ff fbb5 	bl	8001698 <print_broken_up_decimal.isra.0>
    idx = print_integer(out, buffer, idx, maxlen,
 8001f2e:	46a9      	mov	r9, r5
  idx = print_broken_up_decimal(decimal_part_components, out, buffer, idx, maxlen, precision, decimal_part_width, flags, buf, len);
 8001f30:	4602      	mov	r2, r0
    idx = print_integer(out, buffer, idx, maxlen,
 8001f32:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8001f36:	e76c      	b.n	8001e12 <print_exponential_number+0x54a>
    fall_back_to_decimal_only_mode = (exp10 >= -4 && exp10 < required_significant_digits);
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	bf38      	it	cc
 8001f3c:	2301      	movcc	r3, #1
 8001f3e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001f40:	429a      	cmp	r2, r3
 8001f42:	dacf      	bge.n	8001ee4 <print_exponential_number+0x61c>
        (int) precision - 1 - exp10 :
 8001f44:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8001f46:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001f48:	3b01      	subs	r3, #1
 8001f4a:	1a9b      	subs	r3, r3, r2
    precision = (precision_ > 0 ? (unsigned) precision_ : 0U);
 8001f4c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001f50:	9326      	str	r3, [sp, #152]	; 0x98
    flags |= FLAGS_PRECISION;   // make sure print_broken_up_decimal respects our choice above
 8001f52:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8001f54:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f58:	9328      	str	r3, [sp, #160]	; 0xa0
  normalization.multiply = (exp10 < 0 && abs_exp10_covered_by_powers_table);
 8001f5a:	e6af      	b.n	8001cbc <print_exponential_number+0x3f4>
 8001f5c:	08003d68 	.word	0x08003d68
 8001f60:	3fe00000 	.word	0x3fe00000
 8001f64:	00000000 	.word	0x00000000

08001f68 <print_floating_point>:
#endif  // PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS


static size_t print_floating_point(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int precision, unsigned int width, unsigned int flags, bool prefer_exponential)
{
 8001f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f6c:	b09d      	sub	sp, #116	; 0x74
 8001f6e:	e9dd 5428 	ldrd	r5, r4, [sp, #160]	; 0xa0
 8001f72:	940c      	str	r4, [sp, #48]	; 0x30
 8001f74:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8001f76:	e9dd ab26 	ldrd	sl, fp, [sp, #152]	; 0x98
 8001f7a:	940b      	str	r4, [sp, #44]	; 0x2c
 8001f7c:	f89d 40ac 	ldrb.w	r4, [sp, #172]	; 0xac
 8001f80:	4606      	mov	r6, r0
 8001f82:	460f      	mov	r7, r1
 8001f84:	4690      	mov	r8, r2
 8001f86:	4699      	mov	r9, r3
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;

  // test for special values
  if (value != value)
 8001f88:	4652      	mov	r2, sl
 8001f8a:	465b      	mov	r3, fp
 8001f8c:	4650      	mov	r0, sl
 8001f8e:	4659      	mov	r1, fp
{
 8001f90:	940d      	str	r4, [sp, #52]	; 0x34
  if (value != value)
 8001f92:	f7fe fd61 	bl	8000a58 <__aeabi_dcmpeq>
 8001f96:	2800      	cmp	r0, #0
 8001f98:	d07d      	beq.n	8002096 <print_floating_point+0x12e>
    return out_rev_(out, buffer, idx, maxlen, "nan", 3, width, flags);
  if (value < -DBL_MAX)
 8001f9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f9e:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8001fa2:	4650      	mov	r0, sl
 8001fa4:	4659      	mov	r1, fp
 8001fa6:	f7fe fd61 	bl	8000a6c <__aeabi_dcmplt>
 8001faa:	2800      	cmp	r0, #0
 8001fac:	f040 80a4 	bne.w	80020f8 <print_floating_point+0x190>
    return out_rev_(out, buffer, idx, maxlen, "fni-", 4, width, flags);
  if (value > DBL_MAX)
 8001fb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001fb4:	4650      	mov	r0, sl
 8001fb6:	4659      	mov	r1, fp
 8001fb8:	4b5f      	ldr	r3, [pc, #380]	; (8002138 <print_floating_point+0x1d0>)
 8001fba:	f7fe fd75 	bl	8000aa8 <__aeabi_dcmpgt>
 8001fbe:	bb38      	cbnz	r0, 8002010 <print_floating_point+0xa8>
    return out_rev_(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);

  if (!prefer_exponential && ((value > PRINTF_FLOAT_NOTATION_THRESHOLD) || (value < -PRINTF_FLOAT_NOTATION_THRESHOLD))) {
 8001fc0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d13e      	bne.n	8002044 <print_floating_point+0xdc>
 8001fc6:	a358      	add	r3, pc, #352	; (adr r3, 8002128 <print_floating_point+0x1c0>)
 8001fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fcc:	4650      	mov	r0, sl
 8001fce:	4659      	mov	r1, fp
 8001fd0:	f7fe fd6a 	bl	8000aa8 <__aeabi_dcmpgt>
 8001fd4:	b940      	cbnz	r0, 8001fe8 <print_floating_point+0x80>
 8001fd6:	a356      	add	r3, pc, #344	; (adr r3, 8002130 <print_floating_point+0x1c8>)
 8001fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fdc:	4650      	mov	r0, sl
 8001fde:	4659      	mov	r1, fp
 8001fe0:	f7fe fd44 	bl	8000a6c <__aeabi_dcmplt>
 8001fe4:	2800      	cmp	r0, #0
 8001fe6:	d02d      	beq.n	8002044 <print_floating_point+0xdc>
    // The required behavior of standard printf is to print _every_ integral-part digit -- which could mean
    // printing hundreds of characters, overflowing any fixed internal buffer and necessitating a more complicated
    // implementation.
#if PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS
    return print_exponential_number(out, buffer, idx, maxlen, value, precision, width, flags, buf, len);
 8001fe8:	2400      	movs	r4, #0
 8001fea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001fec:	9502      	str	r5, [sp, #8]
 8001fee:	9304      	str	r3, [sp, #16]
 8001ff0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001ff2:	ad14      	add	r5, sp, #80	; 0x50
 8001ff4:	9303      	str	r3, [sp, #12]
 8001ff6:	4642      	mov	r2, r8
 8001ff8:	464b      	mov	r3, r9
 8001ffa:	4639      	mov	r1, r7
 8001ffc:	4630      	mov	r0, r6
 8001ffe:	e9cd ab00 	strd	sl, fp, [sp]
 8002002:	e9cd 5405 	strd	r5, r4, [sp, #20]
 8002006:	f7ff fc5f 	bl	80018c8 <print_exponential_number>
#if PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS
    prefer_exponential ?
      print_exponential_number(out, buffer, idx, maxlen, value, precision, width, flags, buf, len) :
#endif
      print_decimal_number(out, buffer, idx, maxlen, value, precision, width, flags, buf, len);
}
 800200a:	b01d      	add	sp, #116	; 0x74
 800200c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return out_rev_(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8002010:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8002012:	4d4a      	ldr	r5, [pc, #296]	; (800213c <print_floating_point+0x1d4>)
 8002014:	f004 0a04 	and.w	sl, r4, #4
 8002018:	f1ba 0f00 	cmp.w	sl, #0
 800201c:	9429      	str	r4, [sp, #164]	; 0xa4
 800201e:	4c48      	ldr	r4, [pc, #288]	; (8002140 <print_floating_point+0x1d8>)
 8002020:	bf18      	it	ne
 8002022:	462c      	movne	r4, r5
 8002024:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002026:	9426      	str	r4, [sp, #152]	; 0x98
 8002028:	9328      	str	r3, [sp, #160]	; 0xa0
 800202a:	bf0c      	ite	eq
 800202c:	2403      	moveq	r4, #3
 800202e:	2404      	movne	r4, #4
 8002030:	464b      	mov	r3, r9
 8002032:	4642      	mov	r2, r8
 8002034:	4639      	mov	r1, r7
 8002036:	4630      	mov	r0, r6
 8002038:	9427      	str	r4, [sp, #156]	; 0x9c
}
 800203a:	b01d      	add	sp, #116	; 0x74
 800203c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return out_rev_(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8002040:	f7ff b91c 	b.w	800127c <out_rev_>
    precision = PRINTF_DEFAULT_FLOAT_PRECISION;
 8002044:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    buf[len++] = '0'; // This respects the precision in terms of result length only
 8002046:	2030      	movs	r0, #48	; 0x30
    precision = PRINTF_DEFAULT_FLOAT_PRECISION;
 8002048:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800204c:	bf08      	it	eq
 800204e:	2506      	moveq	r5, #6
 8002050:	ab14      	add	r3, sp, #80	; 0x50
 8002052:	462c      	mov	r4, r5
 8002054:	f1a5 0220 	sub.w	r2, r5, #32
 8002058:	e004      	b.n	8002064 <print_floating_point+0xfc>
    precision--;
 800205a:	3c01      	subs	r4, #1
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (precision > PRINTF_MAX_SUPPORTED_PRECISION)) {
 800205c:	4294      	cmp	r4, r2
    buf[len++] = '0'; // This respects the precision in terms of result length only
 800205e:	f803 0b01 	strb.w	r0, [r3], #1
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (precision > PRINTF_MAX_SUPPORTED_PRECISION)) {
 8002062:	d05a      	beq.n	800211a <print_floating_point+0x1b2>
 8002064:	2c11      	cmp	r4, #17
 8002066:	eba5 0104 	sub.w	r1, r5, r4
 800206a:	d8f6      	bhi.n	800205a <print_floating_point+0xf2>
      print_exponential_number(out, buffer, idx, maxlen, value, precision, width, flags, buf, len) :
 800206c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800206e:	b31b      	cbz	r3, 80020b8 <print_floating_point+0x150>
 8002070:	ab14      	add	r3, sp, #80	; 0x50
 8002072:	9305      	str	r3, [sp, #20]
 8002074:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002076:	9106      	str	r1, [sp, #24]
 8002078:	9304      	str	r3, [sp, #16]
 800207a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800207c:	4642      	mov	r2, r8
 800207e:	9303      	str	r3, [sp, #12]
 8002080:	4639      	mov	r1, r7
 8002082:	464b      	mov	r3, r9
 8002084:	4630      	mov	r0, r6
 8002086:	e9cd ab00 	strd	sl, fp, [sp]
 800208a:	9402      	str	r4, [sp, #8]
 800208c:	f7ff fc1c 	bl	80018c8 <print_exponential_number>
}
 8002090:	b01d      	add	sp, #116	; 0x74
 8002092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return out_rev_(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8002096:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002098:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800209a:	9329      	str	r3, [sp, #164]	; 0xa4
 800209c:	9428      	str	r4, [sp, #160]	; 0xa0
 800209e:	464b      	mov	r3, r9
 80020a0:	2403      	movs	r4, #3
 80020a2:	4642      	mov	r2, r8
 80020a4:	4639      	mov	r1, r7
 80020a6:	4630      	mov	r0, r6
 80020a8:	4d26      	ldr	r5, [pc, #152]	; (8002144 <print_floating_point+0x1dc>)
    return out_rev_(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 80020aa:	9427      	str	r4, [sp, #156]	; 0x9c
    return out_rev_(out, buffer, idx, maxlen, "nan", 3, width, flags);
 80020ac:	9526      	str	r5, [sp, #152]	; 0x98
}
 80020ae:	b01d      	add	sp, #116	; 0x74
 80020b0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return out_rev_(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 80020b4:	f7ff b8e2 	b.w	800127c <out_rev_>
  struct double_components value_ = get_components(number, precision);
 80020b8:	4652      	mov	r2, sl
 80020ba:	465b      	mov	r3, fp
 80020bc:	a80e      	add	r0, sp, #56	; 0x38
 80020be:	9400      	str	r4, [sp, #0]
 80020c0:	910d      	str	r1, [sp, #52]	; 0x34
 80020c2:	f7ff fa55 	bl	8001570 <get_components>
  return print_broken_up_decimal(value_, out, buffer, idx, maxlen, precision, width, flags, buf, len);
 80020c6:	ab14      	add	r3, sp, #80	; 0x50
 80020c8:	9308      	str	r3, [sp, #32]
 80020ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80020cc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80020ce:	9307      	str	r3, [sp, #28]
 80020d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80020d2:	9109      	str	r1, [sp, #36]	; 0x24
 80020d4:	e9cd 4305 	strd	r4, r3, [sp, #20]
 80020d8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80020dc:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 80020e0:	e9cd 8903 	strd	r8, r9, [sp, #12]
 80020e4:	9300      	str	r3, [sp, #0]
 80020e6:	e9cd 6701 	strd	r6, r7, [sp, #4]
 80020ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80020ee:	f7ff fad3 	bl	8001698 <print_broken_up_decimal.isra.0>
}
 80020f2:	b01d      	add	sp, #116	; 0x74
 80020f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return out_rev_(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 80020f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80020fa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80020fc:	9329      	str	r3, [sp, #164]	; 0xa4
 80020fe:	9428      	str	r4, [sp, #160]	; 0xa0
 8002100:	464b      	mov	r3, r9
 8002102:	2404      	movs	r4, #4
 8002104:	4642      	mov	r2, r8
 8002106:	4639      	mov	r1, r7
 8002108:	4630      	mov	r0, r6
 800210a:	4d0f      	ldr	r5, [pc, #60]	; (8002148 <print_floating_point+0x1e0>)
    return out_rev_(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 800210c:	9427      	str	r4, [sp, #156]	; 0x9c
    return out_rev_(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 800210e:	9526      	str	r5, [sp, #152]	; 0x98
}
 8002110:	b01d      	add	sp, #116	; 0x74
 8002112:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return out_rev_(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8002116:	f7ff b8b1 	b.w	800127c <out_rev_>
      print_exponential_number(out, buffer, idx, maxlen, value, precision, width, flags, buf, len) :
 800211a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800211c:	2120      	movs	r1, #32
 800211e:	2b00      	cmp	r3, #0
 8002120:	d0ca      	beq.n	80020b8 <print_floating_point+0x150>
 8002122:	e7a5      	b.n	8002070 <print_floating_point+0x108>
 8002124:	f3af 8000 	nop.w
 8002128:	00000000 	.word	0x00000000
 800212c:	41cdcd65 	.word	0x41cdcd65
 8002130:	00000000 	.word	0x00000000
 8002134:	c1cdcd65 	.word	0xc1cdcd65
 8002138:	7fefffff 	.word	0x7fefffff
 800213c:	08003d44 	.word	0x08003d44
 8002140:	08003d40 	.word	0x08003d40
 8002144:	08003d4c 	.word	0x08003d4c
 8002148:	08003d50 	.word	0x08003d50

0800214c <rt_vsnprintf>:
#if (RTTHREAD_VERSION >= 40100) || (RTTHREAD_VERSION < 40000 && RTTHREAD_VERSION >= 30106)
int rt_vsnprintf(char *buf, rt_size_t size, const char *fmt, va_list args)
#else
rt_int32_t rt_vsnprintf(char *buf, rt_size_t size, const char *fmt, va_list args)
#endif
{
 800214c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    out = out_discard;
 8002150:	f1b0 0a00 	subs.w	sl, r0, #0
{
 8002154:	461f      	mov	r7, r3
    out = out_discard;
 8002156:	4e82      	ldr	r6, [pc, #520]	; (8002360 <rt_vsnprintf+0x214>)
 8002158:	4b82      	ldr	r3, [pc, #520]	; (8002364 <rt_vsnprintf+0x218>)
  while (*format)
 800215a:	7810      	ldrb	r0, [r2, #0]
    out = out_discard;
 800215c:	bf14      	ite	ne
 800215e:	46b3      	movne	fp, r6
 8002160:	469b      	moveq	fp, r3
{
 8002162:	4689      	mov	r9, r1
 8002164:	b08f      	sub	sp, #60	; 0x3c
  while (*format)
 8002166:	2800      	cmp	r0, #0
 8002168:	f000 828a 	beq.w	8002680 <rt_vsnprintf+0x534>
 800216c:	4614      	mov	r4, r2
 800216e:	2500      	movs	r5, #0
          idx = out_rev_(out, buffer, idx, maxlen, ")llun(", 6, width, flags);
 8002170:	460e      	mov	r6, r1
 8002172:	e009      	b.n	8002188 <rt_vsnprintf+0x3c>
      out(*format, buffer, idx++, maxlen);
 8002174:	462a      	mov	r2, r5
 8002176:	4633      	mov	r3, r6
 8002178:	4651      	mov	r1, sl
 800217a:	47d8      	blx	fp
 800217c:	3501      	adds	r5, #1
      format++;
 800217e:	3401      	adds	r4, #1
  while (*format)
 8002180:	7820      	ldrb	r0, [r4, #0]
 8002182:	2800      	cmp	r0, #0
 8002184:	f000 80ac 	beq.w	80022e0 <rt_vsnprintf+0x194>
    if (*format != '%') {
 8002188:	2825      	cmp	r0, #37	; 0x25
 800218a:	d1f3      	bne.n	8002174 <rt_vsnprintf+0x28>
    flags = 0U;
 800218c:	2100      	movs	r1, #0
      format++;
 800218e:	1c63      	adds	r3, r4, #1
 8002190:	461c      	mov	r4, r3
      switch (*format) {
 8002192:	f813 0b01 	ldrb.w	r0, [r3], #1
 8002196:	f1a0 0220 	sub.w	r2, r0, #32
 800219a:	2a10      	cmp	r2, #16
 800219c:	d80a      	bhi.n	80021b4 <rt_vsnprintf+0x68>
 800219e:	e8df f002 	tbb	[pc, r2]
 80021a2:	099c      	.short	0x099c
 80021a4:	09099909 	.word	0x09099909
 80021a8:	09090909 	.word	0x09090909
 80021ac:	93099609 	.word	0x93099609
 80021b0:	0909      	.short	0x0909
 80021b2:	90          	.byte	0x90
 80021b3:	00          	.byte	0x00
    if (is_digit_(*format)) {
 80021b4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80021b8:	2b09      	cmp	r3, #9
 80021ba:	f240 80af 	bls.w	800231c <rt_vsnprintf+0x1d0>
    else if (*format == '*') {
 80021be:	282a      	cmp	r0, #42	; 0x2a
 80021c0:	f000 80bb 	beq.w	800233a <rt_vsnprintf+0x1ee>
    width = 0U;
 80021c4:	f04f 0800 	mov.w	r8, #0
    if (*format == '.') {
 80021c8:	282e      	cmp	r0, #46	; 0x2e
 80021ca:	f000 8098 	beq.w	80022fe <rt_vsnprintf+0x1b2>
    precision = 0U;
 80021ce:	f04f 0900 	mov.w	r9, #0
    switch (*format) {
 80021d2:	f1a0 0368 	sub.w	r3, r0, #104	; 0x68
 80021d6:	2b12      	cmp	r3, #18
 80021d8:	d818      	bhi.n	800220c <rt_vsnprintf+0xc0>
 80021da:	e8df f013 	tbh	[pc, r3, lsl #1]
 80021de:	0101      	.short	0x0101
 80021e0:	00fc0017 	.word	0x00fc0017
 80021e4:	01090017 	.word	0x01090017
 80021e8:	00170017 	.word	0x00170017
 80021ec:	00170017 	.word	0x00170017
 80021f0:	00170017 	.word	0x00170017
 80021f4:	00130017 	.word	0x00130017
 80021f8:	00170017 	.word	0x00170017
 80021fc:	00170017 	.word	0x00170017
 8002200:	00130017 	.word	0x00130017
    switch (*format) {
 8002204:	7860      	ldrb	r0, [r4, #1]
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8002206:	f441 7180 	orr.w	r1, r1, #256	; 0x100
        format++;
 800220a:	3401      	adds	r4, #1
    switch (*format) {
 800220c:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 8002210:	2b53      	cmp	r3, #83	; 0x53
 8002212:	f200 809e 	bhi.w	8002352 <rt_vsnprintf+0x206>
 8002216:	e8df f013 	tbh	[pc, r3, lsl #1]
 800221a:	0190      	.short	0x0190
 800221c:	009c009c 	.word	0x009c009c
 8002220:	009c009c 	.word	0x009c009c
 8002224:	009c009c 	.word	0x009c009c
 8002228:	009c009c 	.word	0x009c009c
 800222c:	009c009c 	.word	0x009c009c
 8002230:	009c009c 	.word	0x009c009c
 8002234:	009c009c 	.word	0x009c009c
 8002238:	009c009c 	.word	0x009c009c
 800223c:	009c009c 	.word	0x009c009c
 8002240:	009c009c 	.word	0x009c009c
 8002244:	009c009c 	.word	0x009c009c
 8002248:	009c009c 	.word	0x009c009c
 800224c:	009c009c 	.word	0x009c009c
 8002250:	009c009c 	.word	0x009c009c
 8002254:	009c009c 	.word	0x009c009c
 8002258:	01a9009c 	.word	0x01a9009c
 800225c:	01a900f3 	.word	0x01a900f3
 8002260:	009c009c 	.word	0x009c009c
 8002264:	009c009c 	.word	0x009c009c
 8002268:	009c009c 	.word	0x009c009c
 800226c:	009c009c 	.word	0x009c009c
 8002270:	009c009c 	.word	0x009c009c
 8002274:	009c009c 	.word	0x009c009c
 8002278:	009c009c 	.word	0x009c009c
 800227c:	009c009c 	.word	0x009c009c
 8002280:	009c00a7 	.word	0x009c00a7
 8002284:	009c009c 	.word	0x009c009c
 8002288:	009c009c 	.word	0x009c009c
 800228c:	009c009c 	.word	0x009c009c
 8002290:	009c009c 	.word	0x009c009c
 8002294:	012a00a7 	.word	0x012a00a7
 8002298:	01a900a7 	.word	0x01a900a7
 800229c:	01a900f3 	.word	0x01a900f3
 80022a0:	00a7009c 	.word	0x00a7009c
 80022a4:	009c009c 	.word	0x009c009c
 80022a8:	009c009c 	.word	0x009c009c
 80022ac:	00a7009c 	.word	0x00a7009c
 80022b0:	009c010d 	.word	0x009c010d
 80022b4:	0146009c 	.word	0x0146009c
 80022b8:	00a7009c 	.word	0x00a7009c
 80022bc:	009c009c 	.word	0x009c009c
 80022c0:	00a7      	.short	0x00a7
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 80022c2:	f041 0101 	orr.w	r1, r1, #1
    } while (n);
 80022c6:	e763      	b.n	8002190 <rt_vsnprintf+0x44>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 80022c8:	f041 0102 	orr.w	r1, r1, #2
    } while (n);
 80022cc:	e760      	b.n	8002190 <rt_vsnprintf+0x44>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 80022ce:	f041 0104 	orr.w	r1, r1, #4
    } while (n);
 80022d2:	e75d      	b.n	8002190 <rt_vsnprintf+0x44>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 80022d4:	f041 0110 	orr.w	r1, r1, #16
    } while (n);
 80022d8:	e75a      	b.n	8002190 <rt_vsnprintf+0x44>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 80022da:	f041 0108 	orr.w	r1, r1, #8
    } while (n);
 80022de:	e757      	b.n	8002190 <rt_vsnprintf+0x44>
  return (int)idx;
 80022e0:	46b1      	mov	r9, r6
 80022e2:	462c      	mov	r4, r5
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 80022e4:	45a9      	cmp	r9, r5
 80022e6:	d801      	bhi.n	80022ec <rt_vsnprintf+0x1a0>
 80022e8:	f109 35ff 	add.w	r5, r9, #4294967295	; 0xffffffff
 80022ec:	464b      	mov	r3, r9
 80022ee:	462a      	mov	r2, r5
 80022f0:	4651      	mov	r1, sl
 80022f2:	2000      	movs	r0, #0
 80022f4:	47d8      	blx	fp
  return __vsnprintf(out_buffer, buf, size, fmt, args);
}
 80022f6:	4620      	mov	r0, r4
 80022f8:	b00f      	add	sp, #60	; 0x3c
 80022fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (is_digit_(*format)) {
 80022fe:	7860      	ldrb	r0, [r4, #1]
      flags |= FLAGS_PRECISION;
 8002300:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
      if (is_digit_(*format)) {
 8002304:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
 8002308:	2a09      	cmp	r2, #9
      format++;
 800230a:	f104 0301 	add.w	r3, r4, #1
      if (is_digit_(*format)) {
 800230e:	f240 811d 	bls.w	800254c <rt_vsnprintf+0x400>
      else if (*format == '*') {
 8002312:	282a      	cmp	r0, #42	; 0x2a
 8002314:	f000 8141 	beq.w	800259a <rt_vsnprintf+0x44e>
      format++;
 8002318:	461c      	mov	r4, r3
 800231a:	e758      	b.n	80021ce <rt_vsnprintf+0x82>
  unsigned int i = 0U;
 800231c:	f04f 0800 	mov.w	r8, #0
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8002320:	eb08 0888 	add.w	r8, r8, r8, lsl #2
 8002324:	eb00 0848 	add.w	r8, r0, r8, lsl #1
  while (is_digit_(**str)) {
 8002328:	f814 0f01 	ldrb.w	r0, [r4, #1]!
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 800232c:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
  while (is_digit_(**str)) {
 8002330:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8002334:	2b09      	cmp	r3, #9
 8002336:	d9f3      	bls.n	8002320 <rt_vsnprintf+0x1d4>
 8002338:	e746      	b.n	80021c8 <rt_vsnprintf+0x7c>
      const int w = va_arg(va, int);
 800233a:	f857 3b04 	ldr.w	r3, [r7], #4
    if (*format == '.') {
 800233e:	7860      	ldrb	r0, [r4, #1]
      if (w < 0) {
 8002340:	2b00      	cmp	r3, #0
        width = (unsigned int)w;
 8002342:	bfae      	itee	ge
 8002344:	4698      	movge	r8, r3
        flags |= FLAGS_LEFT;    // reverse padding
 8002346:	f041 0102 	orrlt.w	r1, r1, #2
        width = (unsigned int)-w;
 800234a:	f1c3 0800 	rsblt	r8, r3, #0
      format++;
 800234e:	3401      	adds	r4, #1
 8002350:	e73a      	b.n	80021c8 <rt_vsnprintf+0x7c>
        out(*format, buffer, idx++, maxlen);
 8002352:	462a      	mov	r2, r5
 8002354:	4633      	mov	r3, r6
 8002356:	4651      	mov	r1, sl
        format++;
 8002358:	3401      	adds	r4, #1
        out(*format, buffer, idx++, maxlen);
 800235a:	3501      	adds	r5, #1
 800235c:	47d8      	blx	fp
        break;
 800235e:	e70f      	b.n	8002180 <rt_vsnprintf+0x34>
 8002360:	08001271 	.word	0x08001271
 8002364:	08001279 	.word	0x08001279
        if (*format == 'x' || *format == 'X') {
 8002368:	2878      	cmp	r0, #120	; 0x78
 800236a:	f000 812d 	beq.w	80025c8 <rt_vsnprintf+0x47c>
 800236e:	2858      	cmp	r0, #88	; 0x58
 8002370:	f000 8189 	beq.w	8002686 <rt_vsnprintf+0x53a>
        else if (*format == 'o') {
 8002374:	286f      	cmp	r0, #111	; 0x6f
 8002376:	f000 81ad 	beq.w	80026d4 <rt_vsnprintf+0x588>
        else if (*format == 'b') {
 800237a:	2862      	cmp	r0, #98	; 0x62
 800237c:	f000 8208 	beq.w	8002790 <rt_vsnprintf+0x644>
        if ((*format != 'i') && (*format != 'd')) {
 8002380:	2869      	cmp	r0, #105	; 0x69
          base = BASE_DECIMAL;
 8002382:	f04f 020a 	mov.w	r2, #10
          flags &= ~FLAGS_HASH;   // no hash for dec format
 8002386:	f021 0310 	bic.w	r3, r1, #16
        if ((*format != 'i') && (*format != 'd')) {
 800238a:	f040 81a5 	bne.w	80026d8 <rt_vsnprintf+0x58c>
        if (flags & FLAGS_PRECISION) {
 800238e:	0549      	lsls	r1, r1, #21
 8002390:	f100 811f 	bmi.w	80025d2 <rt_vsnprintf+0x486>
          if (flags & FLAGS_LONG_LONG) {
 8002394:	0599      	lsls	r1, r3, #22
 8002396:	f100 81a8 	bmi.w	80026ea <rt_vsnprintf+0x59e>
          else if (flags & FLAGS_LONG) {
 800239a:	05d8      	lsls	r0, r3, #23
            const long value = va_arg(va, long);
 800239c:	f857 1b04 	ldr.w	r1, [r7], #4
          else if (flags & FLAGS_LONG) {
 80023a0:	d403      	bmi.n	80023aa <rt_vsnprintf+0x25e>
            const int value = (flags & FLAGS_CHAR) ? (signed char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 80023a2:	0658      	lsls	r0, r3, #25
 80023a4:	f140 81b7 	bpl.w	8002716 <rt_vsnprintf+0x5ca>
 80023a8:	b249      	sxtb	r1, r1
            idx = print_integer(out, buffer, idx, maxlen, ABS_FOR_PRINTING(value), value < 0, base, precision, width, flags);
 80023aa:	2900      	cmp	r1, #0
 80023ac:	f340 81d5 	ble.w	800275a <rt_vsnprintf+0x60e>
 80023b0:	468c      	mov	ip, r1
 80023b2:	17c8      	asrs	r0, r1, #31
            idx = print_integer(out, buffer, idx, maxlen, ABS_FOR_PRINTING(value), value < 0, base, precision, width, flags);
 80023b4:	e9cd 2903 	strd	r2, r9, [sp, #12]
 80023b8:	462a      	mov	r2, r5
 80023ba:	e9cd 8305 	strd	r8, r3, [sp, #20]
 80023be:	e9cd c000 	strd	ip, r0, [sp]
 80023c2:	0fc9      	lsrs	r1, r1, #31
 80023c4:	9102      	str	r1, [sp, #8]
          print_integer(out, buffer, idx, maxlen, (printf_unsigned_value_t) value, false, BASE_HEX, precision, width, flags);
 80023c6:	4633      	mov	r3, r6
 80023c8:	4651      	mov	r1, sl
 80023ca:	4658      	mov	r0, fp
 80023cc:	f7fe ff9a 	bl	8001304 <print_integer>
 80023d0:	4605      	mov	r5, r0
        format++;
 80023d2:	3401      	adds	r4, #1
        break;
 80023d4:	e6d4      	b.n	8002180 <rt_vsnprintf+0x34>
    switch (*format) {
 80023d6:	7860      	ldrb	r0, [r4, #1]
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80023d8:	f441 7100 	orr.w	r1, r1, #512	; 0x200
        format++;
 80023dc:	3401      	adds	r4, #1
        break;
 80023de:	e715      	b.n	800220c <rt_vsnprintf+0xc0>
        if (*format == 'h') {
 80023e0:	7860      	ldrb	r0, [r4, #1]
 80023e2:	2868      	cmp	r0, #104	; 0x68
 80023e4:	f000 8142 	beq.w	800266c <rt_vsnprintf+0x520>
        flags |= FLAGS_SHORT;
 80023e8:	f041 0180 	orr.w	r1, r1, #128	; 0x80
        format++;
 80023ec:	3401      	adds	r4, #1
 80023ee:	e70d      	b.n	800220c <rt_vsnprintf+0xc0>
        if (*format == 'l') {
 80023f0:	7860      	ldrb	r0, [r4, #1]
 80023f2:	286c      	cmp	r0, #108	; 0x6c
 80023f4:	f000 813f 	beq.w	8002676 <rt_vsnprintf+0x52a>
        flags |= FLAGS_LONG;
 80023f8:	f441 7180 	orr.w	r1, r1, #256	; 0x100
        format++;
 80023fc:	3401      	adds	r4, #1
 80023fe:	e705      	b.n	800220c <rt_vsnprintf+0xc0>
        idx = print_floating_point(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags, PRINTF_PREFER_DECIMAL);
 8002400:	462a      	mov	r2, r5
 8002402:	2300      	movs	r3, #0
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8002404:	2846      	cmp	r0, #70	; 0x46
 8002406:	bf08      	it	eq
 8002408:	f041 0120 	orreq.w	r1, r1, #32
        idx = print_floating_point(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags, PRINTF_PREFER_DECIMAL);
 800240c:	e9cd 8103 	strd	r8, r1, [sp, #12]
 8002410:	3707      	adds	r7, #7
 8002412:	f8cd 9008 	str.w	r9, [sp, #8]
 8002416:	f027 0707 	bic.w	r7, r7, #7
        format++;
 800241a:	3401      	adds	r4, #1
        idx = print_floating_point(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags, PRINTF_PREFER_EXPONENTIAL);
 800241c:	9305      	str	r3, [sp, #20]
 800241e:	e8f7 8902 	ldrd	r8, r9, [r7], #8
 8002422:	4633      	mov	r3, r6
 8002424:	4651      	mov	r1, sl
 8002426:	4658      	mov	r0, fp
 8002428:	e9cd 8900 	strd	r8, r9, [sp]
 800242c:	f7ff fd9c 	bl	8001f68 <print_floating_point>
 8002430:	4605      	mov	r5, r0
        break;
 8002432:	e6a5      	b.n	8002180 <rt_vsnprintf+0x34>
        uintptr_t value = (uintptr_t)va_arg(va, void*);
 8002434:	f857 3b04 	ldr.w	r3, [r7], #4
        flags |= FLAGS_ZEROPAD | FLAGS_POINTER;
 8002438:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 800243c:	f041 0101 	orr.w	r1, r1, #1
          out_rev_(out, buffer, idx, maxlen, ")lin(", 5, width, flags) :
 8002440:	2b00      	cmp	r3, #0
 8002442:	f000 80ed 	beq.w	8002620 <rt_vsnprintf+0x4d4>
          print_integer(out, buffer, idx, maxlen, (printf_unsigned_value_t) value, false, BASE_HEX, precision, width, flags);
 8002446:	9300      	str	r3, [sp, #0]
 8002448:	2300      	movs	r3, #0
 800244a:	9106      	str	r1, [sp, #24]
 800244c:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8002450:	210a      	movs	r1, #10
 8002452:	2310      	movs	r3, #16
 8002454:	462a      	mov	r2, r5
 8002456:	9105      	str	r1, [sp, #20]
 8002458:	9303      	str	r3, [sp, #12]
 800245a:	4651      	mov	r1, sl
 800245c:	4633      	mov	r3, r6
 800245e:	4658      	mov	r0, fp
 8002460:	f8cd 9010 	str.w	r9, [sp, #16]
 8002464:	f7fe ff4e 	bl	8001304 <print_integer>
        format++;
 8002468:	3401      	adds	r4, #1
          print_integer(out, buffer, idx, maxlen, (printf_unsigned_value_t) value, false, BASE_HEX, precision, width, flags);
 800246a:	4605      	mov	r5, r0
        break;
 800246c:	e688      	b.n	8002180 <rt_vsnprintf+0x34>
        if (!(flags & FLAGS_LEFT)) {
 800246e:	078b      	lsls	r3, r1, #30
 8002470:	f140 8118 	bpl.w	80026a4 <rt_vsnprintf+0x558>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8002474:	f857 0b04 	ldr.w	r0, [r7], #4
 8002478:	462a      	mov	r2, r5
 800247a:	4633      	mov	r3, r6
 800247c:	4651      	mov	r1, sl
 800247e:	b2c0      	uxtb	r0, r0
 8002480:	47d8      	blx	fp
 8002482:	f105 0901 	add.w	r9, r5, #1
          while (l++ < width) {
 8002486:	f1b8 0f01 	cmp.w	r8, #1
 800248a:	bf98      	it	ls
 800248c:	464d      	movls	r5, r9
 800248e:	d9a0      	bls.n	80023d2 <rt_vsnprintf+0x286>
 8002490:	4445      	add	r5, r8
            out(' ', buffer, idx++, maxlen);
 8002492:	464a      	mov	r2, r9
 8002494:	4633      	mov	r3, r6
 8002496:	4651      	mov	r1, sl
 8002498:	2020      	movs	r0, #32
 800249a:	f109 0901 	add.w	r9, r9, #1
 800249e:	47d8      	blx	fp
          while (l++ < width) {
 80024a0:	45a9      	cmp	r9, r5
 80024a2:	d1f6      	bne.n	8002492 <rt_vsnprintf+0x346>
 80024a4:	e795      	b.n	80023d2 <rt_vsnprintf+0x286>
        const char* p = va_arg(va, char*);
 80024a6:	463a      	mov	r2, r7
 80024a8:	f852 3b04 	ldr.w	r3, [r2], #4
 80024ac:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
        if (p == NULL) {
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d079      	beq.n	80025a8 <rt_vsnprintf+0x45c>
  for (s = str; *s && maxsize--; ++s);
 80024b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80024b6:	7818      	ldrb	r0, [r3, #0]
          unsigned int l = strnlen_s_(p, precision ? precision : (size_t)-1);
 80024b8:	f1b9 0f00 	cmp.w	r9, #0
 80024bc:	f040 80ec 	bne.w	8002698 <rt_vsnprintf+0x54c>
  for (s = str; *s && maxsize--; ++s);
 80024c0:	f06f 0301 	mvn.w	r3, #1
 80024c4:	2800      	cmp	r0, #0
 80024c6:	f000 817a 	beq.w	80027be <rt_vsnprintf+0x672>
 80024ca:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80024cc:	3301      	adds	r3, #1
 80024ce:	18fa      	adds	r2, r7, r3
 80024d0:	e001      	b.n	80024d6 <rt_vsnprintf+0x38a>
 80024d2:	4297      	cmp	r7, r2
 80024d4:	d003      	beq.n	80024de <rt_vsnprintf+0x392>
 80024d6:	f817 3f01 	ldrb.w	r3, [r7, #1]!
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d1f9      	bne.n	80024d2 <rt_vsnprintf+0x386>
  return (unsigned int)(s - str);
 80024de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80024e0:	1afb      	subs	r3, r7, r3
 80024e2:	930b      	str	r3, [sp, #44]	; 0x2c
          if (flags & FLAGS_PRECISION) {
 80024e4:	f411 6380 	ands.w	r3, r1, #1024	; 0x400
 80024e8:	930c      	str	r3, [sp, #48]	; 0x30
 80024ea:	d004      	beq.n	80024f6 <rt_vsnprintf+0x3aa>
            l = (l < precision ? l : precision);
 80024ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80024ee:	454b      	cmp	r3, r9
 80024f0:	bf28      	it	cs
 80024f2:	464b      	movcs	r3, r9
 80024f4:	930b      	str	r3, [sp, #44]	; 0x2c
          if (!(flags & FLAGS_LEFT)) {
 80024f6:	f011 0302 	ands.w	r3, r1, #2
 80024fa:	930d      	str	r3, [sp, #52]	; 0x34
 80024fc:	f000 8114 	beq.w	8002728 <rt_vsnprintf+0x5dc>
          while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8002500:	2800      	cmp	r0, #0
 8002502:	f000 80a3 	beq.w	800264c <rt_vsnprintf+0x500>
 8002506:	4623      	mov	r3, r4
 8002508:	462a      	mov	r2, r5
 800250a:	464c      	mov	r4, r9
 800250c:	4699      	mov	r9, r3
 800250e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8002510:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8002514:	46b0      	mov	r8, r6
 8002516:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8002518:	b126      	cbz	r6, 8002524 <rt_vsnprintf+0x3d8>
 800251a:	1e61      	subs	r1, r4, #1
 800251c:	2c00      	cmp	r4, #0
 800251e:	f000 808e 	beq.w	800263e <rt_vsnprintf+0x4f2>
 8002522:	460c      	mov	r4, r1
            out(*(p++), buffer, idx++, maxlen);
 8002524:	4643      	mov	r3, r8
 8002526:	4651      	mov	r1, sl
 8002528:	47d8      	blx	fp
          while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800252a:	f817 0f01 	ldrb.w	r0, [r7, #1]!
            out(*(p++), buffer, idx++, maxlen);
 800252e:	3501      	adds	r5, #1
          while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8002530:	2800      	cmp	r0, #0
 8002532:	f000 8084 	beq.w	800263e <rt_vsnprintf+0x4f2>
            out(*(p++), buffer, idx++, maxlen);
 8002536:	462a      	mov	r2, r5
 8002538:	e7ee      	b.n	8002518 <rt_vsnprintf+0x3cc>
        out('%', buffer, idx++, maxlen);
 800253a:	1c68      	adds	r0, r5, #1
 800253c:	462a      	mov	r2, r5
 800253e:	4633      	mov	r3, r6
 8002540:	4605      	mov	r5, r0
 8002542:	4651      	mov	r1, sl
 8002544:	2025      	movs	r0, #37	; 0x25
        format++;
 8002546:	3401      	adds	r4, #1
        out('%', buffer, idx++, maxlen);
 8002548:	47d8      	blx	fp
        break;
 800254a:	e619      	b.n	8002180 <rt_vsnprintf+0x34>
  unsigned int i = 0U;
 800254c:	f04f 0900 	mov.w	r9, #0
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8002550:	eb09 0989 	add.w	r9, r9, r9, lsl #2
 8002554:	eb00 0949 	add.w	r9, r0, r9, lsl #1
  while (is_digit_(**str)) {
 8002558:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 800255c:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
  while (is_digit_(**str)) {
 8002560:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
 8002564:	2a09      	cmp	r2, #9
 8002566:	d9f3      	bls.n	8002550 <rt_vsnprintf+0x404>
 8002568:	461c      	mov	r4, r3
 800256a:	e632      	b.n	80021d2 <rt_vsnprintf+0x86>
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 800256c:	f000 03df 	and.w	r3, r0, #223	; 0xdf
 8002570:	2b47      	cmp	r3, #71	; 0x47
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 8002572:	bf04      	itt	eq
 8002574:	f000 00fd 	andeq.w	r0, r0, #253	; 0xfd
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 8002578:	f441 6100 	orreq.w	r1, r1, #2048	; 0x800
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 800257c:	2845      	cmp	r0, #69	; 0x45
 800257e:	bf08      	it	eq
 8002580:	f041 0120 	orreq.w	r1, r1, #32
        idx = print_floating_point(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags, PRINTF_PREFER_EXPONENTIAL);
 8002584:	3707      	adds	r7, #7
 8002586:	462a      	mov	r2, r5
 8002588:	2301      	movs	r3, #1
 800258a:	e9cd 8103 	strd	r8, r1, [sp, #12]
 800258e:	f8cd 9008 	str.w	r9, [sp, #8]
 8002592:	f027 0707 	bic.w	r7, r7, #7
        format++;
 8002596:	3401      	adds	r4, #1
 8002598:	e740      	b.n	800241c <rt_vsnprintf+0x2d0>
        precision = precision_ > 0 ? (unsigned int)precision_ : 0U;
 800259a:	f857 3b04 	ldr.w	r3, [r7], #4
    switch (*format) {
 800259e:	78a0      	ldrb	r0, [r4, #2]
        precision = precision_ > 0 ? (unsigned int)precision_ : 0U;
 80025a0:	ea23 79e3 	bic.w	r9, r3, r3, asr #31
        format++;
 80025a4:	3402      	adds	r4, #2
 80025a6:	e614      	b.n	80021d2 <rt_vsnprintf+0x86>
          idx = out_rev_(out, buffer, idx, maxlen, ")llun(", 6, width, flags);
 80025a8:	4b8a      	ldr	r3, [pc, #552]	; (80027d4 <rt_vsnprintf+0x688>)
 80025aa:	462a      	mov	r2, r5
 80025ac:	9300      	str	r3, [sp, #0]
 80025ae:	2306      	movs	r3, #6
 80025b0:	e9cd 8102 	strd	r8, r1, [sp, #8]
 80025b4:	9301      	str	r3, [sp, #4]
 80025b6:	4651      	mov	r1, sl
 80025b8:	4633      	mov	r3, r6
 80025ba:	4658      	mov	r0, fp
 80025bc:	f7fe fe5e 	bl	800127c <out_rev_>
 80025c0:	4605      	mov	r5, r0
        const char* p = va_arg(va, char*);
 80025c2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
        format++;
 80025c4:	3401      	adds	r4, #1
        break;
 80025c6:	e5db      	b.n	8002180 <rt_vsnprintf+0x34>
          base = BASE_HEX;
 80025c8:	2210      	movs	r2, #16
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 80025ca:	f021 030c 	bic.w	r3, r1, #12
        if (flags & FLAGS_PRECISION) {
 80025ce:	0549      	lsls	r1, r1, #21
 80025d0:	d501      	bpl.n	80025d6 <rt_vsnprintf+0x48a>
          flags &= ~FLAGS_ZEROPAD;
 80025d2:	f023 0301 	bic.w	r3, r3, #1
        if ((*format == 'i') || (*format == 'd')) {
 80025d6:	2869      	cmp	r0, #105	; 0x69
 80025d8:	f43f aedc 	beq.w	8002394 <rt_vsnprintf+0x248>
 80025dc:	2864      	cmp	r0, #100	; 0x64
 80025de:	f43f aed9 	beq.w	8002394 <rt_vsnprintf+0x248>
          if (flags & FLAGS_LONG_LONG) {
 80025e2:	f413 7c00 	ands.w	ip, r3, #512	; 0x200
 80025e6:	f040 80be 	bne.w	8002766 <rt_vsnprintf+0x61a>
          else if (flags & FLAGS_LONG) {
 80025ea:	05d9      	lsls	r1, r3, #23
 80025ec:	f100 80d3 	bmi.w	8002796 <rt_vsnprintf+0x64a>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 80025f0:	0658      	lsls	r0, r3, #25
 80025f2:	f857 1b04 	ldr.w	r1, [r7], #4
 80025f6:	f100 808c 	bmi.w	8002712 <rt_vsnprintf+0x5c6>
 80025fa:	0618      	lsls	r0, r3, #24
 80025fc:	bf48      	it	mi
 80025fe:	b289      	uxthmi	r1, r1
            idx = print_integer(out, buffer, idx, maxlen, (printf_unsigned_value_t) value, false, base, precision, width, flags);
 8002600:	e9cd 2903 	strd	r2, r9, [sp, #12]
 8002604:	462a      	mov	r2, r5
 8002606:	2500      	movs	r5, #0
 8002608:	e9cd 8305 	strd	r8, r3, [sp, #20]
 800260c:	e9cd 5501 	strd	r5, r5, [sp, #4]
 8002610:	9100      	str	r1, [sp, #0]
 8002612:	4633      	mov	r3, r6
 8002614:	4651      	mov	r1, sl
 8002616:	4658      	mov	r0, fp
 8002618:	f7fe fe74 	bl	8001304 <print_integer>
 800261c:	4605      	mov	r5, r0
        format++;
 800261e:	e6d8      	b.n	80023d2 <rt_vsnprintf+0x286>
          out_rev_(out, buffer, idx, maxlen, ")lin(", 5, width, flags) :
 8002620:	4b6d      	ldr	r3, [pc, #436]	; (80027d8 <rt_vsnprintf+0x68c>)
 8002622:	200a      	movs	r0, #10
 8002624:	9300      	str	r3, [sp, #0]
 8002626:	2305      	movs	r3, #5
 8002628:	462a      	mov	r2, r5
 800262a:	e9cd 3001 	strd	r3, r0, [sp, #4]
 800262e:	9103      	str	r1, [sp, #12]
 8002630:	4633      	mov	r3, r6
 8002632:	4651      	mov	r1, sl
 8002634:	4658      	mov	r0, fp
 8002636:	f7fe fe21 	bl	800127c <out_rev_>
 800263a:	4605      	mov	r5, r0
 800263c:	e6c9      	b.n	80023d2 <rt_vsnprintf+0x286>
          if (flags & FLAGS_LEFT) {
 800263e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002640:	4646      	mov	r6, r8
 8002642:	464c      	mov	r4, r9
 8002644:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8002648:	2b00      	cmp	r3, #0
 800264a:	d0ba      	beq.n	80025c2 <rt_vsnprintf+0x476>
            while (l++ < width) {
 800264c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800264e:	462f      	mov	r7, r5
 8002650:	4598      	cmp	r8, r3
 8002652:	d9b6      	bls.n	80025c2 <rt_vsnprintf+0x476>
 8002654:	eb08 0005 	add.w	r0, r8, r5
 8002658:	1ac5      	subs	r5, r0, r3
              out(' ', buffer, idx++, maxlen);
 800265a:	463a      	mov	r2, r7
 800265c:	4633      	mov	r3, r6
 800265e:	4651      	mov	r1, sl
 8002660:	2020      	movs	r0, #32
 8002662:	3701      	adds	r7, #1
 8002664:	47d8      	blx	fp
            while (l++ < width) {
 8002666:	42af      	cmp	r7, r5
 8002668:	d1f7      	bne.n	800265a <rt_vsnprintf+0x50e>
 800266a:	e7aa      	b.n	80025c2 <rt_vsnprintf+0x476>
    switch (*format) {
 800266c:	78a0      	ldrb	r0, [r4, #2]
          flags |= FLAGS_CHAR;
 800266e:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
          format++;
 8002672:	3402      	adds	r4, #2
 8002674:	e5ca      	b.n	800220c <rt_vsnprintf+0xc0>
    switch (*format) {
 8002676:	78a0      	ldrb	r0, [r4, #2]
          flags |= FLAGS_LONG_LONG;
 8002678:	f441 7140 	orr.w	r1, r1, #768	; 0x300
          format++;
 800267c:	3402      	adds	r4, #2
 800267e:	e5c5      	b.n	800220c <rt_vsnprintf+0xc0>
  while (*format)
 8002680:	4604      	mov	r4, r0
 8002682:	4605      	mov	r5, r0
 8002684:	e62e      	b.n	80022e4 <rt_vsnprintf+0x198>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8002686:	f021 030c 	bic.w	r3, r1, #12
        if (flags & FLAGS_PRECISION) {
 800268a:	0549      	lsls	r1, r1, #21
          base = BASE_HEX;
 800268c:	f04f 0210 	mov.w	r2, #16
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8002690:	f043 0320 	orr.w	r3, r3, #32
        if (flags & FLAGS_PRECISION) {
 8002694:	d49d      	bmi.n	80025d2 <rt_vsnprintf+0x486>
 8002696:	e7a4      	b.n	80025e2 <rt_vsnprintf+0x496>
  for (s = str; *s && maxsize--; ++s);
 8002698:	2800      	cmp	r0, #0
 800269a:	f000 8098 	beq.w	80027ce <rt_vsnprintf+0x682>
 800269e:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 80026a2:	e712      	b.n	80024ca <rt_vsnprintf+0x37e>
          while (l++ < width) {
 80026a4:	f1b8 0f01 	cmp.w	r8, #1
 80026a8:	f240 8087 	bls.w	80027ba <rt_vsnprintf+0x66e>
 80026ac:	1e6b      	subs	r3, r5, #1
 80026ae:	4498      	add	r8, r3
            out(' ', buffer, idx++, maxlen);
 80026b0:	462a      	mov	r2, r5
 80026b2:	4633      	mov	r3, r6
 80026b4:	4651      	mov	r1, sl
 80026b6:	2020      	movs	r0, #32
 80026b8:	3501      	adds	r5, #1
 80026ba:	47d8      	blx	fp
          while (l++ < width) {
 80026bc:	4545      	cmp	r5, r8
 80026be:	d1f7      	bne.n	80026b0 <rt_vsnprintf+0x564>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 80026c0:	f857 0b04 	ldr.w	r0, [r7], #4
 80026c4:	4633      	mov	r3, r6
 80026c6:	4642      	mov	r2, r8
 80026c8:	4651      	mov	r1, sl
 80026ca:	b2c0      	uxtb	r0, r0
 80026cc:	f108 0501 	add.w	r5, r8, #1
 80026d0:	47d8      	blx	fp
        if (flags & FLAGS_LEFT) {
 80026d2:	e67e      	b.n	80023d2 <rt_vsnprintf+0x286>
          base =  BASE_OCTAL;
 80026d4:	2208      	movs	r2, #8
          format++;
 80026d6:	460b      	mov	r3, r1
        if ((*format != 'i') && (*format != 'd')) {
 80026d8:	2864      	cmp	r0, #100	; 0x64
 80026da:	bf18      	it	ne
 80026dc:	4619      	movne	r1, r3
 80026de:	f47f af74 	bne.w	80025ca <rt_vsnprintf+0x47e>
        if (flags & FLAGS_PRECISION) {
 80026e2:	0559      	lsls	r1, r3, #21
 80026e4:	f53f af75 	bmi.w	80025d2 <rt_vsnprintf+0x486>
 80026e8:	e654      	b.n	8002394 <rt_vsnprintf+0x248>
            const long long value = va_arg(va, long long);
 80026ea:	3707      	adds	r7, #7
 80026ec:	f027 0707 	bic.w	r7, r7, #7
 80026f0:	6879      	ldr	r1, [r7, #4]
 80026f2:	f857 0b08 	ldr.w	r0, [r7], #8
            idx = print_integer(out, buffer, idx, maxlen, ABS_FOR_PRINTING(value), value < 0, base, precision, width, flags);
 80026f6:	ea4f 7cd1 	mov.w	ip, r1, lsr #31
 80026fa:	2900      	cmp	r1, #0
 80026fc:	e9cd 8305 	strd	r8, r3, [sp, #20]
 8002700:	e9cd 2903 	strd	r2, r9, [sp, #12]
 8002704:	f8cd c008 	str.w	ip, [sp, #8]
 8002708:	db09      	blt.n	800271e <rt_vsnprintf+0x5d2>
            idx = print_integer(out, buffer, idx, maxlen, ABS_FOR_PRINTING(value), value < 0, base, precision, width, flags);
 800270a:	462a      	mov	r2, r5
            idx = print_integer(out, buffer, idx, maxlen, ABS_FOR_PRINTING(value), value < 0, base, precision, width, flags);
 800270c:	e9cd 0100 	strd	r0, r1, [sp]
 8002710:	e659      	b.n	80023c6 <rt_vsnprintf+0x27a>
 8002712:	b2c9      	uxtb	r1, r1
 8002714:	e774      	b.n	8002600 <rt_vsnprintf+0x4b4>
            const int value = (flags & FLAGS_CHAR) ? (signed char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8002716:	0618      	lsls	r0, r3, #24
 8002718:	bf48      	it	mi
 800271a:	b209      	sxthmi	r1, r1
 800271c:	e645      	b.n	80023aa <rt_vsnprintf+0x25e>
            idx = print_integer(out, buffer, idx, maxlen, ABS_FOR_PRINTING(value), value < 0, base, precision, width, flags);
 800271e:	4243      	negs	r3, r0
 8002720:	4618      	mov	r0, r3
 8002722:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8002726:	e7f0      	b.n	800270a <rt_vsnprintf+0x5be>
            while (l++ < width) {
 8002728:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800272a:	4590      	cmp	r8, r2
 800272c:	f102 0301 	add.w	r3, r2, #1
 8002730:	d948      	bls.n	80027c4 <rt_vsnprintf+0x678>
 8002732:	eb08 0705 	add.w	r7, r8, r5
 8002736:	1abf      	subs	r7, r7, r2
              out(' ', buffer, idx++, maxlen);
 8002738:	462a      	mov	r2, r5
 800273a:	4633      	mov	r3, r6
 800273c:	4651      	mov	r1, sl
 800273e:	2020      	movs	r0, #32
 8002740:	3501      	adds	r5, #1
 8002742:	47d8      	blx	fp
            while (l++ < width) {
 8002744:	42bd      	cmp	r5, r7
 8002746:	d1f7      	bne.n	8002738 <rt_vsnprintf+0x5ec>
 8002748:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800274a:	7818      	ldrb	r0, [r3, #0]
 800274c:	f108 0301 	add.w	r3, r8, #1
 8002750:	930b      	str	r3, [sp, #44]	; 0x2c
          while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8002752:	2800      	cmp	r0, #0
 8002754:	f47f aed7 	bne.w	8002506 <rt_vsnprintf+0x3ba>
 8002758:	e733      	b.n	80025c2 <rt_vsnprintf+0x476>
            idx = print_integer(out, buffer, idx, maxlen, ABS_FOR_PRINTING(value), value < 0, base, precision, width, flags);
 800275a:	17c8      	asrs	r0, r1, #31
 800275c:	f1d1 0c00 	rsbs	ip, r1, #0
 8002760:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8002764:	e626      	b.n	80023b4 <rt_vsnprintf+0x268>
            idx = print_integer(out, buffer, idx, maxlen, (printf_unsigned_value_t) va_arg(va, unsigned long long), false, base, precision, width, flags);
 8002766:	e9cd 8305 	strd	r8, r3, [sp, #20]
 800276a:	2300      	movs	r3, #0
 800276c:	e9cd 2903 	strd	r2, r9, [sp, #12]
 8002770:	3707      	adds	r7, #7
 8002772:	9302      	str	r3, [sp, #8]
 8002774:	f027 0707 	bic.w	r7, r7, #7
 8002778:	462a      	mov	r2, r5
 800277a:	e8f7 8902 	ldrd	r8, r9, [r7], #8
 800277e:	4633      	mov	r3, r6
 8002780:	4651      	mov	r1, sl
 8002782:	4658      	mov	r0, fp
 8002784:	e9cd 8900 	strd	r8, r9, [sp]
 8002788:	f7fe fdbc 	bl	8001304 <print_integer>
 800278c:	4605      	mov	r5, r0
 800278e:	e620      	b.n	80023d2 <rt_vsnprintf+0x286>
          base =  BASE_BINARY;
 8002790:	2202      	movs	r2, #2
          format++;
 8002792:	460b      	mov	r3, r1
 8002794:	e7a0      	b.n	80026d8 <rt_vsnprintf+0x58c>
            idx = print_integer(out, buffer, idx, maxlen, (printf_unsigned_value_t) va_arg(va, unsigned long), false, base, precision, width, flags);
 8002796:	e9cd 8305 	strd	r8, r3, [sp, #20]
 800279a:	e9cd 2903 	strd	r2, r9, [sp, #12]
 800279e:	f8cd c008 	str.w	ip, [sp, #8]
 80027a2:	462a      	mov	r2, r5
 80027a4:	f857 5b04 	ldr.w	r5, [r7], #4
 80027a8:	4633      	mov	r3, r6
 80027aa:	e9cd 5c00 	strd	r5, ip, [sp]
 80027ae:	4651      	mov	r1, sl
 80027b0:	4658      	mov	r0, fp
 80027b2:	f7fe fda7 	bl	8001304 <print_integer>
 80027b6:	4605      	mov	r5, r0
 80027b8:	e60b      	b.n	80023d2 <rt_vsnprintf+0x286>
          while (l++ < width) {
 80027ba:	46a8      	mov	r8, r5
 80027bc:	e780      	b.n	80026c0 <rt_vsnprintf+0x574>
  for (s = str; *s && maxsize--; ++s);
 80027be:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
 80027c2:	e68f      	b.n	80024e4 <rt_vsnprintf+0x398>
            while (l++ < width) {
 80027c4:	930b      	str	r3, [sp, #44]	; 0x2c
          while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 80027c6:	2800      	cmp	r0, #0
 80027c8:	f47f ae9d 	bne.w	8002506 <rt_vsnprintf+0x3ba>
 80027cc:	e6f9      	b.n	80025c2 <rt_vsnprintf+0x476>
  for (s = str; *s && maxsize--; ++s);
 80027ce:	900b      	str	r0, [sp, #44]	; 0x2c
 80027d0:	e688      	b.n	80024e4 <rt_vsnprintf+0x398>
 80027d2:	bf00      	nop
 80027d4:	08003d58 	.word	0x08003d58
 80027d8:	08003d60 	.word	0x08003d60

080027dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80027dc:	f001 f994 	bl	8003b08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027e0:	480b      	ldr	r0, [pc, #44]	; (8002810 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80027e2:	490c      	ldr	r1, [pc, #48]	; (8002814 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80027e4:	4a0c      	ldr	r2, [pc, #48]	; (8002818 <LoopFillZerobss+0x16>)
  movs r3, #0
 80027e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027e8:	e002      	b.n	80027f0 <LoopCopyDataInit>

080027ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027ee:	3304      	adds	r3, #4

080027f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027f4:	d3f9      	bcc.n	80027ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027f6:	4a09      	ldr	r2, [pc, #36]	; (800281c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80027f8:	4c09      	ldr	r4, [pc, #36]	; (8002820 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80027fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027fc:	e001      	b.n	8002802 <LoopFillZerobss>

080027fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002800:	3204      	adds	r2, #4

08002802 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002802:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002804:	d3fb      	bcc.n	80027fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002806:	f001 f981 	bl	8003b0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800280a:	f7fe fcfd 	bl	8001208 <main>
  bx lr
 800280e:	4770      	bx	lr
  ldr r0, =_sdata
 8002810:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002814:	2000043c 	.word	0x2000043c
  ldr r2, =_sidata
 8002818:	08003e48 	.word	0x08003e48
  ldr r2, =_sbss
 800281c:	2000043c 	.word	0x2000043c
  ldr r4, =_ebss
 8002820:	200005b8 	.word	0x200005b8

08002824 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002824:	e7fe      	b.n	8002824 <ADC1_IRQHandler>
	...

08002828 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002828:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800282a:	2003      	movs	r0, #3
 800282c:	f000 f81a 	bl	8002864 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002830:	200f      	movs	r0, #15
 8002832:	f000 fe45 	bl	80034c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002836:	f000 f9f7 	bl	8002c28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800283a:	2000      	movs	r0, #0
 800283c:	bd08      	pop	{r3, pc}
 800283e:	bf00      	nop

08002840 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002840:	4a03      	ldr	r2, [pc, #12]	; (8002850 <HAL_IncTick+0x10>)
 8002842:	4b04      	ldr	r3, [pc, #16]	; (8002854 <HAL_IncTick+0x14>)
 8002844:	6811      	ldr	r1, [r2, #0]
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	440b      	add	r3, r1
 800284a:	6013      	str	r3, [r2, #0]
}
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	20000568 	.word	0x20000568
 8002854:	20000000 	.word	0x20000000

08002858 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002858:	4b01      	ldr	r3, [pc, #4]	; (8002860 <HAL_GetTick+0x8>)
 800285a:	6818      	ldr	r0, [r3, #0]
}
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	20000568 	.word	0x20000568

08002864 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002864:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002868:	4906      	ldr	r1, [pc, #24]	; (8002884 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800286a:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800286c:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800286e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002872:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002876:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002878:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800287c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002880:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002882:	4770      	bx	lr
 8002884:	e000ed00 	.word	0xe000ed00

08002888 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002888:	4b1c      	ldr	r3, [pc, #112]	; (80028fc <HAL_NVIC_SetPriority+0x74>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800288a:	b500      	push	{lr}
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002892:	f1c3 0e07 	rsb	lr, r3, #7
 8002896:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800289a:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800289e:	bf28      	it	cs
 80028a0:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028a4:	f1bc 0f06 	cmp.w	ip, #6
 80028a8:	d91b      	bls.n	80028e2 <HAL_NVIC_SetPriority+0x5a>

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028aa:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028ae:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028b0:	fa0c fc03 	lsl.w	ip, ip, r3
 80028b4:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028b8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80028bc:	fa0c fc0e 	lsl.w	ip, ip, lr
 80028c0:	ea21 010c 	bic.w	r1, r1, ip
 80028c4:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80028c6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028c8:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80028cc:	db0c      	blt.n	80028e8 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028ce:	0109      	lsls	r1, r1, #4
 80028d0:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80028d4:	b2c9      	uxtb	r1, r1
 80028d6:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80028da:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80028de:	f85d fb04 	ldr.w	pc, [sp], #4
 80028e2:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028e4:	4613      	mov	r3, r2
 80028e6:	e7e7      	b.n	80028b8 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028e8:	4b05      	ldr	r3, [pc, #20]	; (8002900 <HAL_NVIC_SetPriority+0x78>)
 80028ea:	f000 000f 	and.w	r0, r0, #15
 80028ee:	0109      	lsls	r1, r1, #4
 80028f0:	b2c9      	uxtb	r1, r1
 80028f2:	4403      	add	r3, r0
 80028f4:	7619      	strb	r1, [r3, #24]
 80028f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80028fa:	bf00      	nop
 80028fc:	e000ed00 	.word	0xe000ed00
 8002900:	e000ecfc 	.word	0xe000ecfc

08002904 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002904:	2800      	cmp	r0, #0
 8002906:	db07      	blt.n	8002918 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002908:	2301      	movs	r3, #1
 800290a:	f000 011f 	and.w	r1, r0, #31
 800290e:	4a03      	ldr	r2, [pc, #12]	; (800291c <HAL_NVIC_EnableIRQ+0x18>)
 8002910:	0940      	lsrs	r0, r0, #5
 8002912:	408b      	lsls	r3, r1
 8002914:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	e000e100 	.word	0xe000e100

08002920 <HAL_DMA_Abort>:
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002920:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{
 8002924:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002926:	2a02      	cmp	r2, #2
 8002928:	d006      	beq.n	8002938 <HAL_DMA_Abort+0x18>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800292a:	2104      	movs	r1, #4
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800292c:	2200      	movs	r2, #0
    
    return HAL_ERROR;
 800292e:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002930:	6399      	str	r1, [r3, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8002932:	f883 2020 	strb.w	r2, [r3, #32]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
  
  return status; 
}
 8002936:	4770      	bx	lr
{
 8002938:	b500      	push	{lr}
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800293a:	f04f 0e01 	mov.w	lr, #1
  __HAL_UNLOCK(hdma);      
 800293e:	f04f 0c00 	mov.w	ip, #0
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002942:	6802      	ldr	r2, [r0, #0]
 8002944:	6811      	ldr	r1, [r2, #0]
 8002946:	f021 010e 	bic.w	r1, r1, #14
 800294a:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800294c:	6811      	ldr	r1, [r2, #0]
 800294e:	f021 0101 	bic.w	r1, r1, #1
 8002952:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002954:	e9d0 120f 	ldrd	r1, r2, [r0, #60]	; 0x3c
 8002958:	fa0e f202 	lsl.w	r2, lr, r2
 800295c:	604a      	str	r2, [r1, #4]
  hdma->State = HAL_DMA_STATE_READY;
 800295e:	f883 e021 	strb.w	lr, [r3, #33]	; 0x21
  __HAL_UNLOCK(hdma);      
 8002962:	f883 c020 	strb.w	ip, [r3, #32]
  return status; 
 8002966:	4660      	mov	r0, ip
}
 8002968:	f85d fb04 	ldr.w	pc, [sp], #4

0800296c <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800296c:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{  
 8002970:	4603      	mov	r3, r0
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002972:	2a02      	cmp	r2, #2
 8002974:	d003      	beq.n	800297e <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002976:	2204      	movs	r2, #4
        
    status = HAL_ERROR;
 8002978:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800297a:	639a      	str	r2, [r3, #56]	; 0x38
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 800297c:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800297e:	6802      	ldr	r2, [r0, #0]
{  
 8002980:	b510      	push	{r4, lr}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002982:	6811      	ldr	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002984:	481c      	ldr	r0, [pc, #112]	; (80029f8 <HAL_DMA_Abort_IT+0x8c>)
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002986:	f021 010e 	bic.w	r1, r1, #14
 800298a:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800298c:	6811      	ldr	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800298e:	4282      	cmp	r2, r0
    __HAL_DMA_DISABLE(hdma);
 8002990:	f021 0101 	bic.w	r1, r1, #1
 8002994:	6011      	str	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002996:	d024      	beq.n	80029e2 <HAL_DMA_Abort_IT+0x76>
 8002998:	4918      	ldr	r1, [pc, #96]	; (80029fc <HAL_DMA_Abort_IT+0x90>)
 800299a:	428a      	cmp	r2, r1
 800299c:	d01d      	beq.n	80029da <HAL_DMA_Abort_IT+0x6e>
 800299e:	3114      	adds	r1, #20
 80029a0:	428a      	cmp	r2, r1
 80029a2:	d020      	beq.n	80029e6 <HAL_DMA_Abort_IT+0x7a>
 80029a4:	3114      	adds	r1, #20
 80029a6:	428a      	cmp	r2, r1
 80029a8:	d020      	beq.n	80029ec <HAL_DMA_Abort_IT+0x80>
 80029aa:	3114      	adds	r1, #20
 80029ac:	428a      	cmp	r2, r1
 80029ae:	d020      	beq.n	80029f2 <HAL_DMA_Abort_IT+0x86>
 80029b0:	3114      	adds	r1, #20
 80029b2:	428a      	cmp	r2, r1
 80029b4:	bf0c      	ite	eq
 80029b6:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
 80029ba:	f04f 7280 	movne.w	r2, #16777216	; 0x1000000
    hdma->State = HAL_DMA_STATE_READY;
 80029be:	2101      	movs	r1, #1
    __HAL_UNLOCK(hdma);
 80029c0:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80029c2:	480f      	ldr	r0, [pc, #60]	; (8002a00 <HAL_DMA_Abort_IT+0x94>)
 80029c4:	6042      	str	r2, [r0, #4]
    if(hdma->XferAbortCallback != NULL)
 80029c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 80029c8:	f883 1021 	strb.w	r1, [r3, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 80029cc:	f883 4020 	strb.w	r4, [r3, #32]
    if(hdma->XferAbortCallback != NULL)
 80029d0:	b12a      	cbz	r2, 80029de <HAL_DMA_Abort_IT+0x72>
      hdma->XferAbortCallback(hdma);
 80029d2:	4618      	mov	r0, r3
 80029d4:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 80029d6:	4620      	mov	r0, r4
}
 80029d8:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80029da:	2210      	movs	r2, #16
 80029dc:	e7ef      	b.n	80029be <HAL_DMA_Abort_IT+0x52>
  HAL_StatusTypeDef status = HAL_OK;
 80029de:	4610      	mov	r0, r2
}
 80029e0:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80029e2:	2201      	movs	r2, #1
 80029e4:	e7eb      	b.n	80029be <HAL_DMA_Abort_IT+0x52>
 80029e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029ea:	e7e8      	b.n	80029be <HAL_DMA_Abort_IT+0x52>
 80029ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80029f0:	e7e5      	b.n	80029be <HAL_DMA_Abort_IT+0x52>
 80029f2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80029f6:	e7e2      	b.n	80029be <HAL_DMA_Abort_IT+0x52>
 80029f8:	40020008 	.word	0x40020008
 80029fc:	4002001c 	.word	0x4002001c
 8002a00:	40020000 	.word	0x40020000

08002a04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a08:	680e      	ldr	r6, [r1, #0]
{
 8002a0a:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a0c:	2e00      	cmp	r6, #0
 8002a0e:	f000 80b5 	beq.w	8002b7c <HAL_GPIO_Init+0x178>
 8002a12:	2200      	movs	r2, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002a14:	4f7a      	ldr	r7, [pc, #488]	; (8002c00 <HAL_GPIO_Init+0x1fc>)
  uint32_t config = 0x00u;
 8002a16:	4692      	mov	sl, r2
  uint32_t position = 0x00u;
 8002a18:	4613      	mov	r3, r2
        {
          SET_BIT(EXTI->IMR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a1a:	4d7a      	ldr	r5, [pc, #488]	; (8002c04 <HAL_GPIO_Init+0x200>)
      switch (GPIO_Init->Mode)
 8002a1c:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 8002c08 <HAL_GPIO_Init+0x204>
 8002a20:	e006      	b.n	8002a30 <HAL_GPIO_Init+0x2c>
        }
      }
    }

	position++;
 8002a22:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a24:	fa36 f403 	lsrs.w	r4, r6, r3
 8002a28:	f102 0204 	add.w	r2, r2, #4
 8002a2c:	f000 80a6 	beq.w	8002b7c <HAL_GPIO_Init+0x178>
    ioposition = (0x01uL << position);
 8002a30:	2401      	movs	r4, #1
 8002a32:	409c      	lsls	r4, r3
    if (iocurrent == ioposition)
 8002a34:	ea34 0e06 	bics.w	lr, r4, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a38:	ea04 0c06 	and.w	ip, r4, r6
    if (iocurrent == ioposition)
 8002a3c:	d1f1      	bne.n	8002a22 <HAL_GPIO_Init+0x1e>
      switch (GPIO_Init->Mode)
 8002a3e:	684e      	ldr	r6, [r1, #4]
 8002a40:	2e12      	cmp	r6, #18
 8002a42:	f200 809e 	bhi.w	8002b82 <HAL_GPIO_Init+0x17e>
 8002a46:	2e12      	cmp	r6, #18
 8002a48:	d81a      	bhi.n	8002a80 <HAL_GPIO_Init+0x7c>
 8002a4a:	e8df f006 	tbb	[pc, r6]
 8002a4e:	b9a7      	.short	0xb9a7
 8002a50:	1919ceb5 	.word	0x1919ceb5
 8002a54:	19191919 	.word	0x19191919
 8002a58:	19191919 	.word	0x19191919
 8002a5c:	b1191919 	.word	0xb1191919
 8002a60:	bc          	.byte	0xbc
 8002a61:	00          	.byte	0x00
 8002a62:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 8002c0c <HAL_GPIO_Init+0x208>
 8002a66:	4576      	cmp	r6, lr
 8002a68:	f000 8098 	beq.w	8002b9c <HAL_GPIO_Init+0x198>
 8002a6c:	f50e 2e70 	add.w	lr, lr, #983040	; 0xf0000
 8002a70:	4576      	cmp	r6, lr
 8002a72:	f000 8093 	beq.w	8002b9c <HAL_GPIO_Init+0x198>
 8002a76:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 8002a7a:	4576      	cmp	r6, lr
 8002a7c:	f000 808e 	beq.w	8002b9c <HAL_GPIO_Init+0x198>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002a80:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8002a84:	bf9c      	itt	ls
 8002a86:	4686      	movls	lr, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002a88:	4693      	movls	fp, r2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002a8a:	f04f 060f 	mov.w	r6, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002a8e:	bf84      	itt	hi
 8002a90:	f100 0e04 	addhi.w	lr, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002a94:	f1a2 0b20 	subhi.w	fp, r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002a98:	f8de 4000 	ldr.w	r4, [lr]
 8002a9c:	fa0a f90b 	lsl.w	r9, sl, fp
 8002aa0:	fa06 fb0b 	lsl.w	fp, r6, fp
 8002aa4:	ea24 040b 	bic.w	r4, r4, fp
 8002aa8:	ea44 0409 	orr.w	r4, r4, r9
 8002aac:	f8ce 4000 	str.w	r4, [lr]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ab0:	684c      	ldr	r4, [r1, #4]
 8002ab2:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8002ab6:	d079      	beq.n	8002bac <HAL_GPIO_Init+0x1a8>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002ab8:	f8d7 e018 	ldr.w	lr, [r7, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002abc:	f003 0903 	and.w	r9, r3, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002ac0:	f04e 0e01 	orr.w	lr, lr, #1
 8002ac4:	f8c7 e018 	str.w	lr, [r7, #24]
 8002ac8:	f8d7 e018 	ldr.w	lr, [r7, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002acc:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002ad0:	f00e 0e01 	and.w	lr, lr, #1
 8002ad4:	f8cd e004 	str.w	lr, [sp, #4]
 8002ad8:	f8dd e004 	ldr.w	lr, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8002adc:	f023 0e03 	bic.w	lr, r3, #3
 8002ae0:	f10e 4e80 	add.w	lr, lr, #1073741824	; 0x40000000
 8002ae4:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 8002ae8:	f8de b008 	ldr.w	fp, [lr, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002aec:	fa06 f609 	lsl.w	r6, r6, r9
 8002af0:	ea2b 0606 	bic.w	r6, fp, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002af4:	f8df b118 	ldr.w	fp, [pc, #280]	; 8002c10 <HAL_GPIO_Init+0x20c>
 8002af8:	4558      	cmp	r0, fp
 8002afa:	d013      	beq.n	8002b24 <HAL_GPIO_Init+0x120>
 8002afc:	f50b 6b80 	add.w	fp, fp, #1024	; 0x400
 8002b00:	4558      	cmp	r0, fp
 8002b02:	d06b      	beq.n	8002bdc <HAL_GPIO_Init+0x1d8>
 8002b04:	f8df b10c 	ldr.w	fp, [pc, #268]	; 8002c14 <HAL_GPIO_Init+0x210>
 8002b08:	4558      	cmp	r0, fp
 8002b0a:	d060      	beq.n	8002bce <HAL_GPIO_Init+0x1ca>
 8002b0c:	f8df b108 	ldr.w	fp, [pc, #264]	; 8002c18 <HAL_GPIO_Init+0x214>
 8002b10:	4558      	cmp	r0, fp
 8002b12:	bf0c      	ite	eq
 8002b14:	f04f 0b03 	moveq.w	fp, #3
 8002b18:	f04f 0b04 	movne.w	fp, #4
 8002b1c:	fa0b f909 	lsl.w	r9, fp, r9
 8002b20:	ea46 0609 	orr.w	r6, r6, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8002b24:	f8ce 6008 	str.w	r6, [lr, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 8002b28:	68ae      	ldr	r6, [r5, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b2a:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8002b2e:	bf14      	ite	ne
 8002b30:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002b34:	ea26 060c 	biceq.w	r6, r6, ip
 8002b38:	60ae      	str	r6, [r5, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8002b3a:	68ee      	ldr	r6, [r5, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b3c:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8002b40:	bf14      	ite	ne
 8002b42:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002b46:	ea26 060c 	biceq.w	r6, r6, ip
 8002b4a:	60ee      	str	r6, [r5, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 8002b4c:	686e      	ldr	r6, [r5, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b4e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8002b52:	bf14      	ite	ne
 8002b54:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002b58:	ea26 060c 	biceq.w	r6, r6, ip
 8002b5c:	606e      	str	r6, [r5, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b5e:	f414 3f80 	tst.w	r4, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8002b62:	682c      	ldr	r4, [r5, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b64:	d01f      	beq.n	8002ba6 <HAL_GPIO_Init+0x1a2>
          SET_BIT(EXTI->IMR, iocurrent);
 8002b66:	ea44 040c 	orr.w	r4, r4, ip
 8002b6a:	602c      	str	r4, [r5, #0]
 8002b6c:	680e      	ldr	r6, [r1, #0]
	position++;
 8002b6e:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b70:	fa36 f403 	lsrs.w	r4, r6, r3
 8002b74:	f102 0204 	add.w	r2, r2, #4
 8002b78:	f47f af5a 	bne.w	8002a30 <HAL_GPIO_Init+0x2c>
  }
}
 8002b7c:	b003      	add	sp, #12
 8002b7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8002b82:	4546      	cmp	r6, r8
 8002b84:	d00a      	beq.n	8002b9c <HAL_GPIO_Init+0x198>
 8002b86:	f67f af6c 	bls.w	8002a62 <HAL_GPIO_Init+0x5e>
 8002b8a:	f8df e090 	ldr.w	lr, [pc, #144]	; 8002c1c <HAL_GPIO_Init+0x218>
 8002b8e:	4576      	cmp	r6, lr
 8002b90:	d004      	beq.n	8002b9c <HAL_GPIO_Init+0x198>
 8002b92:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 8002b96:	4576      	cmp	r6, lr
 8002b98:	f47f af72 	bne.w	8002a80 <HAL_GPIO_Init+0x7c>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002b9c:	688e      	ldr	r6, [r1, #8]
 8002b9e:	bb3e      	cbnz	r6, 8002bf0 <HAL_GPIO_Init+0x1ec>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002ba0:	f04f 0a04 	mov.w	sl, #4
 8002ba4:	e76c      	b.n	8002a80 <HAL_GPIO_Init+0x7c>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002ba6:	ea24 040c 	bic.w	r4, r4, ip
 8002baa:	602c      	str	r4, [r5, #0]
 8002bac:	680e      	ldr	r6, [r1, #0]
 8002bae:	e738      	b.n	8002a22 <HAL_GPIO_Init+0x1e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002bb0:	68cc      	ldr	r4, [r1, #12]
 8002bb2:	f104 0a04 	add.w	sl, r4, #4
          break;
 8002bb6:	e763      	b.n	8002a80 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002bb8:	68cc      	ldr	r4, [r1, #12]
 8002bba:	f104 0a08 	add.w	sl, r4, #8
          break;
 8002bbe:	e75f      	b.n	8002a80 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002bc0:	f8d1 a00c 	ldr.w	sl, [r1, #12]
          break;
 8002bc4:	e75c      	b.n	8002a80 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002bc6:	68cc      	ldr	r4, [r1, #12]
 8002bc8:	f104 0a0c 	add.w	sl, r4, #12
          break;
 8002bcc:	e758      	b.n	8002a80 <HAL_GPIO_Init+0x7c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002bce:	f04f 0b02 	mov.w	fp, #2
 8002bd2:	fa0b f909 	lsl.w	r9, fp, r9
 8002bd6:	ea46 0609 	orr.w	r6, r6, r9
 8002bda:	e7a3      	b.n	8002b24 <HAL_GPIO_Init+0x120>
 8002bdc:	f04f 0b01 	mov.w	fp, #1
 8002be0:	fa0b f909 	lsl.w	r9, fp, r9
 8002be4:	ea46 0609 	orr.w	r6, r6, r9
 8002be8:	e79c      	b.n	8002b24 <HAL_GPIO_Init+0x120>
      switch (GPIO_Init->Mode)
 8002bea:	f04f 0a00 	mov.w	sl, #0
 8002bee:	e747      	b.n	8002a80 <HAL_GPIO_Init+0x7c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002bf0:	2e01      	cmp	r6, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002bf2:	f04f 0a08 	mov.w	sl, #8
            GPIOx->BSRR = ioposition;
 8002bf6:	bf0c      	ite	eq
 8002bf8:	6104      	streq	r4, [r0, #16]
            GPIOx->BRR = ioposition;
 8002bfa:	6144      	strne	r4, [r0, #20]
 8002bfc:	e740      	b.n	8002a80 <HAL_GPIO_Init+0x7c>
 8002bfe:	bf00      	nop
 8002c00:	40021000 	.word	0x40021000
 8002c04:	40010400 	.word	0x40010400
 8002c08:	10220000 	.word	0x10220000
 8002c0c:	10120000 	.word	0x10120000
 8002c10:	40010800 	.word	0x40010800
 8002c14:	40011000 	.word	0x40011000
 8002c18:	40011400 	.word	0x40011400
 8002c1c:	10310000 	.word	0x10310000

08002c20 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c20:	b902      	cbnz	r2, 8002c24 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002c22:	0409      	lsls	r1, r1, #16
 8002c24:	6101      	str	r1, [r0, #16]
  }
}
 8002c26:	4770      	bx	lr

08002c28 <HAL_MspInit>:
  * @param  None
  * @retval None
  */
void HAL_MspInit(void)
{ 
	__HAL_RCC_AFIO_CLK_ENABLE();
 8002c28:	4b0e      	ldr	r3, [pc, #56]	; (8002c64 <HAL_MspInit+0x3c>)
{ 
 8002c2a:	b082      	sub	sp, #8
	__HAL_RCC_AFIO_CLK_ENABLE();
 8002c2c:	699a      	ldr	r2, [r3, #24]
	  __HAL_RCC_PWR_CLK_ENABLE();
	__HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002c2e:	490e      	ldr	r1, [pc, #56]	; (8002c68 <HAL_MspInit+0x40>)
	__HAL_RCC_AFIO_CLK_ENABLE();
 8002c30:	f042 0201 	orr.w	r2, r2, #1
 8002c34:	619a      	str	r2, [r3, #24]
 8002c36:	699a      	ldr	r2, [r3, #24]
 8002c38:	f002 0201 	and.w	r2, r2, #1
 8002c3c:	9200      	str	r2, [sp, #0]
 8002c3e:	9a00      	ldr	r2, [sp, #0]
	  __HAL_RCC_PWR_CLK_ENABLE();
 8002c40:	69da      	ldr	r2, [r3, #28]
 8002c42:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002c46:	61da      	str	r2, [r3, #28]
 8002c48:	69db      	ldr	r3, [r3, #28]
 8002c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c4e:	9301      	str	r3, [sp, #4]
 8002c50:	9b01      	ldr	r3, [sp, #4]
	__HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002c52:	684b      	ldr	r3, [r1, #4]
 8002c54:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002c58:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c5c:	604b      	str	r3, [r1, #4]

}
 8002c5e:	b002      	add	sp, #8
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	40021000 	.word	0x40021000
 8002c68:	40010000 	.word	0x40010000

08002c6c <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c6c:	2800      	cmp	r0, #0
 8002c6e:	f000 81b6 	beq.w	8002fde <HAL_RCC_OscConfig+0x372>
{
 8002c72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c76:	6803      	ldr	r3, [r0, #0]
 8002c78:	4604      	mov	r4, r0
 8002c7a:	07dd      	lsls	r5, r3, #31
{
 8002c7c:	b082      	sub	sp, #8
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c7e:	d535      	bpl.n	8002cec <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c80:	499a      	ldr	r1, [pc, #616]	; (8002eec <HAL_RCC_OscConfig+0x280>)
 8002c82:	684a      	ldr	r2, [r1, #4]
 8002c84:	f002 020c 	and.w	r2, r2, #12
 8002c88:	2a04      	cmp	r2, #4
 8002c8a:	f000 80ef 	beq.w	8002e6c <HAL_RCC_OscConfig+0x200>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c8e:	684a      	ldr	r2, [r1, #4]
 8002c90:	f002 020c 	and.w	r2, r2, #12
 8002c94:	2a08      	cmp	r2, #8
 8002c96:	f000 80e5 	beq.w	8002e64 <HAL_RCC_OscConfig+0x1f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c9a:	6863      	ldr	r3, [r4, #4]
 8002c9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ca0:	d010      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x58>
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	f000 810c 	beq.w	8002ec0 <HAL_RCC_OscConfig+0x254>
 8002ca8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cac:	f000 8182 	beq.w	8002fb4 <HAL_RCC_OscConfig+0x348>
 8002cb0:	4b8e      	ldr	r3, [pc, #568]	; (8002eec <HAL_RCC_OscConfig+0x280>)
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002cb8:	601a      	str	r2, [r3, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002cc0:	601a      	str	r2, [r3, #0]
 8002cc2:	e004      	b.n	8002cce <HAL_RCC_OscConfig+0x62>
 8002cc4:	4a89      	ldr	r2, [pc, #548]	; (8002eec <HAL_RCC_OscConfig+0x280>)
 8002cc6:	6813      	ldr	r3, [r2, #0]
 8002cc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ccc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cce:	f7ff fdc3 	bl	8002858 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cd2:	4e86      	ldr	r6, [pc, #536]	; (8002eec <HAL_RCC_OscConfig+0x280>)
        tickstart = HAL_GetTick();
 8002cd4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cd6:	e005      	b.n	8002ce4 <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cd8:	f7ff fdbe 	bl	8002858 <HAL_GetTick>
 8002cdc:	1b40      	subs	r0, r0, r5
 8002cde:	2864      	cmp	r0, #100	; 0x64
 8002ce0:	f200 80ea 	bhi.w	8002eb8 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ce4:	6833      	ldr	r3, [r6, #0]
 8002ce6:	039a      	lsls	r2, r3, #14
 8002ce8:	d5f6      	bpl.n	8002cd8 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cea:	6823      	ldr	r3, [r4, #0]
 8002cec:	079f      	lsls	r7, r3, #30
 8002cee:	d528      	bpl.n	8002d42 <HAL_RCC_OscConfig+0xd6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cf0:	4a7e      	ldr	r2, [pc, #504]	; (8002eec <HAL_RCC_OscConfig+0x280>)
 8002cf2:	6851      	ldr	r1, [r2, #4]
 8002cf4:	f011 0f0c 	tst.w	r1, #12
 8002cf8:	f000 808d 	beq.w	8002e16 <HAL_RCC_OscConfig+0x1aa>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002cfc:	6851      	ldr	r1, [r2, #4]
 8002cfe:	f001 010c 	and.w	r1, r1, #12
 8002d02:	2908      	cmp	r1, #8
 8002d04:	f000 8083 	beq.w	8002e0e <HAL_RCC_OscConfig+0x1a2>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d08:	6923      	ldr	r3, [r4, #16]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	f000 8118 	beq.w	8002f40 <HAL_RCC_OscConfig+0x2d4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d10:	2201      	movs	r2, #1
 8002d12:	4b77      	ldr	r3, [pc, #476]	; (8002ef0 <HAL_RCC_OscConfig+0x284>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d14:	4e75      	ldr	r6, [pc, #468]	; (8002eec <HAL_RCC_OscConfig+0x280>)
        __HAL_RCC_HSI_ENABLE();
 8002d16:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002d18:	f7ff fd9e 	bl	8002858 <HAL_GetTick>
 8002d1c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d1e:	e005      	b.n	8002d2c <HAL_RCC_OscConfig+0xc0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d20:	f7ff fd9a 	bl	8002858 <HAL_GetTick>
 8002d24:	1b40      	subs	r0, r0, r5
 8002d26:	2802      	cmp	r0, #2
 8002d28:	f200 80c6 	bhi.w	8002eb8 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d2c:	6833      	ldr	r3, [r6, #0]
 8002d2e:	0798      	lsls	r0, r3, #30
 8002d30:	d5f6      	bpl.n	8002d20 <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d32:	6833      	ldr	r3, [r6, #0]
 8002d34:	6962      	ldr	r2, [r4, #20]
 8002d36:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002d3a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002d3e:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d40:	6823      	ldr	r3, [r4, #0]
 8002d42:	071a      	lsls	r2, r3, #28
 8002d44:	d41f      	bmi.n	8002d86 <HAL_RCC_OscConfig+0x11a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d46:	075d      	lsls	r5, r3, #29
 8002d48:	d542      	bpl.n	8002dd0 <HAL_RCC_OscConfig+0x164>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d4a:	4b68      	ldr	r3, [pc, #416]	; (8002eec <HAL_RCC_OscConfig+0x280>)
 8002d4c:	69da      	ldr	r2, [r3, #28]
 8002d4e:	00d0      	lsls	r0, r2, #3
 8002d50:	d57d      	bpl.n	8002e4e <HAL_RCC_OscConfig+0x1e2>
    FlagStatus       pwrclkchanged = RESET;
 8002d52:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d54:	4e67      	ldr	r6, [pc, #412]	; (8002ef4 <HAL_RCC_OscConfig+0x288>)
 8002d56:	6833      	ldr	r3, [r6, #0]
 8002d58:	05d9      	lsls	r1, r3, #23
 8002d5a:	f140 809d 	bpl.w	8002e98 <HAL_RCC_OscConfig+0x22c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d5e:	68e3      	ldr	r3, [r4, #12]
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	f000 80fe 	beq.w	8002f62 <HAL_RCC_OscConfig+0x2f6>
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	f000 80ca 	beq.w	8002f00 <HAL_RCC_OscConfig+0x294>
 8002d6c:	2b05      	cmp	r3, #5
 8002d6e:	4b5f      	ldr	r3, [pc, #380]	; (8002eec <HAL_RCC_OscConfig+0x280>)
 8002d70:	6a1a      	ldr	r2, [r3, #32]
 8002d72:	f000 812c 	beq.w	8002fce <HAL_RCC_OscConfig+0x362>
 8002d76:	f022 0201 	bic.w	r2, r2, #1
 8002d7a:	621a      	str	r2, [r3, #32]
 8002d7c:	6a1a      	ldr	r2, [r3, #32]
 8002d7e:	f022 0204 	bic.w	r2, r2, #4
 8002d82:	621a      	str	r2, [r3, #32]
 8002d84:	e0f2      	b.n	8002f6c <HAL_RCC_OscConfig+0x300>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d86:	69a3      	ldr	r3, [r4, #24]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d04f      	beq.n	8002e2c <HAL_RCC_OscConfig+0x1c0>
      __HAL_RCC_LSI_ENABLE();
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	4b58      	ldr	r3, [pc, #352]	; (8002ef0 <HAL_RCC_OscConfig+0x284>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d90:	4e56      	ldr	r6, [pc, #344]	; (8002eec <HAL_RCC_OscConfig+0x280>)
      __HAL_RCC_LSI_ENABLE();
 8002d92:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8002d96:	f7ff fd5f 	bl	8002858 <HAL_GetTick>
 8002d9a:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d9c:	e005      	b.n	8002daa <HAL_RCC_OscConfig+0x13e>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d9e:	f7ff fd5b 	bl	8002858 <HAL_GetTick>
 8002da2:	1b40      	subs	r0, r0, r5
 8002da4:	2802      	cmp	r0, #2
 8002da6:	f200 8087 	bhi.w	8002eb8 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002daa:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8002dac:	079b      	lsls	r3, r3, #30
 8002dae:	d5f6      	bpl.n	8002d9e <HAL_RCC_OscConfig+0x132>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002db0:	4b51      	ldr	r3, [pc, #324]	; (8002ef8 <HAL_RCC_OscConfig+0x28c>)
 8002db2:	4a52      	ldr	r2, [pc, #328]	; (8002efc <HAL_RCC_OscConfig+0x290>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dba:	0a5b      	lsrs	r3, r3, #9
 8002dbc:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8002dbe:	bf00      	nop
  }
  while (Delay --);
 8002dc0:	9b01      	ldr	r3, [sp, #4]
 8002dc2:	1e5a      	subs	r2, r3, #1
 8002dc4:	9201      	str	r2, [sp, #4]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d1f9      	bne.n	8002dbe <HAL_RCC_OscConfig+0x152>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dca:	6823      	ldr	r3, [r4, #0]
 8002dcc:	075d      	lsls	r5, r3, #29
 8002dce:	d4bc      	bmi.n	8002d4a <HAL_RCC_OscConfig+0xde>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dd0:	69e0      	ldr	r0, [r4, #28]
 8002dd2:	b1c0      	cbz	r0, 8002e06 <HAL_RCC_OscConfig+0x19a>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002dd4:	4d45      	ldr	r5, [pc, #276]	; (8002eec <HAL_RCC_OscConfig+0x280>)
 8002dd6:	686b      	ldr	r3, [r5, #4]
 8002dd8:	f003 030c 	and.w	r3, r3, #12
 8002ddc:	2b08      	cmp	r3, #8
 8002dde:	f000 80d8 	beq.w	8002f92 <HAL_RCC_OscConfig+0x326>
        __HAL_RCC_PLL_DISABLE();
 8002de2:	2200      	movs	r2, #0
 8002de4:	4b42      	ldr	r3, [pc, #264]	; (8002ef0 <HAL_RCC_OscConfig+0x284>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002de6:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8002de8:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dea:	f000 80fa 	beq.w	8002fe2 <HAL_RCC_OscConfig+0x376>
        tickstart = HAL_GetTick();
 8002dee:	f7ff fd33 	bl	8002858 <HAL_GetTick>
 8002df2:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002df4:	e004      	b.n	8002e00 <HAL_RCC_OscConfig+0x194>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002df6:	f7ff fd2f 	bl	8002858 <HAL_GetTick>
 8002dfa:	1b00      	subs	r0, r0, r4
 8002dfc:	2802      	cmp	r0, #2
 8002dfe:	d85b      	bhi.n	8002eb8 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e00:	682b      	ldr	r3, [r5, #0]
 8002e02:	019b      	lsls	r3, r3, #6
 8002e04:	d4f7      	bmi.n	8002df6 <HAL_RCC_OscConfig+0x18a>
  return HAL_OK;
 8002e06:	2000      	movs	r0, #0
}
 8002e08:	b002      	add	sp, #8
 8002e0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002e0e:	6852      	ldr	r2, [r2, #4]
 8002e10:	03d6      	lsls	r6, r2, #15
 8002e12:	f53f af79 	bmi.w	8002d08 <HAL_RCC_OscConfig+0x9c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e16:	4a35      	ldr	r2, [pc, #212]	; (8002eec <HAL_RCC_OscConfig+0x280>)
 8002e18:	6812      	ldr	r2, [r2, #0]
 8002e1a:	0795      	lsls	r5, r2, #30
 8002e1c:	d530      	bpl.n	8002e80 <HAL_RCC_OscConfig+0x214>
 8002e1e:	6922      	ldr	r2, [r4, #16]
 8002e20:	2a01      	cmp	r2, #1
 8002e22:	d02d      	beq.n	8002e80 <HAL_RCC_OscConfig+0x214>
        return HAL_ERROR;
 8002e24:	2001      	movs	r0, #1
}
 8002e26:	b002      	add	sp, #8
 8002e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8002e2c:	4a30      	ldr	r2, [pc, #192]	; (8002ef0 <HAL_RCC_OscConfig+0x284>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e2e:	4e2f      	ldr	r6, [pc, #188]	; (8002eec <HAL_RCC_OscConfig+0x280>)
      __HAL_RCC_LSI_DISABLE();
 8002e30:	f8c2 3480 	str.w	r3, [r2, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8002e34:	f7ff fd10 	bl	8002858 <HAL_GetTick>
 8002e38:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e3a:	e004      	b.n	8002e46 <HAL_RCC_OscConfig+0x1da>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e3c:	f7ff fd0c 	bl	8002858 <HAL_GetTick>
 8002e40:	1b40      	subs	r0, r0, r5
 8002e42:	2802      	cmp	r0, #2
 8002e44:	d838      	bhi.n	8002eb8 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e46:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8002e48:	079f      	lsls	r7, r3, #30
 8002e4a:	d4f7      	bmi.n	8002e3c <HAL_RCC_OscConfig+0x1d0>
 8002e4c:	e7bd      	b.n	8002dca <HAL_RCC_OscConfig+0x15e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e4e:	69da      	ldr	r2, [r3, #28]
      pwrclkchanged = SET;
 8002e50:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e52:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002e56:	61da      	str	r2, [r3, #28]
 8002e58:	69db      	ldr	r3, [r3, #28]
 8002e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e5e:	9300      	str	r3, [sp, #0]
 8002e60:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 8002e62:	e777      	b.n	8002d54 <HAL_RCC_OscConfig+0xe8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e64:	684a      	ldr	r2, [r1, #4]
 8002e66:	03d0      	lsls	r0, r2, #15
 8002e68:	f57f af17 	bpl.w	8002c9a <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e6c:	4a1f      	ldr	r2, [pc, #124]	; (8002eec <HAL_RCC_OscConfig+0x280>)
 8002e6e:	6812      	ldr	r2, [r2, #0]
 8002e70:	0391      	lsls	r1, r2, #14
 8002e72:	f57f af3b 	bpl.w	8002cec <HAL_RCC_OscConfig+0x80>
 8002e76:	6862      	ldr	r2, [r4, #4]
 8002e78:	2a00      	cmp	r2, #0
 8002e7a:	f47f af37 	bne.w	8002cec <HAL_RCC_OscConfig+0x80>
 8002e7e:	e7d1      	b.n	8002e24 <HAL_RCC_OscConfig+0x1b8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e80:	491a      	ldr	r1, [pc, #104]	; (8002eec <HAL_RCC_OscConfig+0x280>)
 8002e82:	6960      	ldr	r0, [r4, #20]
 8002e84:	680a      	ldr	r2, [r1, #0]
 8002e86:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8002e8a:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8002e8e:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e90:	071a      	lsls	r2, r3, #28
 8002e92:	f57f af58 	bpl.w	8002d46 <HAL_RCC_OscConfig+0xda>
 8002e96:	e776      	b.n	8002d86 <HAL_RCC_OscConfig+0x11a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e98:	6833      	ldr	r3, [r6, #0]
 8002e9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e9e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002ea0:	f7ff fcda 	bl	8002858 <HAL_GetTick>
 8002ea4:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ea6:	6833      	ldr	r3, [r6, #0]
 8002ea8:	05da      	lsls	r2, r3, #23
 8002eaa:	f53f af58 	bmi.w	8002d5e <HAL_RCC_OscConfig+0xf2>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eae:	f7ff fcd3 	bl	8002858 <HAL_GetTick>
 8002eb2:	1bc0      	subs	r0, r0, r7
 8002eb4:	2864      	cmp	r0, #100	; 0x64
 8002eb6:	d9f6      	bls.n	8002ea6 <HAL_RCC_OscConfig+0x23a>
            return HAL_TIMEOUT;
 8002eb8:	2003      	movs	r0, #3
}
 8002eba:	b002      	add	sp, #8
 8002ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ec0:	4d0a      	ldr	r5, [pc, #40]	; (8002eec <HAL_RCC_OscConfig+0x280>)
 8002ec2:	682b      	ldr	r3, [r5, #0]
 8002ec4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ec8:	602b      	str	r3, [r5, #0]
 8002eca:	682b      	ldr	r3, [r5, #0]
 8002ecc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ed0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002ed2:	f7ff fcc1 	bl	8002858 <HAL_GetTick>
 8002ed6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ed8:	e004      	b.n	8002ee4 <HAL_RCC_OscConfig+0x278>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002eda:	f7ff fcbd 	bl	8002858 <HAL_GetTick>
 8002ede:	1b80      	subs	r0, r0, r6
 8002ee0:	2864      	cmp	r0, #100	; 0x64
 8002ee2:	d8e9      	bhi.n	8002eb8 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ee4:	682b      	ldr	r3, [r5, #0]
 8002ee6:	039b      	lsls	r3, r3, #14
 8002ee8:	d4f7      	bmi.n	8002eda <HAL_RCC_OscConfig+0x26e>
 8002eea:	e6fe      	b.n	8002cea <HAL_RCC_OscConfig+0x7e>
 8002eec:	40021000 	.word	0x40021000
 8002ef0:	42420000 	.word	0x42420000
 8002ef4:	40007000 	.word	0x40007000
 8002ef8:	20000008 	.word	0x20000008
 8002efc:	10624dd3 	.word	0x10624dd3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f00:	4e50      	ldr	r6, [pc, #320]	; (8003044 <HAL_RCC_OscConfig+0x3d8>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f02:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f06:	6a33      	ldr	r3, [r6, #32]
 8002f08:	f023 0301 	bic.w	r3, r3, #1
 8002f0c:	6233      	str	r3, [r6, #32]
 8002f0e:	6a33      	ldr	r3, [r6, #32]
 8002f10:	f023 0304 	bic.w	r3, r3, #4
 8002f14:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 8002f16:	f7ff fc9f 	bl	8002858 <HAL_GetTick>
 8002f1a:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f1c:	e004      	b.n	8002f28 <HAL_RCC_OscConfig+0x2bc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f1e:	f7ff fc9b 	bl	8002858 <HAL_GetTick>
 8002f22:	1bc0      	subs	r0, r0, r7
 8002f24:	4540      	cmp	r0, r8
 8002f26:	d8c7      	bhi.n	8002eb8 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f28:	6a33      	ldr	r3, [r6, #32]
 8002f2a:	0798      	lsls	r0, r3, #30
 8002f2c:	d4f7      	bmi.n	8002f1e <HAL_RCC_OscConfig+0x2b2>
    if (pwrclkchanged == SET)
 8002f2e:	2d00      	cmp	r5, #0
 8002f30:	f43f af4e 	beq.w	8002dd0 <HAL_RCC_OscConfig+0x164>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f34:	4a43      	ldr	r2, [pc, #268]	; (8003044 <HAL_RCC_OscConfig+0x3d8>)
 8002f36:	69d3      	ldr	r3, [r2, #28]
 8002f38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f3c:	61d3      	str	r3, [r2, #28]
 8002f3e:	e747      	b.n	8002dd0 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 8002f40:	4a41      	ldr	r2, [pc, #260]	; (8003048 <HAL_RCC_OscConfig+0x3dc>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f42:	4e40      	ldr	r6, [pc, #256]	; (8003044 <HAL_RCC_OscConfig+0x3d8>)
        __HAL_RCC_HSI_DISABLE();
 8002f44:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002f46:	f7ff fc87 	bl	8002858 <HAL_GetTick>
 8002f4a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f4c:	e004      	b.n	8002f58 <HAL_RCC_OscConfig+0x2ec>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f4e:	f7ff fc83 	bl	8002858 <HAL_GetTick>
 8002f52:	1b40      	subs	r0, r0, r5
 8002f54:	2802      	cmp	r0, #2
 8002f56:	d8af      	bhi.n	8002eb8 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f58:	6833      	ldr	r3, [r6, #0]
 8002f5a:	0799      	lsls	r1, r3, #30
 8002f5c:	d4f7      	bmi.n	8002f4e <HAL_RCC_OscConfig+0x2e2>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f5e:	6823      	ldr	r3, [r4, #0]
 8002f60:	e6ef      	b.n	8002d42 <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f62:	4a38      	ldr	r2, [pc, #224]	; (8003044 <HAL_RCC_OscConfig+0x3d8>)
 8002f64:	6a13      	ldr	r3, [r2, #32]
 8002f66:	f043 0301 	orr.w	r3, r3, #1
 8002f6a:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 8002f6c:	f7ff fc74 	bl	8002858 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f70:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002f74:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f76:	4f33      	ldr	r7, [pc, #204]	; (8003044 <HAL_RCC_OscConfig+0x3d8>)
 8002f78:	e004      	b.n	8002f84 <HAL_RCC_OscConfig+0x318>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f7a:	f7ff fc6d 	bl	8002858 <HAL_GetTick>
 8002f7e:	1b80      	subs	r0, r0, r6
 8002f80:	4540      	cmp	r0, r8
 8002f82:	d899      	bhi.n	8002eb8 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f84:	6a3b      	ldr	r3, [r7, #32]
 8002f86:	079b      	lsls	r3, r3, #30
 8002f88:	d5f7      	bpl.n	8002f7a <HAL_RCC_OscConfig+0x30e>
    if (pwrclkchanged == SET)
 8002f8a:	2d00      	cmp	r5, #0
 8002f8c:	f43f af20 	beq.w	8002dd0 <HAL_RCC_OscConfig+0x164>
 8002f90:	e7d0      	b.n	8002f34 <HAL_RCC_OscConfig+0x2c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f92:	2801      	cmp	r0, #1
 8002f94:	f43f af38 	beq.w	8002e08 <HAL_RCC_OscConfig+0x19c>
        pll_config = RCC->CFGR;
 8002f98:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f9a:	6a22      	ldr	r2, [r4, #32]
 8002f9c:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8002fa0:	4291      	cmp	r1, r2
 8002fa2:	f47f af3f 	bne.w	8002e24 <HAL_RCC_OscConfig+0x1b8>
 8002fa6:	6a60      	ldr	r0, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002fa8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
  return HAL_OK;
 8002fac:	1a18      	subs	r0, r3, r0
 8002fae:	bf18      	it	ne
 8002fb0:	2001      	movne	r0, #1
 8002fb2:	e729      	b.n	8002e08 <HAL_RCC_OscConfig+0x19c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fb4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002fb8:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002fc2:	601a      	str	r2, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002fca:	601a      	str	r2, [r3, #0]
 8002fcc:	e67f      	b.n	8002cce <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fce:	f042 0204 	orr.w	r2, r2, #4
 8002fd2:	621a      	str	r2, [r3, #32]
 8002fd4:	6a1a      	ldr	r2, [r3, #32]
 8002fd6:	f042 0201 	orr.w	r2, r2, #1
 8002fda:	621a      	str	r2, [r3, #32]
 8002fdc:	e7c6      	b.n	8002f6c <HAL_RCC_OscConfig+0x300>
    return HAL_ERROR;
 8002fde:	2001      	movs	r0, #1
}
 8002fe0:	4770      	bx	lr
        tickstart = HAL_GetTick();
 8002fe2:	f7ff fc39 	bl	8002858 <HAL_GetTick>
 8002fe6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fe8:	e005      	b.n	8002ff6 <HAL_RCC_OscConfig+0x38a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fea:	f7ff fc35 	bl	8002858 <HAL_GetTick>
 8002fee:	1b80      	subs	r0, r0, r6
 8002ff0:	2802      	cmp	r0, #2
 8002ff2:	f63f af61 	bhi.w	8002eb8 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ff6:	682b      	ldr	r3, [r5, #0]
 8002ff8:	0199      	lsls	r1, r3, #6
 8002ffa:	d4f6      	bmi.n	8002fea <HAL_RCC_OscConfig+0x37e>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002ffc:	6a23      	ldr	r3, [r4, #32]
 8002ffe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003002:	d105      	bne.n	8003010 <HAL_RCC_OscConfig+0x3a4>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003004:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8003006:	68a1      	ldr	r1, [r4, #8]
 8003008:	f022 020f 	bic.w	r2, r2, #15
 800300c:	430a      	orrs	r2, r1
 800300e:	62ea      	str	r2, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8003010:	2001      	movs	r0, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003012:	4d0c      	ldr	r5, [pc, #48]	; (8003044 <HAL_RCC_OscConfig+0x3d8>)
 8003014:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003016:	686a      	ldr	r2, [r5, #4]
 8003018:	430b      	orrs	r3, r1
 800301a:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 800301e:	490a      	ldr	r1, [pc, #40]	; (8003048 <HAL_RCC_OscConfig+0x3dc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003020:	4313      	orrs	r3, r2
 8003022:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8003024:	6608      	str	r0, [r1, #96]	; 0x60
        tickstart = HAL_GetTick();
 8003026:	f7ff fc17 	bl	8002858 <HAL_GetTick>
 800302a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800302c:	e005      	b.n	800303a <HAL_RCC_OscConfig+0x3ce>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800302e:	f7ff fc13 	bl	8002858 <HAL_GetTick>
 8003032:	1b00      	subs	r0, r0, r4
 8003034:	2802      	cmp	r0, #2
 8003036:	f63f af3f 	bhi.w	8002eb8 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800303a:	682b      	ldr	r3, [r5, #0]
 800303c:	019a      	lsls	r2, r3, #6
 800303e:	d5f6      	bpl.n	800302e <HAL_RCC_OscConfig+0x3c2>
 8003040:	e6e1      	b.n	8002e06 <HAL_RCC_OscConfig+0x19a>
 8003042:	bf00      	nop
 8003044:	40021000 	.word	0x40021000
 8003048:	42420000 	.word	0x42420000

0800304c <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 800304c:	4a0e      	ldr	r2, [pc, #56]	; (8003088 <HAL_RCC_GetSysClockFreq+0x3c>)
 800304e:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8003050:	f003 010c 	and.w	r1, r3, #12
 8003054:	2908      	cmp	r1, #8
 8003056:	d001      	beq.n	800305c <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 8003058:	480c      	ldr	r0, [pc, #48]	; (800308c <HAL_RCC_GetSysClockFreq+0x40>)
}
 800305a:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800305c:	480c      	ldr	r0, [pc, #48]	; (8003090 <HAL_RCC_GetSysClockFreq+0x44>)
 800305e:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003062:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003064:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003066:	d50a      	bpl.n	800307e <HAL_RCC_GetSysClockFreq+0x32>
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003068:	4908      	ldr	r1, [pc, #32]	; (800308c <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 800306a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800306c:	fb01 f000 	mul.w	r0, r1, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8003070:	4a08      	ldr	r2, [pc, #32]	; (8003094 <HAL_RCC_GetSysClockFreq+0x48>)
 8003072:	f003 030f 	and.w	r3, r3, #15
 8003076:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003078:	fbb0 f0f3 	udiv	r0, r0, r3
 800307c:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800307e:	4b06      	ldr	r3, [pc, #24]	; (8003098 <HAL_RCC_GetSysClockFreq+0x4c>)
 8003080:	fb03 f000 	mul.w	r0, r3, r0
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	40021000 	.word	0x40021000
 800308c:	007a1200 	.word	0x007a1200
 8003090:	08003df8 	.word	0x08003df8
 8003094:	08003e08 	.word	0x08003e08
 8003098:	003d0900 	.word	0x003d0900

0800309c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800309c:	2800      	cmp	r0, #0
 800309e:	d06b      	beq.n	8003178 <HAL_RCC_ClockConfig+0xdc>
{
 80030a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030a2:	6803      	ldr	r3, [r0, #0]
 80030a4:	4604      	mov	r4, r0
 80030a6:	0799      	lsls	r1, r3, #30
 80030a8:	d514      	bpl.n	80030d4 <HAL_RCC_ClockConfig+0x38>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030aa:	075a      	lsls	r2, r3, #29
 80030ac:	d504      	bpl.n	80030b8 <HAL_RCC_ClockConfig+0x1c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030ae:	4933      	ldr	r1, [pc, #204]	; (800317c <HAL_RCC_ClockConfig+0xe0>)
 80030b0:	684a      	ldr	r2, [r1, #4]
 80030b2:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80030b6:	604a      	str	r2, [r1, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030b8:	071f      	lsls	r7, r3, #28
 80030ba:	d504      	bpl.n	80030c6 <HAL_RCC_ClockConfig+0x2a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030bc:	492f      	ldr	r1, [pc, #188]	; (800317c <HAL_RCC_ClockConfig+0xe0>)
 80030be:	684a      	ldr	r2, [r1, #4]
 80030c0:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 80030c4:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030c6:	492d      	ldr	r1, [pc, #180]	; (800317c <HAL_RCC_ClockConfig+0xe0>)
 80030c8:	68a0      	ldr	r0, [r4, #8]
 80030ca:	684a      	ldr	r2, [r1, #4]
 80030cc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80030d0:	4302      	orrs	r2, r0
 80030d2:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030d4:	07de      	lsls	r6, r3, #31
 80030d6:	d521      	bpl.n	800311c <HAL_RCC_ClockConfig+0x80>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030d8:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030da:	4b28      	ldr	r3, [pc, #160]	; (800317c <HAL_RCC_ClockConfig+0xe0>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030dc:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030de:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030e0:	d045      	beq.n	800316e <HAL_RCC_ClockConfig+0xd2>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030e2:	2a02      	cmp	r2, #2
 80030e4:	d03f      	beq.n	8003166 <HAL_RCC_ClockConfig+0xca>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030e6:	0799      	lsls	r1, r3, #30
 80030e8:	d53f      	bpl.n	800316a <HAL_RCC_ClockConfig+0xce>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030ea:	4d24      	ldr	r5, [pc, #144]	; (800317c <HAL_RCC_ClockConfig+0xe0>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030ec:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030f0:	686b      	ldr	r3, [r5, #4]
 80030f2:	f023 0303 	bic.w	r3, r3, #3
 80030f6:	4313      	orrs	r3, r2
 80030f8:	606b      	str	r3, [r5, #4]
    tickstart = HAL_GetTick();
 80030fa:	f7ff fbad 	bl	8002858 <HAL_GetTick>
 80030fe:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003100:	e004      	b.n	800310c <HAL_RCC_ClockConfig+0x70>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003102:	f7ff fba9 	bl	8002858 <HAL_GetTick>
 8003106:	1b83      	subs	r3, r0, r6
 8003108:	42bb      	cmp	r3, r7
 800310a:	d833      	bhi.n	8003174 <HAL_RCC_ClockConfig+0xd8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800310c:	686b      	ldr	r3, [r5, #4]
 800310e:	6862      	ldr	r2, [r4, #4]
 8003110:	f003 030c 	and.w	r3, r3, #12
 8003114:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003118:	d1f3      	bne.n	8003102 <HAL_RCC_ClockConfig+0x66>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800311a:	6823      	ldr	r3, [r4, #0]
 800311c:	075a      	lsls	r2, r3, #29
 800311e:	d506      	bpl.n	800312e <HAL_RCC_ClockConfig+0x92>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003120:	4916      	ldr	r1, [pc, #88]	; (800317c <HAL_RCC_ClockConfig+0xe0>)
 8003122:	68e0      	ldr	r0, [r4, #12]
 8003124:	684a      	ldr	r2, [r1, #4]
 8003126:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800312a:	4302      	orrs	r2, r0
 800312c:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800312e:	071b      	lsls	r3, r3, #28
 8003130:	d507      	bpl.n	8003142 <HAL_RCC_ClockConfig+0xa6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003132:	4a12      	ldr	r2, [pc, #72]	; (800317c <HAL_RCC_ClockConfig+0xe0>)
 8003134:	6921      	ldr	r1, [r4, #16]
 8003136:	6853      	ldr	r3, [r2, #4]
 8003138:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800313c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003140:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003142:	f7ff ff83 	bl	800304c <HAL_RCC_GetSysClockFreq>
 8003146:	4603      	mov	r3, r0
 8003148:	4a0c      	ldr	r2, [pc, #48]	; (800317c <HAL_RCC_ClockConfig+0xe0>)
 800314a:	490d      	ldr	r1, [pc, #52]	; (8003180 <HAL_RCC_ClockConfig+0xe4>)
 800314c:	6852      	ldr	r2, [r2, #4]
  HAL_InitTick(uwTickPrio);
 800314e:	480d      	ldr	r0, [pc, #52]	; (8003184 <HAL_RCC_ClockConfig+0xe8>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003150:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8003154:	5c89      	ldrb	r1, [r1, r2]
 8003156:	4a0c      	ldr	r2, [pc, #48]	; (8003188 <HAL_RCC_ClockConfig+0xec>)
 8003158:	40cb      	lsrs	r3, r1
  HAL_InitTick(uwTickPrio);
 800315a:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800315c:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 800315e:	f000 f9af 	bl	80034c0 <HAL_InitTick>
  return HAL_OK;
 8003162:	2000      	movs	r0, #0
}
 8003164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003166:	0198      	lsls	r0, r3, #6
 8003168:	d4bf      	bmi.n	80030ea <HAL_RCC_ClockConfig+0x4e>
    return HAL_ERROR;
 800316a:	2001      	movs	r0, #1
}
 800316c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800316e:	039d      	lsls	r5, r3, #14
 8003170:	d4bb      	bmi.n	80030ea <HAL_RCC_ClockConfig+0x4e>
 8003172:	e7fa      	b.n	800316a <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8003174:	2003      	movs	r0, #3
}
 8003176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8003178:	2001      	movs	r0, #1
}
 800317a:	4770      	bx	lr
 800317c:	40021000 	.word	0x40021000
 8003180:	08003e18 	.word	0x08003e18
 8003184:	20000004 	.word	0x20000004
 8003188:	20000008 	.word	0x20000008

0800318c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800318c:	4b04      	ldr	r3, [pc, #16]	; (80031a0 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 800318e:	4a05      	ldr	r2, [pc, #20]	; (80031a4 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	4905      	ldr	r1, [pc, #20]	; (80031a8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003194:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8003198:	5ccb      	ldrb	r3, [r1, r3]
 800319a:	6810      	ldr	r0, [r2, #0]
}
 800319c:	40d8      	lsrs	r0, r3
 800319e:	4770      	bx	lr
 80031a0:	40021000 	.word	0x40021000
 80031a4:	20000008 	.word	0x20000008
 80031a8:	08003e28 	.word	0x08003e28

080031ac <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80031ac:	4b04      	ldr	r3, [pc, #16]	; (80031c0 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 80031ae:	4a05      	ldr	r2, [pc, #20]	; (80031c4 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	4905      	ldr	r1, [pc, #20]	; (80031c8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80031b4:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80031b8:	5ccb      	ldrb	r3, [r1, r3]
 80031ba:	6810      	ldr	r0, [r2, #0]
}
 80031bc:	40d8      	lsrs	r0, r3
 80031be:	4770      	bx	lr
 80031c0:	40021000 	.word	0x40021000
 80031c4:	20000008 	.word	0x20000008
 80031c8:	08003e28 	.word	0x08003e28

080031cc <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80031cc:	220f      	movs	r2, #15
{
 80031ce:	b410      	push	{r4}
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
 80031d0:	2400      	movs	r4, #0
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80031d2:	4b0b      	ldr	r3, [pc, #44]	; (8003200 <HAL_RCC_GetClockConfig+0x34>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80031d4:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80031d6:	685a      	ldr	r2, [r3, #4]
 80031d8:	f002 0203 	and.w	r2, r2, #3
 80031dc:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80031de:	685a      	ldr	r2, [r3, #4]
 80031e0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80031e4:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80031e6:	685a      	ldr	r2, [r3, #4]
 80031e8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80031ec:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	08db      	lsrs	r3, r3, #3
 80031f2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80031f6:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
 80031f8:	600c      	str	r4, [r1, #0]
}
 80031fa:	bc10      	pop	{r4}
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	40021000 	.word	0x40021000

08003204 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop

08003208 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003208:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800320c:	2b01      	cmp	r3, #1
 800320e:	d123      	bne.n	8003258 <HAL_TIM_Base_Start_IT+0x50>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003210:	2202      	movs	r2, #2

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003212:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003214:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003218:	68da      	ldr	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800321a:	4911      	ldr	r1, [pc, #68]	; (8003260 <HAL_TIM_Base_Start_IT+0x58>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800321c:	f042 0201 	orr.w	r2, r2, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003220:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003222:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003224:	d00d      	beq.n	8003242 <HAL_TIM_Base_Start_IT+0x3a>
 8003226:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800322a:	d00a      	beq.n	8003242 <HAL_TIM_Base_Start_IT+0x3a>
 800322c:	4a0d      	ldr	r2, [pc, #52]	; (8003264 <HAL_TIM_Base_Start_IT+0x5c>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d007      	beq.n	8003242 <HAL_TIM_Base_Start_IT+0x3a>
 8003232:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003236:	4293      	cmp	r3, r2
 8003238:	d003      	beq.n	8003242 <HAL_TIM_Base_Start_IT+0x3a>
 800323a:	f502 329c 	add.w	r2, r2, #79872	; 0x13800
 800323e:	4293      	cmp	r3, r2
 8003240:	d104      	bne.n	800324c <HAL_TIM_Base_Start_IT+0x44>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003242:	689a      	ldr	r2, [r3, #8]
 8003244:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003248:	2a06      	cmp	r2, #6
 800324a:	d007      	beq.n	800325c <HAL_TIM_Base_Start_IT+0x54>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800324c:	681a      	ldr	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800324e:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8003250:	f042 0201 	orr.w	r2, r2, #1
 8003254:	601a      	str	r2, [r3, #0]
 8003256:	4770      	bx	lr
    return HAL_ERROR;
 8003258:	2001      	movs	r0, #1
 800325a:	4770      	bx	lr
  return HAL_OK;
 800325c:	2000      	movs	r0, #0
}
 800325e:	4770      	bx	lr
 8003260:	40012c00 	.word	0x40012c00
 8003264:	40000400 	.word	0x40000400

08003268 <HAL_TIM_OC_DelayElapsedCallback>:
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop

0800326c <HAL_TIM_IC_CaptureCallback>:
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop

08003270 <HAL_TIM_PWM_PulseFinishedCallback>:
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop

08003274 <HAL_TIM_TriggerCallback>:
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop

08003278 <HAL_TIM_IRQHandler>:
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  uint32_t itsource = htim->Instance->DIER;
 8003278:	6803      	ldr	r3, [r0, #0]
{
 800327a:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 800327c:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 800327e:	691d      	ldr	r5, [r3, #16]
{
 8003280:	4604      	mov	r4, r0

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003282:	07a9      	lsls	r1, r5, #30
 8003284:	d501      	bpl.n	800328a <HAL_TIM_IRQHandler+0x12>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003286:	07b2      	lsls	r2, r6, #30
 8003288:	d451      	bmi.n	800332e <HAL_TIM_IRQHandler+0xb6>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800328a:	0769      	lsls	r1, r5, #29
 800328c:	d501      	bpl.n	8003292 <HAL_TIM_IRQHandler+0x1a>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800328e:	0772      	lsls	r2, r6, #29
 8003290:	d43a      	bmi.n	8003308 <HAL_TIM_IRQHandler+0x90>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003292:	072b      	lsls	r3, r5, #28
 8003294:	d501      	bpl.n	800329a <HAL_TIM_IRQHandler+0x22>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003296:	0730      	lsls	r0, r6, #28
 8003298:	d424      	bmi.n	80032e4 <HAL_TIM_IRQHandler+0x6c>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800329a:	06ea      	lsls	r2, r5, #27
 800329c:	d501      	bpl.n	80032a2 <HAL_TIM_IRQHandler+0x2a>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800329e:	06f3      	lsls	r3, r6, #27
 80032a0:	d410      	bmi.n	80032c4 <HAL_TIM_IRQHandler+0x4c>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80032a2:	07e8      	lsls	r0, r5, #31
 80032a4:	d501      	bpl.n	80032aa <HAL_TIM_IRQHandler+0x32>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80032a6:	07f1      	lsls	r1, r6, #31
 80032a8:	d457      	bmi.n	800335a <HAL_TIM_IRQHandler+0xe2>
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80032aa:	062a      	lsls	r2, r5, #24
 80032ac:	d501      	bpl.n	80032b2 <HAL_TIM_IRQHandler+0x3a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80032ae:	0633      	lsls	r3, r6, #24
 80032b0:	d45b      	bmi.n	800336a <HAL_TIM_IRQHandler+0xf2>
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80032b2:	0668      	lsls	r0, r5, #25
 80032b4:	d501      	bpl.n	80032ba <HAL_TIM_IRQHandler+0x42>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80032b6:	0671      	lsls	r1, r6, #25
 80032b8:	d45f      	bmi.n	800337a <HAL_TIM_IRQHandler+0x102>
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80032ba:	06aa      	lsls	r2, r5, #26
 80032bc:	d501      	bpl.n	80032c2 <HAL_TIM_IRQHandler+0x4a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80032be:	06b3      	lsls	r3, r6, #26
 80032c0:	d442      	bmi.n	8003348 <HAL_TIM_IRQHandler+0xd0>
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032c2:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80032c4:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032c8:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80032ca:	6823      	ldr	r3, [r4, #0]
        HAL_TIM_IC_CaptureCallback(htim);
 80032cc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80032ce:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032d0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032d2:	69db      	ldr	r3, [r3, #28]
 80032d4:	f413 7f40 	tst.w	r3, #768	; 0x300
 80032d8:	d063      	beq.n	80033a2 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80032da:	f7ff ffc7 	bl	800326c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032de:	2300      	movs	r3, #0
 80032e0:	7723      	strb	r3, [r4, #28]
 80032e2:	e7de      	b.n	80032a2 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80032e4:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032e8:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80032ea:	6823      	ldr	r3, [r4, #0]
        HAL_TIM_IC_CaptureCallback(htim);
 80032ec:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80032ee:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032f0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032f2:	69db      	ldr	r3, [r3, #28]
 80032f4:	0799      	lsls	r1, r3, #30
 80032f6:	d151      	bne.n	800339c <HAL_TIM_IRQHandler+0x124>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032f8:	f7ff ffb6 	bl	8003268 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032fc:	4620      	mov	r0, r4
 80032fe:	f7ff ffb7 	bl	8003270 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003302:	2300      	movs	r3, #0
 8003304:	7723      	strb	r3, [r4, #28]
 8003306:	e7c8      	b.n	800329a <HAL_TIM_IRQHandler+0x22>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003308:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800330c:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800330e:	6823      	ldr	r3, [r4, #0]
        HAL_TIM_IC_CaptureCallback(htim);
 8003310:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003312:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003314:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003316:	699b      	ldr	r3, [r3, #24]
 8003318:	f413 7f40 	tst.w	r3, #768	; 0x300
 800331c:	d13b      	bne.n	8003396 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800331e:	f7ff ffa3 	bl	8003268 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003322:	4620      	mov	r0, r4
 8003324:	f7ff ffa4 	bl	8003270 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003328:	2300      	movs	r3, #0
 800332a:	7723      	strb	r3, [r4, #28]
 800332c:	e7b1      	b.n	8003292 <HAL_TIM_IRQHandler+0x1a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800332e:	f06f 0202 	mvn.w	r2, #2
 8003332:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003334:	2201      	movs	r2, #1
 8003336:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	079b      	lsls	r3, r3, #30
 800333c:	d025      	beq.n	800338a <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 800333e:	f7ff ff95 	bl	800326c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003342:	2300      	movs	r3, #0
 8003344:	7723      	strb	r3, [r4, #28]
 8003346:	e7a0      	b.n	800328a <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003348:	f06f 0220 	mvn.w	r2, #32
 800334c:	6823      	ldr	r3, [r4, #0]
      HAL_TIMEx_CommutCallback(htim);
 800334e:	4620      	mov	r0, r4
}
 8003350:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003354:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8003356:	f000 b8af 	b.w	80034b8 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800335a:	f06f 0201 	mvn.w	r2, #1
 800335e:	6823      	ldr	r3, [r4, #0]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003360:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003362:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003364:	f7fd ff7a 	bl	800125c <HAL_TIM_PeriodElapsedCallback>
 8003368:	e79f      	b.n	80032aa <HAL_TIM_IRQHandler+0x32>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800336a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800336e:	6823      	ldr	r3, [r4, #0]
      HAL_TIMEx_BreakCallback(htim);
 8003370:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003372:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003374:	f000 f8a2 	bl	80034bc <HAL_TIMEx_BreakCallback>
 8003378:	e79b      	b.n	80032b2 <HAL_TIM_IRQHandler+0x3a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800337a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800337e:	6823      	ldr	r3, [r4, #0]
      HAL_TIM_TriggerCallback(htim);
 8003380:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003382:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003384:	f7ff ff76 	bl	8003274 <HAL_TIM_TriggerCallback>
 8003388:	e797      	b.n	80032ba <HAL_TIM_IRQHandler+0x42>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800338a:	f7ff ff6d 	bl	8003268 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800338e:	4620      	mov	r0, r4
 8003390:	f7ff ff6e 	bl	8003270 <HAL_TIM_PWM_PulseFinishedCallback>
 8003394:	e7d5      	b.n	8003342 <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 8003396:	f7ff ff69 	bl	800326c <HAL_TIM_IC_CaptureCallback>
 800339a:	e7c5      	b.n	8003328 <HAL_TIM_IRQHandler+0xb0>
        HAL_TIM_IC_CaptureCallback(htim);
 800339c:	f7ff ff66 	bl	800326c <HAL_TIM_IC_CaptureCallback>
 80033a0:	e7af      	b.n	8003302 <HAL_TIM_IRQHandler+0x8a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033a2:	f7ff ff61 	bl	8003268 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033a6:	4620      	mov	r0, r4
 80033a8:	f7ff ff62 	bl	8003270 <HAL_TIM_PWM_PulseFinishedCallback>
 80033ac:	e797      	b.n	80032de <HAL_TIM_IRQHandler+0x66>
 80033ae:	bf00      	nop

080033b0 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033b0:	4a29      	ldr	r2, [pc, #164]	; (8003458 <TIM_Base_SetConfig+0xa8>)
{
 80033b2:	b430      	push	{r4, r5}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033b4:	4290      	cmp	r0, r2
  tmpcr1 = TIMx->CR1;
 80033b6:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033b8:	d038      	beq.n	800342c <TIM_Base_SetConfig+0x7c>
 80033ba:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80033be:	d01c      	beq.n	80033fa <TIM_Base_SetConfig+0x4a>
 80033c0:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80033c4:	4290      	cmp	r0, r2
 80033c6:	d018      	beq.n	80033fa <TIM_Base_SetConfig+0x4a>
 80033c8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80033cc:	4290      	cmp	r0, r2
 80033ce:	d014      	beq.n	80033fa <TIM_Base_SetConfig+0x4a>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033d0:	f502 329c 	add.w	r2, r2, #79872	; 0x13800
 80033d4:	4290      	cmp	r0, r2
 80033d6:	d03c      	beq.n	8003452 <TIM_Base_SetConfig+0xa2>
 80033d8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80033dc:	4290      	cmp	r0, r2
 80033de:	d038      	beq.n	8003452 <TIM_Base_SetConfig+0xa2>
 80033e0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80033e4:	4290      	cmp	r0, r2
 80033e6:	d034      	beq.n	8003452 <TIM_Base_SetConfig+0xa2>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033e8:	694c      	ldr	r4, [r1, #20]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033ea:	688d      	ldr	r5, [r1, #8]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033ec:	680a      	ldr	r2, [r1, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033f2:	62c5      	str	r5, [r0, #44]	; 0x2c
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033f4:	4323      	orrs	r3, r4
  TIMx->PSC = Structure->Prescaler;
 80033f6:	6282      	str	r2, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033f8:	e00f      	b.n	800341a <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 80033fa:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003400:	68cc      	ldr	r4, [r1, #12]
    tmpcr1 |= Structure->CounterMode;
 8003402:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8003404:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003408:	694a      	ldr	r2, [r1, #20]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800340a:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800340c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003410:	688c      	ldr	r4, [r1, #8]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003412:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 8003414:	680a      	ldr	r2, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003416:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003418:	6282      	str	r2, [r0, #40]	; 0x28
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800341a:	2101      	movs	r1, #1

  TIMx->CR1 = tmpcr1;
}
 800341c:	bc30      	pop	{r4, r5}
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800341e:	6802      	ldr	r2, [r0, #0]
 8003420:	f042 0204 	orr.w	r2, r2, #4
 8003424:	6002      	str	r2, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 8003426:	6141      	str	r1, [r0, #20]
  TIMx->CR1 = tmpcr1;
 8003428:	6003      	str	r3, [r0, #0]
}
 800342a:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 800342c:	684d      	ldr	r5, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800342e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003432:	688a      	ldr	r2, [r1, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003434:	68cc      	ldr	r4, [r1, #12]
    tmpcr1 |= Structure->CounterMode;
 8003436:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 8003438:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800343c:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800343e:	694c      	ldr	r4, [r1, #20]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003440:	62c2      	str	r2, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003442:	680a      	ldr	r2, [r1, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003444:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->PSC = Structure->Prescaler;
 8003448:	6282      	str	r2, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800344a:	690a      	ldr	r2, [r1, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800344c:	4323      	orrs	r3, r4
    TIMx->RCR = Structure->RepetitionCounter;
 800344e:	6302      	str	r2, [r0, #48]	; 0x30
 8003450:	e7e3      	b.n	800341a <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003452:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
 8003456:	e7ef      	b.n	8003438 <TIM_Base_SetConfig+0x88>
 8003458:	40012c00 	.word	0x40012c00

0800345c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800345c:	b350      	cbz	r0, 80034b4 <HAL_TIM_Base_Init+0x58>
{
 800345e:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8003460:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003464:	4604      	mov	r4, r0
 8003466:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800346a:	b1f3      	cbz	r3, 80034aa <HAL_TIM_Base_Init+0x4e>
  htim->State = HAL_TIM_STATE_BUSY;
 800346c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800346e:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8003470:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003474:	f851 0b04 	ldr.w	r0, [r1], #4
 8003478:	f7ff ff9a 	bl	80033b0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800347c:	2301      	movs	r3, #1
 800347e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003482:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003486:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800348a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800348e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003492:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003496:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800349a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800349e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80034a2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80034a6:	2000      	movs	r0, #0
}
 80034a8:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80034aa:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80034ae:	f7ff fea9 	bl	8003204 <HAL_TIM_Base_MspInit>
 80034b2:	e7db      	b.n	800346c <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 80034b4:	2001      	movs	r0, #1
}
 80034b6:	4770      	bx	lr

080034b8 <HAL_TIMEx_CommutCallback>:
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop

080034bc <HAL_TIMEx_BreakCallback>:
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop

080034c0 <HAL_InitTick>:
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 80034c0:	4b23      	ldr	r3, [pc, #140]	; (8003550 <HAL_InitTick+0x90>)
{
 80034c2:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_TIM7_CLK_ENABLE();
 80034c4:	69da      	ldr	r2, [r3, #28]
{
 80034c6:	b088      	sub	sp, #32
  __HAL_RCC_TIM7_CLK_ENABLE();
 80034c8:	f042 0220 	orr.w	r2, r2, #32
 80034cc:	61da      	str	r2, [r3, #28]
 80034ce:	69db      	ldr	r3, [r3, #28]
{
 80034d0:	4605      	mov	r5, r0
  __HAL_RCC_TIM7_CLK_ENABLE();
 80034d2:	f003 0320 	and.w	r3, r3, #32
 80034d6:	9302      	str	r3, [sp, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80034d8:	a901      	add	r1, sp, #4
 80034da:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM7_CLK_ENABLE();
 80034dc:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80034de:	f7ff fe75 	bl	80031cc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80034e2:	9b06      	ldr	r3, [sp, #24]
 80034e4:	b9d3      	cbnz	r3, 800351c <HAL_InitTick+0x5c>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80034e6:	f7ff fe51 	bl	800318c <HAL_RCC_GetPCLK1Freq>
 80034ea:	4603      	mov	r3, r0
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
  htim7.Init.Prescaler = uwPrescalerValue;
  htim7.Init.ClockDivision = 0;
 80034ec:	2200      	movs	r2, #0
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 80034ee:	f240 31e7 	movw	r1, #999	; 0x3e7
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80034f2:	4818      	ldr	r0, [pc, #96]	; (8003554 <HAL_InitTick+0x94>)
  htim7.Instance = TIM7;
 80034f4:	4c18      	ldr	r4, [pc, #96]	; (8003558 <HAL_InitTick+0x98>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80034f6:	fba0 0303 	umull	r0, r3, r0, r3
 80034fa:	0c9b      	lsrs	r3, r3, #18
 80034fc:	3b01      	subs	r3, #1
  htim7.Init.Prescaler = uwPrescalerValue;
 80034fe:	6063      	str	r3, [r4, #4]
  htim7.Instance = TIM7;
 8003500:	4b16      	ldr	r3, [pc, #88]	; (800355c <HAL_InitTick+0x9c>)
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim7);
 8003502:	4620      	mov	r0, r4
  htim7.Init.ClockDivision = 0;
 8003504:	e9c4 1203 	strd	r1, r2, [r4, #12]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003508:	60a2      	str	r2, [r4, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800350a:	61a2      	str	r2, [r4, #24]
  htim7.Instance = TIM7;
 800350c:	6023      	str	r3, [r4, #0]
  status = HAL_TIM_Base_Init(&htim7);
 800350e:	f7ff ffa5 	bl	800345c <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8003512:	4606      	mov	r6, r0
 8003514:	b130      	cbz	r0, 8003524 <HAL_InitTick+0x64>
    }
  }

 /* Return function status */
  return status;
}
 8003516:	4630      	mov	r0, r6
 8003518:	b008      	add	sp, #32
 800351a:	bd70      	pop	{r4, r5, r6, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800351c:	f7ff fe36 	bl	800318c <HAL_RCC_GetPCLK1Freq>
 8003520:	0043      	lsls	r3, r0, #1
 8003522:	e7e3      	b.n	80034ec <HAL_InitTick+0x2c>
    status = HAL_TIM_Base_Start_IT(&htim7);
 8003524:	4620      	mov	r0, r4
 8003526:	f7ff fe6f 	bl	8003208 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 800352a:	4606      	mov	r6, r0
 800352c:	2800      	cmp	r0, #0
 800352e:	d1f2      	bne.n	8003516 <HAL_InitTick+0x56>
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003530:	2037      	movs	r0, #55	; 0x37
 8003532:	f7ff f9e7 	bl	8002904 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003536:	2d0f      	cmp	r5, #15
 8003538:	d901      	bls.n	800353e <HAL_InitTick+0x7e>
        status = HAL_ERROR;
 800353a:	2601      	movs	r6, #1
 800353c:	e7eb      	b.n	8003516 <HAL_InitTick+0x56>
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 800353e:	4632      	mov	r2, r6
 8003540:	4629      	mov	r1, r5
 8003542:	2037      	movs	r0, #55	; 0x37
 8003544:	f7ff f9a0 	bl	8002888 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003548:	4b05      	ldr	r3, [pc, #20]	; (8003560 <HAL_InitTick+0xa0>)
 800354a:	601d      	str	r5, [r3, #0]
 800354c:	e7e3      	b.n	8003516 <HAL_InitTick+0x56>
 800354e:	bf00      	nop
 8003550:	40021000 	.word	0x40021000
 8003554:	431bde83 	.word	0x431bde83
 8003558:	2000056c 	.word	0x2000056c
 800355c:	40001400 	.word	0x40001400
 8003560:	20000004 	.word	0x20000004

08003564 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003564:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003566:	f102 030c 	add.w	r3, r2, #12
 800356a:	e853 3f00 	ldrex	r3, [r3]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800356e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003572:	f102 0c0c 	add.w	ip, r2, #12
 8003576:	e84c 3100 	strex	r1, r3, [ip]
 800357a:	2900      	cmp	r1, #0
 800357c:	d1f3      	bne.n	8003566 <UART_EndRxTransfer+0x2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800357e:	f102 0314 	add.w	r3, r2, #20
 8003582:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003586:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800358a:	f102 0c14 	add.w	ip, r2, #20
 800358e:	e84c 3100 	strex	r1, r3, [ip]
 8003592:	2900      	cmp	r1, #0
 8003594:	d1f3      	bne.n	800357e <UART_EndRxTransfer+0x1a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003596:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003598:	2b01      	cmp	r3, #1
 800359a:	d005      	beq.n	80035a8 <UART_EndRxTransfer+0x44>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800359c:	2220      	movs	r2, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800359e:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 80035a0:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035a4:	6303      	str	r3, [r0, #48]	; 0x30
}
 80035a6:	4770      	bx	lr
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035a8:	f102 030c 	add.w	r3, r2, #12
 80035ac:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035b0:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035b4:	f102 0c0c 	add.w	ip, r2, #12
 80035b8:	e84c 3100 	strex	r1, r3, [ip]
 80035bc:	2900      	cmp	r1, #0
 80035be:	d1f3      	bne.n	80035a8 <UART_EndRxTransfer+0x44>
 80035c0:	e7ec      	b.n	800359c <UART_EndRxTransfer+0x38>
 80035c2:	bf00      	nop

080035c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035c4:	b538      	push	{r3, r4, r5, lr}
 80035c6:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035c8:	6802      	ldr	r2, [r0, #0]
 80035ca:	68c1      	ldr	r1, [r0, #12]
 80035cc:	6913      	ldr	r3, [r2, #16]
  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);


  if(huart->Instance == USART1)
 80035ce:	4d2d      	ldr	r5, [pc, #180]	; (8003684 <UART_SetConfig+0xc0>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035d0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80035d4:	430b      	orrs	r3, r1
 80035d6:	6113      	str	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80035d8:	6883      	ldr	r3, [r0, #8]
 80035da:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 80035dc:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80035de:	4303      	orrs	r3, r0
 80035e0:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 80035e2:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80035e6:	4303      	orrs	r3, r0
 80035e8:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 80035ea:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80035ee:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 80035f0:	430b      	orrs	r3, r1
 80035f2:	60d3      	str	r3, [r2, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80035f4:	6953      	ldr	r3, [r2, #20]
 80035f6:	69a1      	ldr	r1, [r4, #24]
 80035f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035fc:	430b      	orrs	r3, r1
  if(huart->Instance == USART1)
 80035fe:	42aa      	cmp	r2, r5
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003600:	6153      	str	r3, [r2, #20]
  if(huart->Instance == USART1)
 8003602:	d03c      	beq.n	800367e <UART_SetConfig+0xba>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003604:	f7ff fdc2 	bl	800318c <HAL_RCC_GetPCLK1Freq>
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART_CR1_OVER8)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003608:	69e3      	ldr	r3, [r4, #28]
 800360a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800360e:	d018      	beq.n	8003642 <UART_SetConfig+0x7e>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003610:	6862      	ldr	r2, [r4, #4]
 8003612:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8003616:	0092      	lsls	r2, r2, #2
 8003618:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800361c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003620:	2564      	movs	r5, #100	; 0x64
 8003622:	4919      	ldr	r1, [pc, #100]	; (8003688 <UART_SetConfig+0xc4>)
 8003624:	6820      	ldr	r0, [r4, #0]
 8003626:	fba1 4203 	umull	r4, r2, r1, r3
 800362a:	0952      	lsrs	r2, r2, #5
 800362c:	fb05 3312 	mls	r3, r5, r2, r3
 8003630:	011b      	lsls	r3, r3, #4
 8003632:	3332      	adds	r3, #50	; 0x32
 8003634:	fba1 1303 	umull	r1, r3, r1, r3
 8003638:	0112      	lsls	r2, r2, #4
 800363a:	eb02 1353 	add.w	r3, r2, r3, lsr #5
 800363e:	6083      	str	r3, [r0, #8]
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
#endif /* USART_CR1_OVER8 */
}
 8003640:	bd38      	pop	{r3, r4, r5, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003642:	6863      	ldr	r3, [r4, #4]
 8003644:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8003648:	005b      	lsls	r3, r3, #1
 800364a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800364e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003652:	2364      	movs	r3, #100	; 0x64
 8003654:	480c      	ldr	r0, [pc, #48]	; (8003688 <UART_SetConfig+0xc4>)
 8003656:	6824      	ldr	r4, [r4, #0]
 8003658:	fba0 5102 	umull	r5, r1, r0, r2
 800365c:	0949      	lsrs	r1, r1, #5
 800365e:	fb03 2311 	mls	r3, r3, r1, r2
 8003662:	00db      	lsls	r3, r3, #3
 8003664:	3332      	adds	r3, #50	; 0x32
 8003666:	fba0 2303 	umull	r2, r3, r0, r3
 800366a:	f3c3 1242 	ubfx	r2, r3, #5, #3
 800366e:	091b      	lsrs	r3, r3, #4
 8003670:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8003674:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003678:	4413      	add	r3, r2
 800367a:	60a3      	str	r3, [r4, #8]
}
 800367c:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 800367e:	f7ff fd95 	bl	80031ac <HAL_RCC_GetPCLK2Freq>
 8003682:	e7c1      	b.n	8003608 <UART_SetConfig+0x44>
 8003684:	40013800 	.word	0x40013800
 8003688:	51eb851f 	.word	0x51eb851f

0800368c <HAL_UART_Init>:
  if (huart == NULL)
 800368c:	b370      	cbz	r0, 80036ec <HAL_UART_Init+0x60>
{
 800368e:	b510      	push	{r4, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 8003690:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003694:	4604      	mov	r4, r0
 8003696:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800369a:	b313      	cbz	r3, 80036e2 <HAL_UART_Init+0x56>
  huart->gState = HAL_UART_STATE_BUSY;
 800369c:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800369e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80036a0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UART_DISABLE(huart);
 80036a4:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 80036a6:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80036a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80036ac:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80036ae:	f7ff ff89 	bl	80035c4 <UART_SetConfig>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036b2:	2200      	movs	r2, #0
  huart->gState = HAL_UART_STATE_READY;
 80036b4:	f04f 0c20 	mov.w	ip, #32
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036b8:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
 80036ba:	4610      	mov	r0, r2
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036bc:	6919      	ldr	r1, [r3, #16]
 80036be:	f421 4190 	bic.w	r1, r1, #18432	; 0x4800
 80036c2:	6119      	str	r1, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036c4:	6959      	ldr	r1, [r3, #20]
 80036c6:	f021 012a 	bic.w	r1, r1, #42	; 0x2a
 80036ca:	6159      	str	r1, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80036cc:	68d9      	ldr	r1, [r3, #12]
 80036ce:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 80036d2:	60d9      	str	r1, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036d4:	6462      	str	r2, [r4, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80036d6:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80036da:	f884 c042 	strb.w	ip, [r4, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036de:	6362      	str	r2, [r4, #52]	; 0x34
}
 80036e0:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80036e2:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_UART_MspInit(huart);
 80036e6:	f7fd fcc1 	bl	800106c <HAL_UART_MspInit>
 80036ea:	e7d7      	b.n	800369c <HAL_UART_Init+0x10>
    return HAL_ERROR;
 80036ec:	2001      	movs	r0, #1
}
 80036ee:	4770      	bx	lr

080036f0 <HAL_UART_TxCpltCallback>:
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop

080036f4 <HAL_UART_RxCpltCallback>:
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop

080036f8 <HAL_UART_ErrorCallback>:
 80036f8:	4770      	bx	lr
 80036fa:	bf00      	nop

080036fc <UART_DMAAbortOnError>:
{
 80036fc:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 80036fe:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003700:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8003702:	85c3      	strh	r3, [r0, #46]	; 0x2e
  HAL_UART_ErrorCallback(huart);
 8003704:	f7ff fff8 	bl	80036f8 <HAL_UART_ErrorCallback>
}
 8003708:	bd08      	pop	{r3, pc}
 800370a:	bf00      	nop

0800370c <HAL_UARTEx_RxEventCallback>:
}
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop

08003710 <UART_Receive_IT.part.0.isra.0>:
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003710:	6883      	ldr	r3, [r0, #8]
 8003712:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003716:	d045      	beq.n	80037a4 <UART_Receive_IT.part.0.isra.0+0x94>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003718:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800371a:	2b00      	cmp	r3, #0
 800371c:	d03a      	beq.n	8003794 <UART_Receive_IT.part.0.isra.0+0x84>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800371e:	6803      	ldr	r3, [r0, #0]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003726:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8003728:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800372a:	3301      	adds	r3, #1
 800372c:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 800372e:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8003730:	3b01      	subs	r3, #1
 8003732:	b29b      	uxth	r3, r3
 8003734:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8003736:	2b00      	cmp	r3, #0
 8003738:	d133      	bne.n	80037a2 <UART_Receive_IT.part.0.isra.0+0x92>
      huart->RxState = HAL_UART_STATE_READY;
 800373a:	f04f 0c20 	mov.w	ip, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800373e:	6802      	ldr	r2, [r0, #0]
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8003740:	b500      	push	{lr}
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003742:	68d1      	ldr	r1, [r2, #12]
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8003744:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003746:	f021 0120 	bic.w	r1, r1, #32
 800374a:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800374c:	68d1      	ldr	r1, [r2, #12]
 800374e:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8003752:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003754:	6951      	ldr	r1, [r2, #20]
 8003756:	f021 0101 	bic.w	r1, r1, #1
 800375a:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800375c:	f880 c042 	strb.w	ip, [r0, #66]	; 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003760:	6343      	str	r3, [r0, #52]	; 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003762:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8003764:	2901      	cmp	r1, #1
 8003766:	d128      	bne.n	80037ba <UART_Receive_IT.part.0.isra.0+0xaa>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003768:	6303      	str	r3, [r0, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800376a:	f102 030c 	add.w	r3, r2, #12
 800376e:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003772:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003776:	f102 0c0c 	add.w	ip, r2, #12
 800377a:	e84c 3100 	strex	r1, r3, [ip]
 800377e:	2900      	cmp	r1, #0
 8003780:	d1f3      	bne.n	800376a <UART_Receive_IT.part.0.isra.0+0x5a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003782:	6813      	ldr	r3, [r2, #0]
 8003784:	06db      	lsls	r3, r3, #27
 8003786:	d422      	bmi.n	80037ce <UART_Receive_IT.part.0.isra.0+0xbe>
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003788:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800378a:	f7ff ffbf 	bl	800370c <HAL_UARTEx_RxEventCallback>
}
 800378e:	b003      	add	sp, #12
 8003790:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003794:	6903      	ldr	r3, [r0, #16]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d1c1      	bne.n	800371e <UART_Receive_IT.part.0.isra.0+0xe>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800379a:	6803      	ldr	r3, [r0, #0]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	7013      	strb	r3, [r2, #0]
 80037a0:	e7c2      	b.n	8003728 <UART_Receive_IT.part.0.isra.0+0x18>
 80037a2:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037a4:	6903      	ldr	r3, [r0, #16]
 80037a6:	b96b      	cbnz	r3, 80037c4 <UART_Receive_IT.part.0.isra.0+0xb4>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80037a8:	6802      	ldr	r2, [r0, #0]
 80037aa:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80037ac:	6852      	ldr	r2, [r2, #4]
 80037ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037b2:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 2U;
 80037b6:	6283      	str	r3, [r0, #40]	; 0x28
 80037b8:	e7b9      	b.n	800372e <UART_Receive_IT.part.0.isra.0+0x1e>
        HAL_UART_RxCpltCallback(huart);
 80037ba:	f7ff ff9b 	bl	80036f4 <HAL_UART_RxCpltCallback>
}
 80037be:	b003      	add	sp, #12
 80037c0:	f85d fb04 	ldr.w	pc, [sp], #4
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80037c4:	6803      	ldr	r3, [r0, #0]
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80037c6:	6a82      	ldr	r2, [r0, #40]	; 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	7013      	strb	r3, [r2, #0]
 80037cc:	e7ac      	b.n	8003728 <UART_Receive_IT.part.0.isra.0+0x18>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80037ce:	9101      	str	r1, [sp, #4]
 80037d0:	6813      	ldr	r3, [r2, #0]
 80037d2:	9301      	str	r3, [sp, #4]
 80037d4:	6853      	ldr	r3, [r2, #4]
 80037d6:	9301      	str	r3, [sp, #4]
 80037d8:	9b01      	ldr	r3, [sp, #4]
 80037da:	e7d5      	b.n	8003788 <UART_Receive_IT.part.0.isra.0+0x78>

080037dc <HAL_UART_IRQHandler>:
{
 80037dc:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80037de:	6803      	ldr	r3, [r0, #0]
{
 80037e0:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	461d      	mov	r5, r3
  if (errorflags == RESET)
 80037e6:	f012 0f0f 	tst.w	r2, #15
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80037ea:	68d9      	ldr	r1, [r3, #12]
{
 80037ec:	b082      	sub	sp, #8
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80037ee:	695e      	ldr	r6, [r3, #20]
  if (errorflags == RESET)
 80037f0:	d171      	bne.n	80038d6 <HAL_UART_IRQHandler+0xfa>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80037f2:	0693      	lsls	r3, r2, #26
 80037f4:	d502      	bpl.n	80037fc <HAL_UART_IRQHandler+0x20>
 80037f6:	068e      	lsls	r6, r1, #26
 80037f8:	f100 80d7 	bmi.w	80039aa <HAL_UART_IRQHandler+0x1ce>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037fc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d00b      	beq.n	800381a <HAL_UART_IRQHandler+0x3e>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003802:	0616      	lsls	r6, r2, #24
 8003804:	d502      	bpl.n	800380c <HAL_UART_IRQHandler+0x30>
 8003806:	0608      	lsls	r0, r1, #24
 8003808:	f100 80a5 	bmi.w	8003956 <HAL_UART_IRQHandler+0x17a>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800380c:	0652      	lsls	r2, r2, #25
 800380e:	d502      	bpl.n	8003816 <HAL_UART_IRQHandler+0x3a>
 8003810:	064b      	lsls	r3, r1, #25
 8003812:	f100 80bf 	bmi.w	8003994 <HAL_UART_IRQHandler+0x1b8>
}
 8003816:	b002      	add	sp, #8
 8003818:	bd70      	pop	{r4, r5, r6, pc}
      && ((isrflags & USART_SR_IDLE) != 0U)
 800381a:	06d6      	lsls	r6, r2, #27
 800381c:	d5f1      	bpl.n	8003802 <HAL_UART_IRQHandler+0x26>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800381e:	06c8      	lsls	r0, r1, #27
 8003820:	d5ef      	bpl.n	8003802 <HAL_UART_IRQHandler+0x26>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003822:	2300      	movs	r3, #0
 8003824:	9301      	str	r3, [sp, #4]
 8003826:	682b      	ldr	r3, [r5, #0]
 8003828:	9301      	str	r3, [sp, #4]
 800382a:	686b      	ldr	r3, [r5, #4]
 800382c:	9301      	str	r3, [sp, #4]
 800382e:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003830:	696b      	ldr	r3, [r5, #20]
 8003832:	065b      	lsls	r3, r3, #25
 8003834:	f140 80e8 	bpl.w	8003a08 <HAL_UART_IRQHandler+0x22c>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003838:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800383a:	6803      	ldr	r3, [r0, #0]
 800383c:	6859      	ldr	r1, [r3, #4]
          && (nb_remaining_rx_data < huart->RxXferSize))
 800383e:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003840:	b289      	uxth	r1, r1
      if ((nb_remaining_rx_data > 0U)
 8003842:	2900      	cmp	r1, #0
 8003844:	f000 8125 	beq.w	8003a92 <HAL_UART_IRQHandler+0x2b6>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003848:	428b      	cmp	r3, r1
 800384a:	f240 8122 	bls.w	8003a92 <HAL_UART_IRQHandler+0x2b6>
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800384e:	6982      	ldr	r2, [r0, #24]
        huart->RxXferCount = nb_remaining_rx_data;
 8003850:	85e1      	strh	r1, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003852:	2a20      	cmp	r2, #32
 8003854:	d036      	beq.n	80038c4 <HAL_UART_IRQHandler+0xe8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003856:	f105 030c 	add.w	r3, r5, #12
 800385a:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800385e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003862:	f105 010c 	add.w	r1, r5, #12
 8003866:	e841 3200 	strex	r2, r3, [r1]
 800386a:	2a00      	cmp	r2, #0
 800386c:	d1f3      	bne.n	8003856 <HAL_UART_IRQHandler+0x7a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800386e:	f105 0314 	add.w	r3, r5, #20
 8003872:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003876:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800387a:	f105 0114 	add.w	r1, r5, #20
 800387e:	e841 3200 	strex	r2, r3, [r1]
 8003882:	2a00      	cmp	r2, #0
 8003884:	d1f3      	bne.n	800386e <HAL_UART_IRQHandler+0x92>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003886:	f105 0314 	add.w	r3, r5, #20
 800388a:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800388e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003892:	f105 0114 	add.w	r1, r5, #20
 8003896:	e841 3200 	strex	r2, r3, [r1]
 800389a:	2a00      	cmp	r2, #0
 800389c:	d1f3      	bne.n	8003886 <HAL_UART_IRQHandler+0xaa>
          huart->RxState = HAL_UART_STATE_READY;
 800389e:	2320      	movs	r3, #32
 80038a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038a4:	6322      	str	r2, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a6:	f105 030c 	add.w	r3, r5, #12
 80038aa:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038ae:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b2:	f105 010c 	add.w	r1, r5, #12
 80038b6:	e841 3200 	strex	r2, r3, [r1]
 80038ba:	2a00      	cmp	r2, #0
 80038bc:	d1f3      	bne.n	80038a6 <HAL_UART_IRQHandler+0xca>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80038be:	f7ff f82f 	bl	8002920 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80038c2:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80038c4:	2202      	movs	r2, #2
 80038c6:	6362      	str	r2, [r4, #52]	; 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80038c8:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 80038ca:	4620      	mov	r0, r4
 80038cc:	1a9b      	subs	r3, r3, r2
 80038ce:	b299      	uxth	r1, r3
 80038d0:	f7ff ff1c 	bl	800370c <HAL_UARTEx_RxEventCallback>
 80038d4:	e79f      	b.n	8003816 <HAL_UART_IRQHandler+0x3a>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80038d6:	f006 0601 	and.w	r6, r6, #1
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80038da:	f401 7090 	and.w	r0, r1, #288	; 0x120
 80038de:	4330      	orrs	r0, r6
 80038e0:	d08c      	beq.n	80037fc <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80038e2:	07d0      	lsls	r0, r2, #31
 80038e4:	d505      	bpl.n	80038f2 <HAL_UART_IRQHandler+0x116>
 80038e6:	05cd      	lsls	r5, r1, #23
 80038e8:	d503      	bpl.n	80038f2 <HAL_UART_IRQHandler+0x116>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80038ea:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80038ec:	f040 0001 	orr.w	r0, r0, #1
 80038f0:	6460      	str	r0, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038f2:	0750      	lsls	r0, r2, #29
 80038f4:	d526      	bpl.n	8003944 <HAL_UART_IRQHandler+0x168>
 80038f6:	b12e      	cbz	r6, 8003904 <HAL_UART_IRQHandler+0x128>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80038f8:	6c60      	ldr	r0, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038fa:	0795      	lsls	r5, r2, #30
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80038fc:	f040 0002 	orr.w	r0, r0, #2
 8003900:	6460      	str	r0, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003902:	d423      	bmi.n	800394c <HAL_UART_IRQHandler+0x170>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003904:	0715      	lsls	r5, r2, #28
 8003906:	d507      	bpl.n	8003918 <HAL_UART_IRQHandler+0x13c>
 8003908:	f001 0020 	and.w	r0, r1, #32
 800390c:	4330      	orrs	r0, r6
 800390e:	d003      	beq.n	8003918 <HAL_UART_IRQHandler+0x13c>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003910:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8003912:	f040 0008 	orr.w	r0, r0, #8
 8003916:	6460      	str	r0, [r4, #68]	; 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003918:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800391a:	2800      	cmp	r0, #0
 800391c:	f43f af7b 	beq.w	8003816 <HAL_UART_IRQHandler+0x3a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003920:	0690      	lsls	r0, r2, #26
 8003922:	d502      	bpl.n	800392a <HAL_UART_IRQHandler+0x14e>
 8003924:	068a      	lsls	r2, r1, #26
 8003926:	f100 80aa 	bmi.w	8003a7e <HAL_UART_IRQHandler+0x2a2>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800392a:	695b      	ldr	r3, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800392c:	6c65      	ldr	r5, [r4, #68]	; 0x44
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800392e:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003932:	f005 0508 	and.w	r5, r5, #8
 8003936:	431d      	orrs	r5, r3
        UART_EndRxTransfer(huart);
 8003938:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800393a:	d140      	bne.n	80039be <HAL_UART_IRQHandler+0x1e2>
        HAL_UART_ErrorCallback(huart);
 800393c:	f7ff fedc 	bl	80036f8 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003940:	6465      	str	r5, [r4, #68]	; 0x44
 8003942:	e768      	b.n	8003816 <HAL_UART_IRQHandler+0x3a>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003944:	0790      	lsls	r0, r2, #30
 8003946:	d5dd      	bpl.n	8003904 <HAL_UART_IRQHandler+0x128>
 8003948:	2e00      	cmp	r6, #0
 800394a:	d0db      	beq.n	8003904 <HAL_UART_IRQHandler+0x128>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800394c:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800394e:	f040 0004 	orr.w	r0, r0, #4
 8003952:	6460      	str	r0, [r4, #68]	; 0x44
 8003954:	e7d6      	b.n	8003904 <HAL_UART_IRQHandler+0x128>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003956:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800395a:	2b21      	cmp	r3, #33	; 0x21
 800395c:	f47f af5b 	bne.w	8003816 <HAL_UART_IRQHandler+0x3a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003960:	68a3      	ldr	r3, [r4, #8]
 8003962:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003966:	f000 809c 	beq.w	8003aa2 <HAL_UART_IRQHandler+0x2c6>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800396a:	6a23      	ldr	r3, [r4, #32]
 800396c:	1c5a      	adds	r2, r3, #1
 800396e:	6222      	str	r2, [r4, #32]
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	606b      	str	r3, [r5, #4]
    if (--huart->TxXferCount == 0U)
 8003974:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8003976:	3b01      	subs	r3, #1
 8003978:	b29b      	uxth	r3, r3
 800397a:	84e3      	strh	r3, [r4, #38]	; 0x26
 800397c:	2b00      	cmp	r3, #0
 800397e:	f47f af4a 	bne.w	8003816 <HAL_UART_IRQHandler+0x3a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003982:	68eb      	ldr	r3, [r5, #12]
 8003984:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003988:	60eb      	str	r3, [r5, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800398a:	68eb      	ldr	r3, [r5, #12]
 800398c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003990:	60eb      	str	r3, [r5, #12]
 8003992:	e740      	b.n	8003816 <HAL_UART_IRQHandler+0x3a>
  huart->gState = HAL_UART_STATE_READY;
 8003994:	2220      	movs	r2, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003996:	68eb      	ldr	r3, [r5, #12]
  HAL_UART_TxCpltCallback(huart);
 8003998:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800399a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800399e:	60eb      	str	r3, [r5, #12]
  huart->gState = HAL_UART_STATE_READY;
 80039a0:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  HAL_UART_TxCpltCallback(huart);
 80039a4:	f7ff fea4 	bl	80036f0 <HAL_UART_TxCpltCallback>
  return HAL_OK;
 80039a8:	e735      	b.n	8003816 <HAL_UART_IRQHandler+0x3a>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80039aa:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 80039ae:	2b22      	cmp	r3, #34	; 0x22
 80039b0:	f47f af31 	bne.w	8003816 <HAL_UART_IRQHandler+0x3a>
}
 80039b4:	b002      	add	sp, #8
 80039b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80039ba:	f7ff bea9 	b.w	8003710 <UART_Receive_IT.part.0.isra.0>
        UART_EndRxTransfer(huart);
 80039be:	f7ff fdd1 	bl	8003564 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039c2:	6825      	ldr	r5, [r4, #0]
 80039c4:	696b      	ldr	r3, [r5, #20]
 80039c6:	065b      	lsls	r3, r3, #25
 80039c8:	d51a      	bpl.n	8003a00 <HAL_UART_IRQHandler+0x224>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ca:	f105 0314 	add.w	r3, r5, #20
 80039ce:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d6:	f105 0114 	add.w	r1, r5, #20
 80039da:	e841 3200 	strex	r2, r3, [r1]
 80039de:	2a00      	cmp	r2, #0
 80039e0:	d1f3      	bne.n	80039ca <HAL_UART_IRQHandler+0x1ee>
          if (huart->hdmarx != NULL)
 80039e2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80039e4:	b160      	cbz	r0, 8003a00 <HAL_UART_IRQHandler+0x224>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80039e6:	4b35      	ldr	r3, [pc, #212]	; (8003abc <HAL_UART_IRQHandler+0x2e0>)
 80039e8:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80039ea:	f7fe ffbf 	bl	800296c <HAL_DMA_Abort_IT>
 80039ee:	2800      	cmp	r0, #0
 80039f0:	f43f af11 	beq.w	8003816 <HAL_UART_IRQHandler+0x3a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80039f4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80039f6:	6b43      	ldr	r3, [r0, #52]	; 0x34
}
 80039f8:	b002      	add	sp, #8
 80039fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80039fe:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8003a00:	4620      	mov	r0, r4
 8003a02:	f7ff fe79 	bl	80036f8 <HAL_UART_ErrorCallback>
 8003a06:	e706      	b.n	8003816 <HAL_UART_IRQHandler+0x3a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a08:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
      if ((huart->RxXferCount > 0U)
 8003a0a:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a0c:	b292      	uxth	r2, r2
      if ((huart->RxXferCount > 0U)
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	f43f af00 	beq.w	8003816 <HAL_UART_IRQHandler+0x3a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a16:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8003a18:	1a8a      	subs	r2, r1, r2
 8003a1a:	b291      	uxth	r1, r2
          && (nb_rx_data > 0U))
 8003a1c:	2900      	cmp	r1, #0
 8003a1e:	f43f aefa 	beq.w	8003816 <HAL_UART_IRQHandler+0x3a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a22:	f105 030c 	add.w	r3, r5, #12
 8003a26:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a2a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a2e:	f105 000c 	add.w	r0, r5, #12
 8003a32:	e840 3200 	strex	r2, r3, [r0]
 8003a36:	2a00      	cmp	r2, #0
 8003a38:	d1f3      	bne.n	8003a22 <HAL_UART_IRQHandler+0x246>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a3a:	f105 0314 	add.w	r3, r5, #20
 8003a3e:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a42:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a46:	f105 0014 	add.w	r0, r5, #20
 8003a4a:	e840 3200 	strex	r2, r3, [r0]
 8003a4e:	2a00      	cmp	r2, #0
 8003a50:	d1f3      	bne.n	8003a3a <HAL_UART_IRQHandler+0x25e>
        huart->RxState = HAL_UART_STATE_READY;
 8003a52:	2320      	movs	r3, #32
 8003a54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a58:	6322      	str	r2, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a5a:	f105 030c 	add.w	r3, r5, #12
 8003a5e:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a62:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a66:	f105 000c 	add.w	r0, r5, #12
 8003a6a:	e840 3200 	strex	r2, r3, [r0]
 8003a6e:	2a00      	cmp	r2, #0
 8003a70:	d1f3      	bne.n	8003a5a <HAL_UART_IRQHandler+0x27e>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a72:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003a74:	4620      	mov	r0, r4
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a76:	6363      	str	r3, [r4, #52]	; 0x34
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003a78:	f7ff fe48 	bl	800370c <HAL_UARTEx_RxEventCallback>
 8003a7c:	e6cb      	b.n	8003816 <HAL_UART_IRQHandler+0x3a>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a7e:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 8003a82:	2a22      	cmp	r2, #34	; 0x22
 8003a84:	f47f af51 	bne.w	800392a <HAL_UART_IRQHandler+0x14e>
 8003a88:	4620      	mov	r0, r4
 8003a8a:	f7ff fe41 	bl	8003710 <UART_Receive_IT.part.0.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a8e:	6823      	ldr	r3, [r4, #0]
 8003a90:	e74b      	b.n	800392a <HAL_UART_IRQHandler+0x14e>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003a92:	4299      	cmp	r1, r3
 8003a94:	f47f aebf 	bne.w	8003816 <HAL_UART_IRQHandler+0x3a>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8003a98:	6983      	ldr	r3, [r0, #24]
 8003a9a:	2b20      	cmp	r3, #32
 8003a9c:	f47f aebb 	bne.w	8003816 <HAL_UART_IRQHandler+0x3a>
 8003aa0:	e7e7      	b.n	8003a72 <HAL_UART_IRQHandler+0x296>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003aa2:	6923      	ldr	r3, [r4, #16]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	f47f af60 	bne.w	800396a <HAL_UART_IRQHandler+0x18e>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003aaa:	6a23      	ldr	r3, [r4, #32]
 8003aac:	f833 2b02 	ldrh.w	r2, [r3], #2
 8003ab0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ab4:	606a      	str	r2, [r5, #4]
      huart->pTxBuffPtr += 2U;
 8003ab6:	6223      	str	r3, [r4, #32]
 8003ab8:	e75c      	b.n	8003974 <HAL_UART_IRQHandler+0x198>
 8003aba:	bf00      	nop
 8003abc:	080036fd 	.word	0x080036fd

08003ac0 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8003ac0:	4770      	bx	lr
 8003ac2:	bf00      	nop

08003ac4 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8003ac4:	e7fe      	b.n	8003ac4 <HardFault_Handler>
 8003ac6:	bf00      	nop

08003ac8 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8003ac8:	e7fe      	b.n	8003ac8 <MemManage_Handler>
 8003aca:	bf00      	nop

08003acc <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8003acc:	e7fe      	b.n	8003acc <BusFault_Handler>
 8003ace:	bf00      	nop

08003ad0 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8003ad0:	e7fe      	b.n	8003ad0 <UsageFault_Handler>
 8003ad2:	bf00      	nop

08003ad4 <SVC_Handler>:
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop

08003ad8 <DebugMon_Handler>:
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop

08003adc <PendSV_Handler>:
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop

08003ae0 <SysTick_Handler>:
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop

08003ae4 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003ae4:	4801      	ldr	r0, [pc, #4]	; (8003aec <USART1_IRQHandler+0x8>)
 8003ae6:	f7ff be79 	b.w	80037dc <HAL_UART_IRQHandler>
 8003aea:	bf00      	nop
 8003aec:	20000458 	.word	0x20000458

08003af0 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003af0:	4801      	ldr	r0, [pc, #4]	; (8003af8 <USART2_IRQHandler+0x8>)
 8003af2:	f7ff be73 	b.w	80037dc <HAL_UART_IRQHandler>
 8003af6:	bf00      	nop
 8003af8:	200004a0 	.word	0x200004a0

08003afc <TIM7_IRQHandler>:
void TIM7_IRQHandler(void)
{
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003afc:	4801      	ldr	r0, [pc, #4]	; (8003b04 <TIM7_IRQHandler+0x8>)
 8003afe:	f7ff bbbb 	b.w	8003278 <HAL_TIM_IRQHandler>
 8003b02:	bf00      	nop
 8003b04:	2000056c 	.word	0x2000056c

08003b08 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop

08003b0c <__libc_init_array>:
 8003b0c:	b570      	push	{r4, r5, r6, lr}
 8003b0e:	4e0d      	ldr	r6, [pc, #52]	; (8003b44 <__libc_init_array+0x38>)
 8003b10:	4d0d      	ldr	r5, [pc, #52]	; (8003b48 <__libc_init_array+0x3c>)
 8003b12:	1b76      	subs	r6, r6, r5
 8003b14:	10b6      	asrs	r6, r6, #2
 8003b16:	d006      	beq.n	8003b26 <__libc_init_array+0x1a>
 8003b18:	2400      	movs	r4, #0
 8003b1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b1e:	3401      	adds	r4, #1
 8003b20:	4798      	blx	r3
 8003b22:	42a6      	cmp	r6, r4
 8003b24:	d1f9      	bne.n	8003b1a <__libc_init_array+0xe>
 8003b26:	4e09      	ldr	r6, [pc, #36]	; (8003b4c <__libc_init_array+0x40>)
 8003b28:	4d09      	ldr	r5, [pc, #36]	; (8003b50 <__libc_init_array+0x44>)
 8003b2a:	f000 f8d5 	bl	8003cd8 <_init>
 8003b2e:	1b76      	subs	r6, r6, r5
 8003b30:	10b6      	asrs	r6, r6, #2
 8003b32:	d006      	beq.n	8003b42 <__libc_init_array+0x36>
 8003b34:	2400      	movs	r4, #0
 8003b36:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b3a:	3401      	adds	r4, #1
 8003b3c:	4798      	blx	r3
 8003b3e:	42a6      	cmp	r6, r4
 8003b40:	d1f9      	bne.n	8003b36 <__libc_init_array+0x2a>
 8003b42:	bd70      	pop	{r4, r5, r6, pc}
 8003b44:	08003e3c 	.word	0x08003e3c
 8003b48:	08003e3c 	.word	0x08003e3c
 8003b4c:	08003e44 	.word	0x08003e44
 8003b50:	08003e3c 	.word	0x08003e3c

08003b54 <memset>:
 8003b54:	0783      	lsls	r3, r0, #30
 8003b56:	b530      	push	{r4, r5, lr}
 8003b58:	d048      	beq.n	8003bec <memset+0x98>
 8003b5a:	1e54      	subs	r4, r2, #1
 8003b5c:	2a00      	cmp	r2, #0
 8003b5e:	d03f      	beq.n	8003be0 <memset+0x8c>
 8003b60:	4603      	mov	r3, r0
 8003b62:	b2ca      	uxtb	r2, r1
 8003b64:	e001      	b.n	8003b6a <memset+0x16>
 8003b66:	3c01      	subs	r4, #1
 8003b68:	d33a      	bcc.n	8003be0 <memset+0x8c>
 8003b6a:	f803 2b01 	strb.w	r2, [r3], #1
 8003b6e:	079d      	lsls	r5, r3, #30
 8003b70:	d1f9      	bne.n	8003b66 <memset+0x12>
 8003b72:	2c03      	cmp	r4, #3
 8003b74:	d92d      	bls.n	8003bd2 <memset+0x7e>
 8003b76:	b2cd      	uxtb	r5, r1
 8003b78:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8003b7c:	2c0f      	cmp	r4, #15
 8003b7e:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8003b82:	d936      	bls.n	8003bf2 <memset+0x9e>
 8003b84:	f1a4 0210 	sub.w	r2, r4, #16
 8003b88:	f022 0c0f 	bic.w	ip, r2, #15
 8003b8c:	f103 0e20 	add.w	lr, r3, #32
 8003b90:	44e6      	add	lr, ip
 8003b92:	ea4f 1c12 	mov.w	ip, r2, lsr #4
 8003b96:	f103 0210 	add.w	r2, r3, #16
 8003b9a:	e942 5504 	strd	r5, r5, [r2, #-16]
 8003b9e:	e942 5502 	strd	r5, r5, [r2, #-8]
 8003ba2:	3210      	adds	r2, #16
 8003ba4:	4572      	cmp	r2, lr
 8003ba6:	d1f8      	bne.n	8003b9a <memset+0x46>
 8003ba8:	f10c 0201 	add.w	r2, ip, #1
 8003bac:	f014 0f0c 	tst.w	r4, #12
 8003bb0:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8003bb4:	f004 0c0f 	and.w	ip, r4, #15
 8003bb8:	d013      	beq.n	8003be2 <memset+0x8e>
 8003bba:	f1ac 0304 	sub.w	r3, ip, #4
 8003bbe:	f023 0303 	bic.w	r3, r3, #3
 8003bc2:	3304      	adds	r3, #4
 8003bc4:	4413      	add	r3, r2
 8003bc6:	f842 5b04 	str.w	r5, [r2], #4
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d1fb      	bne.n	8003bc6 <memset+0x72>
 8003bce:	f00c 0403 	and.w	r4, ip, #3
 8003bd2:	b12c      	cbz	r4, 8003be0 <memset+0x8c>
 8003bd4:	b2ca      	uxtb	r2, r1
 8003bd6:	441c      	add	r4, r3
 8003bd8:	f803 2b01 	strb.w	r2, [r3], #1
 8003bdc:	429c      	cmp	r4, r3
 8003bde:	d1fb      	bne.n	8003bd8 <memset+0x84>
 8003be0:	bd30      	pop	{r4, r5, pc}
 8003be2:	4664      	mov	r4, ip
 8003be4:	4613      	mov	r3, r2
 8003be6:	2c00      	cmp	r4, #0
 8003be8:	d1f4      	bne.n	8003bd4 <memset+0x80>
 8003bea:	e7f9      	b.n	8003be0 <memset+0x8c>
 8003bec:	4603      	mov	r3, r0
 8003bee:	4614      	mov	r4, r2
 8003bf0:	e7bf      	b.n	8003b72 <memset+0x1e>
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	46a4      	mov	ip, r4
 8003bf6:	e7e0      	b.n	8003bba <memset+0x66>

08003bf8 <register_fini>:
 8003bf8:	4b02      	ldr	r3, [pc, #8]	; (8003c04 <register_fini+0xc>)
 8003bfa:	b113      	cbz	r3, 8003c02 <register_fini+0xa>
 8003bfc:	4802      	ldr	r0, [pc, #8]	; (8003c08 <register_fini+0x10>)
 8003bfe:	f000 b805 	b.w	8003c0c <atexit>
 8003c02:	4770      	bx	lr
 8003c04:	00000000 	.word	0x00000000
 8003c08:	08003c19 	.word	0x08003c19

08003c0c <atexit>:
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	4601      	mov	r1, r0
 8003c10:	461a      	mov	r2, r3
 8003c12:	4618      	mov	r0, r3
 8003c14:	f000 b81a 	b.w	8003c4c <__register_exitproc>

08003c18 <__libc_fini_array>:
 8003c18:	b538      	push	{r3, r4, r5, lr}
 8003c1a:	4b08      	ldr	r3, [pc, #32]	; (8003c3c <__libc_fini_array+0x24>)
 8003c1c:	4d08      	ldr	r5, [pc, #32]	; (8003c40 <__libc_fini_array+0x28>)
 8003c1e:	1b5b      	subs	r3, r3, r5
 8003c20:	109c      	asrs	r4, r3, #2
 8003c22:	d007      	beq.n	8003c34 <__libc_fini_array+0x1c>
 8003c24:	3b04      	subs	r3, #4
 8003c26:	441d      	add	r5, r3
 8003c28:	3c01      	subs	r4, #1
 8003c2a:	f855 3904 	ldr.w	r3, [r5], #-4
 8003c2e:	4798      	blx	r3
 8003c30:	2c00      	cmp	r4, #0
 8003c32:	d1f9      	bne.n	8003c28 <__libc_fini_array+0x10>
 8003c34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c38:	f000 b854 	b.w	8003ce4 <_fini>
 8003c3c:	08003e48 	.word	0x08003e48
 8003c40:	08003e44 	.word	0x08003e44

08003c44 <__retarget_lock_acquire_recursive>:
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop

08003c48 <__retarget_lock_release_recursive>:
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop

08003c4c <__register_exitproc>:
 8003c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c50:	f8df a07c 	ldr.w	sl, [pc, #124]	; 8003cd0 <__register_exitproc+0x84>
 8003c54:	4606      	mov	r6, r0
 8003c56:	f8da 0000 	ldr.w	r0, [sl]
 8003c5a:	4698      	mov	r8, r3
 8003c5c:	460f      	mov	r7, r1
 8003c5e:	4691      	mov	r9, r2
 8003c60:	f7ff fff0 	bl	8003c44 <__retarget_lock_acquire_recursive>
 8003c64:	4b1b      	ldr	r3, [pc, #108]	; (8003cd4 <__register_exitproc+0x88>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 8003c6c:	b324      	cbz	r4, 8003cb8 <__register_exitproc+0x6c>
 8003c6e:	6865      	ldr	r5, [r4, #4]
 8003c70:	2d1f      	cmp	r5, #31
 8003c72:	dc26      	bgt.n	8003cc2 <__register_exitproc+0x76>
 8003c74:	b95e      	cbnz	r6, 8003c8e <__register_exitproc+0x42>
 8003c76:	1c6b      	adds	r3, r5, #1
 8003c78:	3502      	adds	r5, #2
 8003c7a:	f8da 0000 	ldr.w	r0, [sl]
 8003c7e:	6063      	str	r3, [r4, #4]
 8003c80:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8003c84:	f7ff ffe0 	bl	8003c48 <__retarget_lock_release_recursive>
 8003c88:	2000      	movs	r0, #0
 8003c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c8e:	2301      	movs	r3, #1
 8003c90:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8003c94:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 8003c98:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
 8003c9c:	40ab      	lsls	r3, r5
 8003c9e:	431a      	orrs	r2, r3
 8003ca0:	2e02      	cmp	r6, #2
 8003ca2:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
 8003ca6:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 8003caa:	d1e4      	bne.n	8003c76 <__register_exitproc+0x2a>
 8003cac:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
 8003cb6:	e7de      	b.n	8003c76 <__register_exitproc+0x2a>
 8003cb8:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 8003cbc:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 8003cc0:	e7d5      	b.n	8003c6e <__register_exitproc+0x22>
 8003cc2:	f8da 0000 	ldr.w	r0, [sl]
 8003cc6:	f7ff ffbf 	bl	8003c48 <__retarget_lock_release_recursive>
 8003cca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003cce:	e7dc      	b.n	8003c8a <__register_exitproc+0x3e>
 8003cd0:	20000438 	.word	0x20000438
 8003cd4:	08003e30 	.word	0x08003e30

08003cd8 <_init>:
 8003cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cda:	bf00      	nop
 8003cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cde:	bc08      	pop	{r3}
 8003ce0:	469e      	mov	lr, r3
 8003ce2:	4770      	bx	lr

08003ce4 <_fini>:
 8003ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ce6:	bf00      	nop
 8003ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cea:	bc08      	pop	{r3}
 8003cec:	469e      	mov	lr, r3
 8003cee:	4770      	bx	lr
